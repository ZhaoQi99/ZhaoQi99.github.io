<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>温柔小猪</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaoqi.vip/"/>
  <updated>2021-09-24T05:34:52.531Z</updated>
  <id>https://zhaoqi.vip/</id>
  
  <author>
    <name>Zhao Qi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PBjarCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/2720124286.html"/>
    <id>https://zhaoqi.vip/2720124286.html</id>
    <published>2021-09-23T08:45:05.000Z</published>
    <updated>2021-09-24T05:34:52.531Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Convert&quot;&gt;&lt;a href=&quot;#Convert&quot; class=&quot;headerlink&quot; title=&quot;Convert&quot;&gt;&lt;/a&gt;Convert&lt;/h1&gt;&lt;p&gt;&lt;em&gt;So this is supposed to be the challenge for absolute beginners. For this chall, you will get a hexadecimal number, and have to convert it to text. If you don’t know how to do this, Google is your best friend!!!&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;给了一个文件&lt;code&gt;file.txt&lt;/code&gt;,里面是一个16进制的数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;n = &lt;span class=&quot;string&quot;&gt;&#39;666c61677b6469735f69735f615f666c346767675f68317d&#39;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,len(n),&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;):
    print(chr(int(n[i:i+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)),end=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;flag:&lt;/strong&gt;&lt;code&gt;flag{dis_is_a_fl4ggg_h1}&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="PBjarCTF" scheme="https://zhaoqi.vip/tags/PBjarCTF/"/>
    
  </entry>
  
  <entry>
    <title>TsukuCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/434189373.html"/>
    <id>https://zhaoqi.vip/434189373.html</id>
    <published>2021-09-22T05:38:53.000Z</published>
    <updated>2021-09-24T05:34:52.631Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CrackSSH&quot;&gt;&lt;a href=&quot;#CrackSSH&quot; class=&quot;headerlink&quot; title=&quot;CrackSSH!&quot;&gt;&lt;/a&gt;CrackSSH!&lt;/h1&gt;&lt;p&gt;&lt;em&gt;調査対象のサーバーで使われている公開鍵を入手した。噂によると、この鍵には問題があるらしいが…。なんとかして侵入しなければ。&lt;/em&gt;&lt;br&gt;&lt;em&gt;Target: frt.hongo.wide.ad.jp&lt;/em&gt;&lt;br&gt;&lt;em&gt;Port: 30022&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;题目中给了一个公钥:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;asciiarmor&quot;&gt;ssh-rsa AAAAB3NzaC1yc2EAAACBAWKA1hYjuvhxiwCGKsG+nbLj/iYy6pRwkkka64J6L+VLPp4K3JVSREEzmztAWxjkhGOleol3vzDRqR2J+4nSVOI9FhJyiBdSgECmXJYojGVSU56bCMdcysEkKYVz5e0+xQAjZDrotpm+FT0VAdwdWuZM68zZY8DE9H2uo9daHCf/AAAAgQIB+Y+6jm9xvNibnZLIoAvIVv1GflbjQ5AoKp52yPq+3nRr1N1aalXhHV1pXcwa1yra81+DFDsu4bdpPC7f25pLriBZKaSNT7K0+sRQdP50iBaYjsF2Cyg8HjoeGaXVkh3bOw2V2WwUsU4qEr9TjPbMzrCCxkFDQPnwOwmiWQM8GQ== tsukushi@frt.hongo.wide.ad.jp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考知乎(&lt;a href=&quot;https://zhuanlan.zhihu.com/p/33949377&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ssh-keygen生成的id_rsa文件的格式&lt;/a&gt;)上的的一篇文章:&lt;/p&gt;
&lt;p&gt;首先,&lt;code&gt;awk &amp;#39;{print $2}&amp;#39; crackssh.pub | base64 -d | hexdump -C&lt;/code&gt;,得到:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;assembly&quot;&gt;00000000  00 00 00 07 73 73 68 2d  72 73 61 00 00 00 81 01  |....ssh-rsa.....|
00000010  62 80 d6 16 23 ba f8 71  8b 00 86 2a c1 be 9d b2  |b...#..q...*....|
00000020  e3 fe 26 32 ea 94 70 92  49 1a eb 82 7a 2f e5 4b  |..&amp;amp;2..p.I...z/.K|
00000030  3e 9e 0a dc 95 52 44 41  33 9b 3b 40 5b 18 e4 84  |&amp;gt;....RDA3.;@[...|
00000040  63 a5 7a 89 77 bf 30 d1  a9 1d 89 fb 89 d2 54 e2  |c.z.w.0.......T.|
00000050  3d 16 12 72 88 17 52 80  40 a6 5c 96 28 8c 65 52  |=..r..R.@.\.(.eR|
00000060  53 9e 9b 08 c7 5c ca c1  24 29 85 73 e5 ed 3e c5  |S....\..$).s..&amp;gt;.|
00000070  00 23 64 3a e8 b6 99 be  15 3d 15 01 dc 1d 5a e6  |.#d:.....=....Z.|
00000080  4c eb cc d9 63 c0 c4 f4  7d ae a3 d7 5a 1c 27 ff  |L...c...}...Z.&amp;apos;.|
00000090  00 00 00 81 02 01 f9 8f  ba 8e 6f 71 bc d8 9b 9d  |..........oq....|
000000a0  92 c8 a0 0b c8 56 fd 46  7e 56 e3 43 90 28 2a 9e  |.....V.F~V.C.(*.|
000000b0  76 c8 fa be de 74 6b d4  dd 5a 6a 55 e1 1d 5d 69  |v....tk..ZjU..]i|
000000c0  5d cc 1a d7 2a da f3 5f  83 14 3b 2e e1 b7 69 3c  |]...*.._..;...i&amp;lt;|
000000d0  2e df db 9a 4b ae 20 59  29 a4 8d 4f b2 b4 fa c4  |....K. Y)..O....|
000000e0  50 74 fe 74 88 16 98 8e  c1 76 0b 28 3c 1e 3a 1e  |Pt.t.....v.(&amp;lt;.:.|
000000f0  19 a5 d5 92 1d db 3b 0d  95 d9 6c 14 b1 4e 2a 12  |......;...l..N*.|
00000100  bf 53 8c f6 cc ce b0 82  c6 41 43 40 f9 f0 3b 09  |.S.......AC@..;.|
00000110  a2 59 03 3c 19                                    |.Y.&amp;lt;.|
00000115
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前4个字节(00 00 00 07)表示接下来的数据块是7个字节,接下来7个字节的内容是73 73 68 2d 72 73 61,正好是&lt;code&gt;ssh-rsa&lt;/code&gt;的ASCII码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接下来四个字节(00 00 00 81)表示接下来的数据块是0x81个字节,得到e的16进制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再接下来四个字节(00 00 00 81)表示接下来的数据块是0x81个字节,得到n的16进制&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;~$ echo &quot;$((16#00000081))&quot;
129
~$ N=$(awk &#39;{print $2}&#39; ~/.ssh/id_rsa.pub | base64 -d | hexdump -ve &#39;1/1 &quot;%.2x&quot;&#39;)
~$ e=${N: 30:129*2} &amp;amp;&amp;amp; echo $e
0100010000020100e5f95a4428736b17d113d90b86eba7d9052ebec087c808fd3e5704a10b2df04638b309f0e7cae4b0cd5bcefbfae5c28f681edbedaf10e35c77201380f4d309b337c8e0c62e815a967d18c9a4642fb1ebc44ea3a4a75335d097135895a7604e1662c6df43d61212f389288f4e717e4e6ebec06ce1fc5b1d4c2c
~$ n=${N: -129*2} &amp;amp;&amp;amp; echo $n
bf582bcc145ea7b5b398b0c51c06be2d367248f6c247653e928bb317a290d7e7a99c169999cf0dbc56f875948d236da894abf2c8b4aac54d5dcb2b6ac8bfb1f9d87416a94a46e70d3083811a0397dcc8abea0b7e1b88fd230f05fd5d45de5bdee21d535aea684749a5c576d8b6e96aa358175f8f7666f27e9729fab06e25ac8021
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;官方的Writeup给了另一种做法,可以直接得到e和n的16进制表示形式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;~$ ssh-keygen -f crackssh.pub -e -m pem | openssl asn1parse
    0:d=0  hl=4 l= 264 cons: SEQUENCE          
    4:d=1  hl=3 l= 129 prim: INTEGER  :0201F98FBA8E6F71BCD89B9D92C8A00BC856FD467E56E34390282A9E76C8FABEDE746BD4DD5A6A55E11D5D695DCC1AD72ADAF35F83143B2EE1B7693C2EDFDB9A4BAE205929A48D4FB2B4FAC45074FE748816988EC1760B283C1E3A1E19A5D5921DDB3B0D95D96C14B14E2A12BF538CF6CCCEB082C6414340F9F03B09A259033C19
  136:d=1  hl=3 l= 129 prim: INTEGER  :016280D61623BAF8718B00862AC1BE9DB2E3FE2632EA947092491AEB827A2FE54B3E9E0ADC95524441339B3B405B18E48463A57A8977BF30D1A91D89FB89D254E23D1612728817528040A65C96288C6552539E9B08C75CCAC124298573E5ED3EC50023643AE8B699BE153D1501DC1D5AE64CEBCCD963C0C4F47DAEA3D75A1C27FF
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用&lt;a href=&quot;https://github.com/Ganapati/RsaCtfTool&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RsaCtfTool&lt;/a&gt;生成私钥,保存至&lt;code&gt;id_rsa&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;python RsaCtfTool.py -n 360925413365609656207284763303112593050686426607629131354843699618905677197872793512380288223361149508460688151102823348462592916817609977273908821217493993702786929282477487755465976082059834867631026295714550319202482180891845062064382568022072228888091051431136923983143306662931216184662445381040847666201 -e 248940659700671391171916045022225211367167934215525303038734152650593067612113589541083076628705613883775652505492831370527586438096113903892713520850387855997035509546247913887222055672708066391999421835495881798128330308530099218984443115901043292942963247939575084326452874538239309850357410618060448737279 --private
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;asciiarmor&quot;&gt;-----BEGIN RSA PRIVATE KEY-----
MIICOQIBAAKBgQIB+Y+6jm9xvNibnZLIoAvIVv1GflbjQ5AoKp52yPq+3nRr1N1a
alXhHV1pXcwa1yra81+DFDsu4bdpPC7f25pLriBZKaSNT7K0+sRQdP50iBaYjsF2
Cyg8HjoeGaXVkh3bOw2V2WwUsU4qEr9TjPbMzrCCxkFDQPnwOwmiWQM8GQKBgQFi
gNYWI7r4cYsAhirBvp2y4/4mMuqUcJJJGuuCei/lSz6eCtyVUkRBM5s7QFsY5IRj
pXqJd78w0akdifuJ0lTiPRYScogXUoBAplyWKIxlUlOemwjHXMrBJCmFc+XtPsUA
I2Q66LaZvhU9FQHcHVrmTOvM2WPAxPR9rqPXWhwn/wIgNHyza85w/fnNPOZwpCTM
OZ6242GZZRcNX4iFJaXeun8CQQEL5ReRSsEcF106aHY8Yohd4FxaChPms4M8/DXP
+WMC6GT0qWRj3LZYkndvP2WxVOoZYxf0rQc+ew9rFVaZ6OotAkEB6ydXjs82dKS/
KS3ffoUyj4oh7viR9j3fH5WBep9S0MeyVZc16Cwj0mPZDRbL1n7Cs0oSZD/A4FzO
OgWAxc2pHQIgNHyza85w/fnNPOZwpCTMOZ6242GZZRcNX4iFJaXeun8CIDR8s2vO
cP35zTzmcKQkzDmetuNhmWUXDV+IhSWl3rp/AkBdum7eZMxE/VYX7QV9xND/bpn2
/MHD4BHF8c/MirawY5HC/RTviwnfpXAoF4ArBY1ZG3nCn9L19v/sUcFQKC9X
-----END RSA PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;chmod 600 id_rsa
ssh tsukushi@frt.hongo.wide.ad.jp -p 30022 -i id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;flag:&lt;/strong&gt;&lt;code&gt;TsukuCTF{D0nt_use_w34k_RS4_key_generat10n}&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="TsukuCTF" scheme="https://zhaoqi.vip/tags/TsukuCTF/"/>
    
  </entry>
  
  <entry>
    <title>SunshineCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/1683940375.html"/>
    <id>https://zhaoqi.vip/1683940375.html</id>
    <published>2021-09-21T15:38:47.000Z</published>
    <updated>2021-09-24T05:34:52.555Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MultipleExponents&quot;&gt;&lt;a href=&quot;#MultipleExponents&quot; class=&quot;headerlink&quot; title=&quot;MultipleExponents&quot;&gt;&lt;/a&gt;MultipleExponents&lt;/h1&gt;&lt;p&gt;&lt;em&gt;Both Alice and Bob share the same modulus, but with different exponents. If only there was some way I could recover this message that was sent to both of them.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;题目中给出了n,e1,e2,c1,c2的值,这里可以利用&lt;a href=&quot;https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/#_7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RSA共模攻击&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; gmpy2
&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; long_to_bytes

data = {&lt;span class=&quot;string&quot;&gt;&#39;n&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;86683300105327745365439507825347702001838360528840593828044782382505346188827666308497121206572195142485091411381691608302239467720308057846966586611038898446400292056901615985225826651071775239736355509302701234225559345175968513640372874437860580877571155199027883755959442408968543666251138423852242301639&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e1&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;11048796690938982746152432997911442334648615616780223415034610235310401058533076125720945559697433984697892923155680783661955179131565701195219010273246901&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e2&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;9324711814017970310132549903114153787960184299541815910528651555672096706340659762220635996774790303001176856753572297256560097670723015243180488972016453&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&#39;c1&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;84855521319828020020448068809384113135703375013574055636013459151984904926013060168559438932572351720988574536405041219757650609586761217385808427001020204262032305874206933548737826840501447182203920238204769775531537454607204301478815830436609423437869412027820433923450056939361510843151320837485348066171&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c2&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;54197787252581595971205193568331257218605603041941882795362450109513512664722304194032130716452909927265994263753090021761991044436678485565631063700887091405932490789561882081600940995910094939803525325448032287989826156888870845730794445212288211194966299181587885508098448750830074946100105532032186340554&lt;/span&gt;}
n = data[&lt;span class=&quot;string&quot;&gt;&#39;n&#39;&lt;/span&gt;]
e1 = data[&lt;span class=&quot;string&quot;&gt;&#39;e1&#39;&lt;/span&gt;]
e2 = data[&lt;span class=&quot;string&quot;&gt;&#39;e2&#39;&lt;/span&gt;]
message1 = data[&lt;span class=&quot;string&quot;&gt;&#39;c1&#39;&lt;/span&gt;]
message2 = data[&lt;span class=&quot;string&quot;&gt;&#39;c2&#39;&lt;/span&gt;]

&lt;span class=&quot;comment&quot;&gt;# s &amp;amp; t&lt;/span&gt;
gcd, s, t = gmpy2.gcdext(e1, e2)
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:
    s = -s
    message1 = gmpy2.invert(message1, n)
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:
    t = -t
    message2 = gmpy2.invert(message2, n)
plain = gmpy2.powmod(message1, s, n) * gmpy2.powmod(message2, t, n) % n
print(plain)
print(long_to_bytes(plain).decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;flag:&lt;/strong&gt;&lt;code&gt;sun{d0n7_d0_m0r3_th4n_0ne_3xp0n3nt}&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="SunshineCTF" scheme="https://zhaoqi.vip/tags/SunshineCTF/"/>
    
  </entry>
  
  <entry>
    <title>TMUCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/500717398.html"/>
    <id>https://zhaoqi.vip/500717398.html</id>
    <published>2021-09-18T08:56:00.000Z</published>
    <updated>2021-09-24T05:34:52.611Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Puzzle&quot;&gt;&lt;a href=&quot;#Puzzle&quot; class=&quot;headerlink&quot; title=&quot;Puzzle&quot;&gt;&lt;/a&gt;Puzzle&lt;/h1&gt;&lt;p&gt;&lt;em&gt;Life is a puzzle!&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;给了一张图片,首先使用&lt;code&gt;binwalk&lt;/code&gt;提取一下文件,得到一个有密码的压缩文件和一张图片.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;CTF/TMUCTF2021/Misc/assets/puzzle.png&quot; style=&quot;zoom:40%;&quot;&gt;&lt;/p&gt;
&lt;p&gt;观察图片发现,第一位数字表示行号,剩下的数字是在描述上一行数字的个数.&lt;/p&gt;
&lt;p&gt;例如,从12-&amp;gt;11112是:先写一个1表示行号,上一行有1个1、1个2,加上11和12即可得到11112.&lt;/p&gt;
&lt;p&gt;依次类推,得到压缩包的解压密码&lt;code&gt;?&lt;/code&gt;是&lt;code&gt;61542142311&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;输入密码,解压得到&lt;code&gt;flag.txt&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;R1pIUEdTe1EzeV9NM19RNDU3NHpfRTRzNzBfVzRhX1U0el9PMV9RM3kwX1c0YV9QdTAwYV9YMGE0en0=&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;base64解码一下:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GZHPGS{Q3y_M3_Q4574z_E4s70_W4a_U4z_O1_Q3y0_W4a_Pu00a_X0a4z}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ROT13解密一下:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TMUCTF{D3l_Z3_D4574m_R4f70_J4n_H4m_B1_D3l0_J4n_Ch00n_K0n4m}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;flag:&lt;/strong&gt;&lt;code&gt;TMUCTF{D3l_Z3_D4574m_R4f70_J4n_H4m_B1_D3l0_J4n_Ch00n_K0n4m}&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="TMUCTF" scheme="https://zhaoqi.vip/tags/TMUCTF/"/>
    
  </entry>
  
  <entry>
    <title>常用Docker容器启动命令</title>
    <link href="https://zhaoqi.vip/docker.html"/>
    <id>https://zhaoqi.vip/docker.html</id>
    <published>2021-02-26T13:40:00.000Z</published>
    <updated>2021-09-24T05:33:49.235Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h1&gt;&lt;h2 id=&quot;关系型数据库&quot;&gt;&lt;a href=&quot;#关系型数据库&quot; class=&quot;headerlink&quot; title=&quot;关系型数据库&quot;&gt;&lt;/a&gt;关系型数据库&lt;/h2&gt;&lt;h3 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run  -p 3306:3306 --name mysql \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-v &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(pwd)&lt;/span&gt;/mysql&quot;&lt;/span&gt;:/var/lib/mysql \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Postgres&quot;&gt;&lt;a href=&quot;#Postgres&quot; class=&quot;headerlink&quot; title=&quot;Postgres&quot;&gt;&lt;/a&gt;Postgres&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run  --name postgres \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-v &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(pwd)&lt;/span&gt;/postgres&quot;&lt;/span&gt;:/var/lib/postgresql/data \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-e POSTGRES_PASSWORD=123456 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-p 5432:5432 -d postgres&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://zhaoqi.vip/tags/Docker/"/>
    
      <category term="容器" scheme="https://zhaoqi.vip/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Windows下编译Miracl密码库</title>
    <link href="https://zhaoqi.vip/2543483413.html"/>
    <id>https://zhaoqi.vip/2543483413.html</id>
    <published>2020-04-20T08:32:00.000Z</published>
    <updated>2021-09-24T05:33:49.235Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Miracl是一个密码学C语言函数库,网上针对Windows环境下使用的教程都是使用MSVC编译的,步骤比较繁琐,还需安装Visual Studio。看了一下官网文档,是支持使用gcc进行编译的,遂尝试了一下。&lt;/p&gt;
&lt;h1 id=&quot;所需环境&quot;&gt;&lt;a href=&quot;#所需环境&quot; class=&quot;headerlink&quot; title=&quot;所需环境&quot;&gt;&lt;/a&gt;所需环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codeblocks.org/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeBlocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitforwindows.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git Bash&lt;/a&gt;
    
    </summary>
    
    
      <category term="Miracl" scheme="https://zhaoqi.vip/tags/Miracl/"/>
    
      <category term="密码学" scheme="https://zhaoqi.vip/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建Gitlab仓库</title>
    <link href="https://zhaoqi.vip/151510421.html"/>
    <id>https://zhaoqi.vip/151510421.html</id>
    <published>2020-02-26T03:49:00.000Z</published>
    <updated>2021-09-24T05:33:49.231Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;拉取Gitlab镜像&lt;br&gt;&lt;code&gt;docker pull gitlab/gitlab-ce&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img data-src=&quot;/151510421/pasted-1.png&quot;&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;创建文件夹&lt;br&gt;&lt;code&gt;mkdir gitlab&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Gitlab" scheme="https://zhaoqi.vip/tags/Gitlab/"/>
    
      <category term="Docker" scheme="https://zhaoqi.vip/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现一个迷你Shell</title>
    <link href="https://zhaoqi.vip/1118750159.html"/>
    <id>https://zhaoqi.vip/1118750159.html</id>
    <published>2020-02-25T12:23:00.000Z</published>
    <updated>2021-09-24T05:33:49.231Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;俄勒冈州立大学（Oregon State University) CS 344作业,使用C语言实现一个Shell.&lt;br&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="https://zhaoqi.vip/tags/Shell/"/>
    
      <category term="C语言" scheme="https://zhaoqi.vip/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Linux" scheme="https://zhaoqi.vip/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>在Django中间件处对API进行统一处理</title>
    <link href="https://zhaoqi.vip/2620614917.html"/>
    <id>https://zhaoqi.vip/2620614917.html</id>
    <published>2019-10-04T09:56:00.000Z</published>
    <updated>2021-09-24T05:33:49.235Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;公司实习时遇到一个问题:项目中所使用不是Restful API,每个视图函数都要先生成字典，于是项目中便充斥着如下的代码:&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;result=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;msg&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;xx&quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	&quot;status&quot;:200,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	&quot;result&quot;:data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;return HttpResponse(json.loads(result))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="https://zhaoqi.vip/categories/Django/"/>
    
    
      <category term="Python" scheme="https://zhaoqi.vip/tags/Python/"/>
    
      <category term="API" scheme="https://zhaoqi.vip/tags/API/"/>
    
      <category term="Django" scheme="https://zhaoqi.vip/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>人生苦短，我用Python</title>
    <link href="https://zhaoqi.vip/2604890615.html"/>
    <id>https://zhaoqi.vip/2604890615.html</id>
    <published>2019-03-19T14:01:00.000Z</published>
    <updated>2021-09-24T05:33:49.235Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前几日代写留学生作业时遇到了两道很有意思的Python编程题，在此做一记录，主要涉及到一些Python的高级特性:生成器、lambda表达式。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zhaoqi.vip/categories/Python/"/>
    
    
      <category term="Python" scheme="https://zhaoqi.vip/tags/Python/"/>
    
      <category term="lambda" scheme="https://zhaoqi.vip/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>ThinkServer RD650安装Ubuntu Server 16.04</title>
    <link href="https://zhaoqi.vip/560540611.html"/>
    <id>https://zhaoqi.vip/560540611.html</id>
    <published>2018-07-24T14:50:22.000Z</published>
    <updated>2021-09-24T05:33:49.235Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在Ubuntu官网上下载Ubuntu Server 16.04的ISO镜像(&lt;a href=&quot;http://releases.ubuntu.com/16.04/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载链接&lt;/a&gt;)；&lt;/li&gt;
&lt;li&gt;使用刻录软件(如:软碟通)将iso镜像文件写入U盘中，制成启动盘；&lt;/li&gt;
&lt;li&gt;将ISO镜像文件拷贝至U盘的根目录，为了方便后续操作，这里可将镜像文件重命名为&lt;code&gt;Ubuntu.iso&lt;/code&gt;；
    
    </summary>
    
      <category term="Linux" scheme="https://zhaoqi.vip/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://zhaoqi.vip/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://zhaoqi.vip/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>用C#爬虫爬取校园最新通知</title>
    <link href="https://zhaoqi.vip/976598171.html"/>
    <id>https://zhaoqi.vip/976598171.html</id>
    <published>2018-06-20T09:55:22.000Z</published>
    <updated>2021-09-24T05:33:49.235Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几个月用Python写了一个爬虫，用于爬取校园最新通知。最近的C#课程设计中想实现同样的功能，于是按照之前Python代码的思路重构了一下。&lt;br&gt;&lt;a href=&quot;https://zhaoqi99.github.io/45013.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用Python实现校园通知更新提醒&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="C#" scheme="https://zhaoqi.vip/categories/C/"/>
    
    
      <category term="C#" scheme="https://zhaoqi.vip/tags/C/"/>
    
      <category term="爬虫" scheme="https://zhaoqi.vip/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>C#中使用SmtpClient发送邮件</title>
    <link href="https://zhaoqi.vip/3123403799.html"/>
    <id>https://zhaoqi.vip/3123403799.html</id>
    <published>2018-06-18T18:41:13.000Z</published>
    <updated>2021-09-24T05:33:49.231Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近写C#课程设计时需要用C#来发送邮件，但是网上搜的代码经过测试均不能使用，调试了很久也没能成功。最后索性自己对着官方文档撸了一个，期间踩了很多坑，故在此做一总结。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;命名空间导入:&lt;code&gt;using System.Net.Mail;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在邮箱设置中开通smtp服务，并获取授权码。
    
    </summary>
    
      <category term="C#" scheme="https://zhaoqi.vip/categories/C/"/>
    
    
      <category term="C#" scheme="https://zhaoqi.vip/tags/C/"/>
    
      <category term=".NET" scheme="https://zhaoqi.vip/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>C#中自己生成验证码</title>
    <link href="https://zhaoqi.vip/1000607951.html"/>
    <id>https://zhaoqi.vip/1000607951.html</id>
    <published>2018-06-18T18:41:13.000Z</published>
    <updated>2021-09-24T05:33:49.231Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近写C#课程设计时，登录验证处需用到验证码，于是参照网上博客，自己封装了一个验证码类，和网上其他博客相比，有以下优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去除了0,o,O与1,l等容易混淆的字符&lt;/li&gt;
&lt;li&gt;使用方便，仅需三行代码&lt;/li&gt;
&lt;li&gt;内置有返回MD5加密后的字符串的方法，便于前端调用
    
    </summary>
    
      <category term="C#" scheme="https://zhaoqi.vip/categories/C/"/>
    
    
      <category term="C#" scheme="https://zhaoqi.vip/tags/C/"/>
    
      <category term=".NET" scheme="https://zhaoqi.vip/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>使用c#中的HttpWebRequest实现12306余票查询</title>
    <link href="https://zhaoqi.vip/1797370495.html"/>
    <id>https://zhaoqi.vip/1797370495.html</id>
    <published>2018-06-18T18:41:13.000Z</published>
    <updated>2021-09-24T05:33:49.235Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;下载用于解析JSON的类库(Newtonsoft.Json.dll)(下载地址:&lt;a href=&quot;https://archive.codeplex.com/?p=json&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Newtonsoft.Json.dll&lt;/a&gt;)；&lt;/li&gt;
&lt;li&gt;在C#项目中添加对其的引用。&lt;/li&gt;
&lt;li&gt;在程序中导入命名空间:&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; Newtonsoft.Json;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; Newtonsoft.Json.Linq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Net;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Text.RegularExpressions;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Xml;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="C#" scheme="https://zhaoqi.vip/categories/C/"/>
    
    
      <category term="C#" scheme="https://zhaoqi.vip/tags/C/"/>
    
      <category term=".NET" scheme="https://zhaoqi.vip/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>银行家算法(使用DFS找出所有安全序列)</title>
    <link href="https://zhaoqi.vip/647653334.html"/>
    <id>https://zhaoqi.vip/647653334.html</id>
    <published>2018-06-02T04:41:13.000Z</published>
    <updated>2021-09-24T05:33:49.235Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;h3 id=&quot;银行家算法&quot;&gt;&lt;a href=&quot;#银行家算法&quot; class=&quot;headerlink&quot; title=&quot;银行家算法&quot;&gt;&lt;/a&gt;银行家算法&lt;/h3&gt;&lt;p&gt;银行家算法是一种最有代表性的避免死锁的算法。在避免死锁方法中允许进程动态地申请资源，但系统在进行资源分配之前，应先计算此次分配资源的安全性，若分配不会导致系统进入不安全状态，则分配，否则等待。为实现银行家算法，系统必须设置若干数据结构。&lt;br&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://zhaoqi.vip/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="DFS" scheme="https://zhaoqi.vip/tags/DFS/"/>
    
      <category term="操作系统" scheme="https://zhaoqi.vip/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>用Python实现校园通知更新提醒</title>
    <link href="https://zhaoqi.vip/45013.html"/>
    <id>https://zhaoqi.vip/45013.html</id>
    <published>2018-04-21T13:26:00.000Z</published>
    <updated>2021-09-24T05:33:49.235Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这个项目实已经在一个月前已经完成了，一直都想写一篇博客来总结这个过程中遇到的一些问题。但最近一个月来都比较忙，所以一直拖到了现在。&lt;br&gt;首先说说起因吧，我没事的时候，总喜欢依次点开学校主页、教务处、图书馆以及学院的网站，看看有没有什么新通知，虽然大多与我无关。恰逢最近正在学Python，经常听到别人说用Python写爬虫很简单，但自己尚未接触过爬虫。于是抱着试一试的心态看了几篇关于Python爬虫的博客，发现实现起来的确很简单。于是，便一边看着官方的文档说明，一边看着别人的博客，终于完成了自己的第一次爬虫。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zhaoqi.vip/categories/Python/"/>
    
    
      <category term="Python" scheme="https://zhaoqi.vip/tags/Python/"/>
    
      <category term="爬虫" scheme="https://zhaoqi.vip/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Twilio" scheme="https://zhaoqi.vip/tags/Twilio/"/>
    
      <category term="正则表达式" scheme="https://zhaoqi.vip/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Github pages个人域名添加SSL</title>
    <link href="https://zhaoqi.vip/18543.html"/>
    <id>https://zhaoqi.vip/18543.html</id>
    <published>2018-04-10T03:08:11.000Z</published>
    <updated>2021-09-24T05:33:49.231Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;寒假的时候用Hexo+Github pages搭建了属于自己的博客，前不久才绑定了个人域名。作为一名有强迫症的程序猿，肯定还要给自己加一个绿色的小锁头。&lt;br&gt;在网上看别人的博客，大部分是用的&lt;a href=&quot;https://www.cloudflare.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CloudFlare&lt;/a&gt;提供的免费https服务，也有采用的阿里云提供的一年免费证书，我选择的是后者。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zhaoqi.vip/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://zhaoqi.vip/tags/Hexo/"/>
    
      <category term="Github" scheme="https://zhaoqi.vip/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>L2-3.名人堂与代金券</title>
    <link href="https://zhaoqi.vip/45393.html"/>
    <id>https://zhaoqi.vip/45393.html</id>
    <published>2018-04-01T14:46:11.000Z</published>
    <updated>2021-09-24T05:33:49.231Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目内容&quot;&gt;&lt;a href=&quot;#题目内容&quot; class=&quot;headerlink&quot; title=&quot;题目内容&quot;&gt;&lt;/a&gt;题目内容&lt;/h2&gt;&lt;p&gt;对于在中国大学MOOC(&lt;a href=&quot;http://www.icourse163.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.icourse163.org/&lt;/a&gt;) 学习“数据结构”课程的学生，想要获得一张合格证书，总评成绩必须达到 60 分及以上，并且有另加福利：总评分在 [G, 100] 区间内者，可以得到 50 元 PAT 代金券；在 [60, G) 区间内者，可以得到 20 元PAT代金券。全国考点通用，一年有效。同时任课老师还会把总评成绩前 K 名的学生列入课程“名人堂”。本题就请你编写程序，帮助老师列出名人堂的学生，并统计一共发出了面值多少元的 PAT 代金券。&lt;br&gt;
    
    </summary>
    
      <category term="CCCC天梯赛" scheme="https://zhaoqi.vip/categories/CCCC%E5%A4%A9%E6%A2%AF%E8%B5%9B/"/>
    
    
      <category term="CCCC天梯赛" scheme="https://zhaoqi.vip/tags/CCCC%E5%A4%A9%E6%A2%AF%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github pages博客绑定中文域名</title>
    <link href="https://zhaoqi.vip/24787.html"/>
    <id>https://zhaoqi.vip/24787.html</id>
    <published>2018-02-12T10:48:43.000Z</published>
    <updated>2021-09-24T05:33:49.231Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;近期又开始了hexo的折腾，在阿里云上买了一个属于自己的域名，因此想着把自己用hexo+Github搭建的博客通过域名访问，于是按照百度上的教程一步一步来绑定域名，结果出现了很多问题 。整个过程可谓一波三折，终于实现了通过域名来访问博客，下面简要介绍一下我绑定域名过程中遇到的问题以及解决方案。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zhaoqi.vip/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://zhaoqi.vip/tags/Hexo/"/>
    
      <category term="Github" scheme="https://zhaoqi.vip/tags/Github/"/>
    
  </entry>
  
</feed>
