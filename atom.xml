<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>温柔小猪</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaoqi.vip/"/>
  <updated>2022-03-23T09:26:38.113Z</updated>
  <id>https://zhaoqi.vip/</id>
  
  <author>
    <name>Zhao Qi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThorCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/posts/1756116899/"/>
    <id>https://zhaoqi.vip/posts/1756116899/</id>
    <published>2021-11-29T07:05:35.000Z</published>
    <updated>2022-03-23T09:26:38.113Z</updated>
    
    <summary type="html">
    
      Shingeki no RSA
One encryption, three params, you know what to do.

https://drive.google.com/file/d/1xbwFfAHu5OWbkEV3QlYGP59nHXpv57WT/view?usp=sharing




题目给了一个out.txt,里面包含n,e,c的值

使用rsa-wiener-attack破解得到d的值

~$ python RSAwienerHacker.py
Hacked!
50954488565980029757584514143249292352586758895690937
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TFCCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/posts/501486646/"/>
    <id>https://zhaoqi.vip/posts/501486646/</id>
    <published>2021-11-28T13:05:33.000Z</published>
    <updated>2022-03-23T09:26:37.905Z</updated>
    
    <summary type="html">
    
      SEA LANGUAGE 1
Quick! Help! We are sinking!

Wrap the result in TFCCTF{}




看着像摩斯码,直接在gchq.github.io&amp;input=Li0tIC4uLi4gLi4uLi0gLSAtLi4uLi0gLi0gLi0uIC4uLi0tIC0uLi4uLSAtLi0tIC0tLS0tIC4uLSAtLi4uLi0gLi4uIC4tLS0tIC0uIC0uLSAuLS0tLSAtLiAtLS4gLS4uLi4tIC4tIC0uLi4gLS0tLS0gLi4tIC0gLi4tLS4uIC0uLS4tLSAtLi0uLS0g
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="TFCCTF" scheme="https://zhaoqi.vip/tags/TFCCTF/"/>
    
  </entry>
  
  <entry>
    <title>K3RN3LCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/posts/3427623925/"/>
    <id>https://zhaoqi.vip/posts/3427623925/</id>
    <published>2021-11-15T05:33:23.000Z</published>
    <updated>2022-03-23T09:26:37.537Z</updated>
    
    <summary type="html">
    
      3in1
Description
Like Nescafeeeee!

Attachments

https://ctf.k3rn3l4rmy.com/kernelctf-distribution-challs/nescafeee/AES.py




分析代码,发现是AES加密,密钥为hkey

password = (&quot;abda&quot;)    
hash_obj = SHA256.new(password.encode(&#39;utf-8&#39;))    
hkey = hash_obj.digest()

def decrypt(info):
    cipher = AES.new(hkey, AE
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="K3RN3LCTF" scheme="https://zhaoqi.vip/tags/K3RN3LCTF/"/>
    
  </entry>
  
  <entry>
    <title>L3HCTF2021-个人能力认证 Writeup</title>
    <link href="https://zhaoqi.vip/posts/98571386/"/>
    <id>https://zhaoqi.vip/posts/98571386/</id>
    <published>2021-11-14T11:05:32.000Z</published>
    <updated>2022-03-23T09:26:37.657Z</updated>
    
    <summary type="html">
    
      babyflask
http://123.60.19.253:10001




分析给出的源文件,发现/success路由下的name存在SSTI漏洞.

继续分析,name取自session[&#39;name&#39;],用户登录时会自动创新用户和删除前一个同名用户的登录信息,那其实我们用注入的代码的作为用户名直接登录即可.

template =  &#39;&#39;&#39;
Congratulations, %s. You can get flag now!
&#39;&#39;&#39; % name
return render_template_string(template)


要想执行到上述代码,需要给flag投满8票(我们手里只有
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="L3HCTF" scheme="https://zhaoqi.vip/tags/L3HCTF/"/>
    
      <category term="个人能力认证" scheme="https://zhaoqi.vip/tags/%E4%B8%AA%E4%BA%BA%E8%83%BD%E5%8A%9B%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>KillerQueenCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/posts/2621990551/"/>
    <id>https://zhaoqi.vip/posts/2621990551/</id>
    <published>2021-11-02T07:04:27.000Z</published>
    <updated>2022-03-23T09:26:37.641Z</updated>
    
    <summary type="html">
    
      Cloudsourcing
Sourced in the cloud




使用RsaCtfTool破解公钥,将得到的私钥保存至a.pem

~$ python RsaCtfTool.py --publickey cloudsourcing/key.pub --private
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAzTf73VQrgsjh5aRpcE1waspEO5B48ZgjIfZyloCzR5cC2Rc1
e+YwvI/2hNPuageLgmjOqk6FLO3dxa2kemzH2EBG+n7RHlxIe4z6hobXCkXM4Sd
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="KillerQueenCTF" scheme="https://zhaoqi.vip/tags/KillerQueenCTF/"/>
    
  </entry>
  
  <entry>
    <title>BuckeyeCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/posts/4120451577/"/>
    <id>https://zhaoqi.vip/posts/4120451577/</id>
    <published>2021-10-27T18:22:30.000Z</published>
    <updated>2022-03-23T09:26:37.241Z</updated>
    
    <summary type="html">
    
      Key Exchange
Let’s exchange the flag (securely):
nc crypto.chall.pwnoh.io 13374




分析给出的代码,发现当输入的B等于g的时候,A的值即为shared_secret,从而可以得到AES密钥,解密后即可得到flag.

使用nc连接服务器:

╭─ ~/CTF/BuckeyeCTF2021
╰─$ nc crypto.chall.pwnoh.io 13374
I&#39;m going to send you the flag.
However, I noticed that an FBI agent has been 
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="BuckeyeCTF" scheme="https://zhaoqi.vip/tags/BuckeyeCTF/"/>
    
  </entry>
  
  <entry>
    <title>DEADFACECTF Writeup</title>
    <link href="https://zhaoqi.vip/posts/2879210530/"/>
    <id>https://zhaoqi.vip/posts/2879210530/</id>
    <published>2021-10-17T18:21:49.000Z</published>
    <updated>2022-03-23T09:26:37.441Z</updated>
    
    <summary type="html">
    
      Poor MEAGAN!
Oh, NO! Poor Megan! She’s just been bitten by a ZOMBIE! We can save her if we act fast, but the formula for the antidote has been scrambled somehow. Figure out how to unscramble &gt;the formula to save Megan from certain zombification. Enter the answer as flag{here-is-the-answer}.

The for
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="DEADFACECTF" scheme="https://zhaoqi.vip/tags/DEADFACECTF/"/>
    
  </entry>
  
  <entry>
    <title>DownUnderCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/posts/2302350511/"/>
    <id>https://zhaoqi.vip/posts/2302350511/</id>
    <published>2021-10-09T08:53:47.000Z</published>
    <updated>2022-03-23T09:26:37.493Z</updated>
    
    <summary type="html">
    
      Retro!
Our original logo was created in paint, I wonder what other secrets it hides?




题目给了一张图片:



使用exiftool工具查看图片元数据:



flag:DUCTF{sicc_paint_skillz!}

General Skills Quiz
QUIZ TIME! Just answer the questions. Pretty easy right?

Author: Crem

nc pwn-2021.duc.tf 31905




本题要求使用nc命令连接远程服务器,并在3
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="DownUnderCTF2021" scheme="https://zhaoqi.vip/tags/DownUnderCTF2021/"/>
    
  </entry>
  
  <entry>
    <title>TamilCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/posts/2827311957/"/>
    <id>https://zhaoqi.vip/posts/2827311957/</id>
    <published>2021-09-29T07:05:34.000Z</published>
    <updated>2022-03-23T09:26:37.997Z</updated>
    
    <summary type="html">
    
      Open Flag



访问题目中给出的链接,发现是一个登录页面

随便输入一个用户名和密码直接可以登录,提示我们flag文件的路径是./flag.jpg.
F12看源码发现注释中会显示刚才登录所用的用户名,猜测存在SSTI漏洞,直接用注入代码作为用户名登录即可


使用下列代码作为用户名登录,查看当前已加载的模块;删掉HTML的注释标记&lt;!--,找到os._wrap_close模块所在的索引为132,借助于popen函数可以直接执行系统命令

{{&quot;&quot;.__class__.__bases__[0].__subclasses__()}}




使用curl命令将flag.jpg文件上传至t
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="TamilCTF" scheme="https://zhaoqi.vip/tags/TamilCTF/"/>
    
  </entry>
  
  <entry>
    <title>PBjarCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/posts/2720124286/"/>
    <id>https://zhaoqi.vip/posts/2720124286/</id>
    <published>2021-09-23T08:45:05.000Z</published>
    <updated>2022-03-23T09:26:37.797Z</updated>
    
    <summary type="html">
    
      Convert
So this is supposed to be the challenge for absolute beginners. For this chall, you will get a hexadecimal number, and have to convert it to text. If you don’t know how to do this, Google is your best friend!!!




给了一个文件file.txt,里面是一个16进制的数:

n = &#39;666c61677b6469735f69735f615f666c346767675f6
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="PBjarCTF" scheme="https://zhaoqi.vip/tags/PBjarCTF/"/>
    
  </entry>
  
  <entry>
    <title>TsukuCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/posts/434189373/"/>
    <id>https://zhaoqi.vip/posts/434189373/</id>
    <published>2021-09-22T05:38:53.000Z</published>
    <updated>2022-03-23T09:26:38.145Z</updated>
    
    <summary type="html">
    
      CrackSSH!
調査対象のサーバーで使われている公開鍵を入手した。噂によると、この鍵には問題があるらしいが…。なんとかして侵入しなければ。
Target: frt.hongo.wide.ad.jp
Port: 30022




题目中给了一个公钥:

ssh-rsa AAAAB3NzaC1yc2EAAACBAWKA1hYjuvhxiwCGKsG+nbLj/iYy6pRwkkka64J6L+VLPp4K3JVSREEzmztAWxjkhGOleol3vzDRqR2J+4nSVOI9FhJyiBdSgECmXJYojGVSU56bCMdcysEkKYVz5e0+xQAjZDrotpm+FT0
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="TsukuCTF" scheme="https://zhaoqi.vip/tags/TsukuCTF/"/>
    
  </entry>
  
  <entry>
    <title>SunshineCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/posts/1683940375/"/>
    <id>https://zhaoqi.vip/posts/1683940375/</id>
    <published>2021-09-21T15:38:47.000Z</published>
    <updated>2022-03-23T09:26:37.841Z</updated>
    
    <summary type="html">
    
      MultipleExponents
Both Alice and Bob share the same modulus, but with different exponents. If only there was some way I could recover this message that was sent to both of them.




题目中给出了n,e1,e2,c1,c2的值,这里可以利用RSA共模攻击

import gmpy2
from Crypto.Util.number import long_to_bytes

data = {&#39;n&#39;: 866833001
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="SunshineCTF" scheme="https://zhaoqi.vip/tags/SunshineCTF/"/>
    
  </entry>
  
  <entry>
    <title>TMUCTF2021 Writeup</title>
    <link href="https://zhaoqi.vip/posts/500717398/"/>
    <id>https://zhaoqi.vip/posts/500717398/</id>
    <published>2021-09-18T08:56:00.000Z</published>
    <updated>2022-03-23T09:26:37.981Z</updated>
    
    <summary type="html">
    
      Puzzle
Life is a puzzle!




给了一张图片,首先使用binwalk提取一下文件,得到一个有密码的压缩文件和一张图片.



观察图片发现,第一位数字表示行号,剩下的数字是在描述上一行数字的个数.

例如,从12-&gt;11112是:先写一个1表示行号,上一行有1个1、1个2,加上11和12即可得到11112.

依次类推,得到压缩包的解压密码?是61542142311.

输入密码,解压得到flag.txt:

R1pIUEdTe1EzeV9NM19RNDU3NHpfRTRzNzBfVzRhX1U0el9PMV9RM3kwX1c0YV9QdTAwYV9YMGE0en0=
    
    </summary>
    
      <category term="CTF" scheme="https://zhaoqi.vip/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://zhaoqi.vip/tags/CTF/"/>
    
      <category term="TMUCTF" scheme="https://zhaoqi.vip/tags/TMUCTF/"/>
    
  </entry>
  
  <entry>
    <title>常用Docker容器启动命令</title>
    <link href="https://zhaoqi.vip/posts/docker/"/>
    <id>https://zhaoqi.vip/posts/docker/</id>
    <published>2021-02-26T13:40:00.000Z</published>
    <updated>2022-03-23T09:25:26.808Z</updated>
    
    <summary type="html">
    
      数据库
关系型数据库
MySQL
1
2
3


docker run  -p 3306:3306 --name mysql \
	-v &quot;$(pwd)/mysql&quot;:/var/lib/mysql \
	-e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7


Postgres
1
2
3
4


docker run  --name postgres \
	-v &quot;$(pwd)/postgres&quot;:/var/lib/postgresql/data \
	-e POSTGRES_PASSWORD=123456 \
	-p 5432:5432 -d postgre
    
    </summary>
    
    
      <category term="Docker" scheme="https://zhaoqi.vip/tags/Docker/"/>
    
      <category term="容器" scheme="https://zhaoqi.vip/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Windows下编译Miracl密码库</title>
    <link href="https://zhaoqi.vip/posts/2543483413/"/>
    <id>https://zhaoqi.vip/posts/2543483413/</id>
    <published>2020-04-20T08:32:00.000Z</published>
    <updated>2022-03-23T09:25:26.804Z</updated>
    
    <summary type="html">
    
      介绍
Miracl是一个密码学C语言函数库,网上针对Windows环境下使用的教程都是使用MSVC编译的,步骤比较繁琐,还需安装Visual Studio。看了一下官网文档,是支持使用gcc进行编译的,遂尝试了一下。

所需环境
 * CodeBlocks
 * Git Bash编译
   

 1. 从Github上下载项目最新源码。(下载地址)
 2. 打开Git Bash,创建一个文件夹miracl，并将压缩文件拷贝至此。
    mkdir miracl
 3. 打开Git Bash，输入如下命令，将所有文件解压到一个目录中。
    unzip -j -aa -L master.zi
    
    </summary>
    
    
      <category term="Miracl" scheme="https://zhaoqi.vip/tags/Miracl/"/>
    
      <category term="密码学" scheme="https://zhaoqi.vip/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建Gitlab仓库</title>
    <link href="https://zhaoqi.vip/posts/151510421/"/>
    <id>https://zhaoqi.vip/posts/151510421/</id>
    <published>2020-02-26T03:49:00.000Z</published>
    <updated>2022-03-23T09:25:26.804Z</updated>
    
    <summary type="html">
    
      安装
 1. 拉取Gitlab镜像
    docker pull gitlab/gitlab-ce

 2. 创建文件夹
    mkdir gitlab
    
    
 3. 创建容器
    
    1
    2
    3
    4
    5
    
    
    docker run -d  -p 8001:8001 -p 222:22 --name gitlab   \
        -v &quot;$(pwd)/gitlab/config&quot;:/etc/gitlab \
        -v &quot;$(pwd)/gitlab/logs&quot;:/var/log/gitlab \
    
    </summary>
    
    
      <category term="Gitlab" scheme="https://zhaoqi.vip/tags/Gitlab/"/>
    
      <category term="Docker" scheme="https://zhaoqi.vip/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现一个迷你Shell</title>
    <link href="https://zhaoqi.vip/posts/1118750159/"/>
    <id>https://zhaoqi.vip/posts/1118750159/</id>
    <published>2020-02-25T12:23:00.000Z</published>
    <updated>2022-03-23T09:25:26.800Z</updated>
    
    <summary type="html">
    
      简介
俄勒冈州立大学（Oregon State University) CS 344作业,使用C语言实现一个Shell.


要求
 * 内置 cd,status和exit 命令
 * 支持输入和输出的重定向
 * 支持后台运行(&amp;)
 * Ctrl-Z 与 Ctrl-C
 * 调用系统其他命令
 * 替换命令中的$$为Shell的PID

参考资料
作业pdf
测试脚本
p3testscriptview raw1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
    
    </summary>
    
    
      <category term="Shell" scheme="https://zhaoqi.vip/tags/Shell/"/>
    
      <category term="C语言" scheme="https://zhaoqi.vip/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Linux" scheme="https://zhaoqi.vip/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>在Django中间件处对API进行统一处理</title>
    <link href="https://zhaoqi.vip/posts/2620614917/"/>
    <id>https://zhaoqi.vip/posts/2620614917/</id>
    <published>2019-10-04T09:56:00.000Z</published>
    <updated>2022-03-23T09:25:26.808Z</updated>
    
    <summary type="html">
    
      前言
公司实习时遇到一个问题:项目中所使用不是Restful API,每个视图函数都要先生成字典，于是项目中便充斥着如下的代码:
1
2
3
4
5
6


result={
	&quot;msg&quot;:&#39;xx&quot;,
	&quot;status&quot;:200,
	&quot;result&quot;:data
}
return HttpResponse(json.loads(result))




维护起来比较麻烦，对前端也很不友好，为了解决该问题，自定义了一个Django中间件对API格式和异常进行统一处理，以此达到如下效果:

 * 在view中只需返回data，raise自定义的异常
 * 实现自定义异常状态码(status)和自定义
    
    </summary>
    
      <category term="Django" scheme="https://zhaoqi.vip/categories/Django/"/>
    
    
      <category term="Python" scheme="https://zhaoqi.vip/tags/Python/"/>
    
      <category term="API" scheme="https://zhaoqi.vip/tags/API/"/>
    
      <category term="Django" scheme="https://zhaoqi.vip/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>人生苦短，我用Python</title>
    <link href="https://zhaoqi.vip/posts/2604890615/"/>
    <id>https://zhaoqi.vip/posts/2604890615/</id>
    <published>2019-03-19T14:01:00.000Z</published>
    <updated>2022-03-23T09:25:26.808Z</updated>
    
    <summary type="html">
    
      前言
前几日代写留学生作业时遇到了两道很有意思的Python编程题，在此做一记录，主要涉及到一些Python的高级特性:生成器、lambda表达式。


Question 1
题意
原文:
Consider the following function
Code1
2
3
4
5
6
7
8
9
10


# listOfNumbers is a list of only numbers
#
def processList(listOfNumbers):
    result = []
    for i in listOfNumbers:
        if i&lt;0 == 0:
     
    
    </summary>
    
      <category term="Python" scheme="https://zhaoqi.vip/categories/Python/"/>
    
    
      <category term="Python" scheme="https://zhaoqi.vip/tags/Python/"/>
    
      <category term="lambda" scheme="https://zhaoqi.vip/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>ThinkServer RD650安装Ubuntu Server 16.04</title>
    <link href="https://zhaoqi.vip/posts/560540611/"/>
    <id>https://zhaoqi.vip/posts/560540611/</id>
    <published>2018-07-24T14:50:22.000Z</published>
    <updated>2022-03-23T09:25:26.804Z</updated>
    
    <summary type="html">
    
      准备工作
 1. 在Ubuntu官网上下载Ubuntu Server 16.04的ISO镜像(下载链接)；
 2. 使用刻录软件(如:软碟通)将iso镜像文件写入U盘中，制成启动盘；
 3. 将ISO镜像文件拷贝至U盘的根目录，为了方便后续操作，这里可将镜像文件重命名为Ubuntu.iso；

设置引导
 1. 按电源键开机，启动服务器(服务器启动可能会比较缓慢)；
    
 2. 出现此界面时，按”F10”进入TDM(ThinkServer Deployment Manager)；
    
 3. 进入TDM后，选择”BIOS Setup(BIOS 设置)”；
    
 4. 选择”B
    
    </summary>
    
      <category term="Linux" scheme="https://zhaoqi.vip/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://zhaoqi.vip/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://zhaoqi.vip/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
